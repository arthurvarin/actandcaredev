'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notify = function (_Component) {
  _inherits(Notify, _Component);

  function Notify() {
    _classCallCheck(this, Notify);

    var _this = _possibleConstructorReturn(this, (Notify.__proto__ || Object.getPrototypeOf(Notify)).call(this));

    _this.wasMounted = true;
    _this.key = 0;
    _this.state = {};
    return _this;
  }

  _createClass(Notify, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.wasMounted = false;
    }
  }, {
    key: 'success',
    value: function success(title, msg, time) {
      this.addNotify(title, msg, time, 'success');
    }
  }, {
    key: 'error',
    value: function error(title, msg, time) {
      this.addNotify(title, msg, time, 'error');
    }
  }, {
    key: 'info',
    value: function info(title, msg, time) {
      this.addNotify(title, msg, time, 'info');
    }
  }, {
    key: 'addNotify',
    value: function addNotify(title, msg, time, theme) {
      var _this2 = this;

      var key = this.key++;
      var state = Object.assign(this.state, _defineProperty({}, key, { title: title, msg: msg, time: time, theme: theme }));

      this.setState(state, function () {
        return _this2.countToHide(time, key);
      });
    }
  }, {
    key: 'countToHide',
    value: function countToHide(duration, key) {
      var _this3 = this;

      setTimeout(function () {
        _this3.hideNotification(key);
      }, duration);
    }
  }, {
    key: 'hideNotification',
    value: function hideNotification(key) {
      if (!this.wasMounted) {
        return;
      }

      this.setState(function (state) {
        delete state[key];
        return state;
      });
    }
  }, {
    key: 'item',
    value: function item(key) {
      var _this4 = this;

      var _state$key = this.state[key],
          theme = _state$key.theme,
          title = _state$key.title,
          msg = _state$key.msg;


      return _react2.default.createElement(
        'div',
        { key: key, className: 'notify-item ' + theme, onClick: function onClick() {
            return _this4.hideNotification(key);
          } },
        _react2.default.createElement(
          'p',
          { className: 'notify-title' },
          title
        ),
        _react2.default.createElement(
          'p',
          { className: 'notify-body' },
          msg
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var state = this.state;

      var keys = Object.keys(state);
      var el = keys.map(function (key) {
        return _this5.item(key);
      });

      return _react2.default.createElement(
        'div',
        { className: 'notify-container' },
        el
      );
    }
  }]);

  return Notify;
}(_react.Component);

exports.default = Notify;