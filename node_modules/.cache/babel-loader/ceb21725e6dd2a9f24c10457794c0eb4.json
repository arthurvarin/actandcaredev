{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport React, { Fragment } from 'react';\nimport warning from 'fbjs/lib/warning';\nimport _regeneratorRuntime from 'babel-runtime/regenerator';\nimport _Promise from 'babel-runtime/core-js/promise';\nimport _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';\nimport BlobStream from 'blob-stream';\nimport ReactFiberReconciler from 'react-reconciler';\nimport emptyObject from 'fbjs/lib/emptyObject';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport PDFDocument, { PDFFont } from '@react-pdf/pdfkit';\nimport _getIterator from 'babel-runtime/core-js/get-iterator';\nimport _wrapPages from 'page-wrapping';\nimport _Object$keys from 'babel-runtime/core-js/object/keys';\nimport isUrl from 'is-url';\nimport fontkit from '@react-pdf/fontkit';\nimport fetch from 'isomorphic-fetch';\nimport _Array$from from 'babel-runtime/core-js/array/from';\nimport emojiRegex from 'emoji-regex';\nimport { Attachment, AttributedString, Container, LayoutEngine, Path, Rect } from '@react-pdf/textkit-core';\nimport scriptItemizer from '@react-pdf/script-itemizer';\nimport justificationEngine from '@textkit/justification-engine';\nimport textDecorationEngine from '@textkit/text-decoration-engine';\nimport english from 'hyphenation.en-us';\nimport Hypher from 'hypher';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _JSON$stringify from 'babel-runtime/core-js/json/stringify';\nimport PNG from '@react-pdf/png-js';\nimport _Object$assign from 'babel-runtime/core-js/object/assign';\nimport Yoga from 'yoga-layout-prebuilt';\nimport toPairsIn from 'lodash.topairsin';\nimport isFunction from 'lodash.isfunction';\nimport pick from 'lodash.pick';\nimport merge from 'lodash.merge';\nimport matchMedia from 'media-engine';\nimport createPDFRenderer from '@textkit/pdf-renderer';\nvar inheritedProperties = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\n\nvar flatStyles = function flatStyles(stylesArray) {\n  return stylesArray.reduce(function (acc, style) {\n    return _extends({}, acc, style);\n  }, {});\n};\n\nvar Root = function () {\n  function Root() {\n    _classCallCheck(this, Root);\n\n    this.isDirty = false;\n    this.document = null;\n    this.instance = null;\n  }\n\n  Root.prototype.appendChild = function appendChild(child) {\n    this.document = child;\n  };\n\n  Root.prototype.removeChild = function removeChild() {\n    this.document = null;\n  };\n\n  Root.prototype.markDirty = function markDirty() {\n    this.isDirty = true;\n  };\n\n  Root.prototype.render = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.instance = new PDFDocument({\n                autoFirstPage: false\n              });\n              _context.next = 3;\n              return this.document.render();\n\n            case 3:\n              this.isDirty = false;\n\n            case 4:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function render() {\n      return _ref.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Root, [{\n    key: 'name',\n    get: function get() {\n      return 'Root';\n    }\n  }]);\n\n  return Root;\n}();\n\nvar standardFonts = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Times-Roman', 'Times-Bold', 'Times-Italic'];\n\nvar fetchFont = function fetchFont(src) {\n  return fetch(src).then(function (response) {\n    if (response.buffer) {\n      return response.buffer();\n    }\n\n    return response.arrayBuffer();\n  }).then(function (arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n  });\n};\n\nvar fonts = {};\nvar emojiSource = void 0;\nvar hyphenationCallback = void 0;\n\nvar register = function register(src, _ref) {\n  var family = _ref.family,\n      otherOptions = _objectWithoutProperties(_ref, ['family']);\n\n  fonts[family] = _extends({\n    src: src,\n    loaded: false,\n    loading: false,\n    data: null\n  }, otherOptions);\n};\n\nvar registerHyphenationCallback = function registerHyphenationCallback(callback) {\n  hyphenationCallback = callback;\n};\n\nvar registerEmojiSource = function registerEmojiSource(_ref2) {\n  var url = _ref2.url,\n      _ref2$format = _ref2.format,\n      format = _ref2$format === undefined ? 'png' : _ref2$format;\n  emojiSource = {\n    url: url,\n    format: format\n  };\n};\n\nvar getRegisteredFonts = function getRegisteredFonts() {\n  return _Object$keys(fonts);\n};\n\nvar getFont = function getFont(family) {\n  return fonts[family];\n};\n\nvar getEmojiSource = function getEmojiSource() {\n  return emojiSource;\n};\n\nvar getHyphenationCallback = function getHyphenationCallback() {\n  return hyphenationCallback;\n};\n\nvar load = function () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(fontFamily, doc) {\n    var font, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            font = fonts[fontFamily]; // We cache the font to avoid fetching it many times\n\n            if (!(font && !font.data && !font.loading)) {\n              _context.next = 15;\n              break;\n            }\n\n            font.loading = true;\n\n            if (!isUrl(font.src)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 6;\n            return fetchFont(font.src);\n\n          case 6:\n            data = _context.sent;\n            font.data = fontkit.create(data);\n            _context.next = 15;\n            break;\n\n          case 10:\n            throw new Error('Invalid font url: ' + font.src + '. If you use relative url please replace it with absolute one (ex. /font.ttf -> http://localhost:3000/font.ttf)');\n\n          case 12:\n            _context.next = 14;\n            return new _Promise(function (resolve, reject) {\n              return fontkit.open(font.src, function (err, data) {\n                return err ? reject(err) : resolve(data);\n              });\n            });\n\n          case 14:\n            font.data = _context.sent;\n\n          case 15:\n            // If the font wasn't added to the document yet (aka. loaded), we add it.\n            // This prevents calling `registerFont` many times for the same font.\n            // Fonts loaded state will be reset after the document is closed.\n            if (font && !font.loaded) {\n              font.loaded = true;\n              font.loading = false;\n              doc.registerFont(fontFamily, font.data);\n            }\n\n            if (!(!font && !standardFonts.includes(fontFamily))) {\n              _context.next = 18;\n              break;\n            }\n\n            throw new Error('Font family not registered: ' + fontFamily + '. Please register it calling Font.register() method.');\n\n          case 18:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function load(_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar reset = function reset() {\n  for (var font in fonts) {\n    if (fonts.hasOwnProperty(font)) {\n      fonts[font].loaded = false;\n    }\n  }\n};\n\nvar clear = function clear() {\n  fonts = {};\n};\n\nvar Font = {\n  register: register,\n  getEmojiSource: getEmojiSource,\n  getRegisteredFonts: getRegisteredFonts,\n  registerEmojiSource: registerEmojiSource,\n  registerHyphenationCallback: registerHyphenationCallback,\n  getHyphenationCallback: getHyphenationCallback,\n  getFont: getFont,\n  load: load,\n  clear: clear,\n  reset: reset\n};\n\nvar StandardFont = function () {\n  function StandardFont(src) {\n    _classCallCheck(this, StandardFont);\n\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n  }\n\n  StandardFont.prototype.layout = function layout(str) {\n    var _this = this;\n\n    var _src$encode = this.src.encode(str),\n        encoded = _src$encode[0],\n        positions = _src$encode[1];\n\n    return {\n      positions: positions,\n      stringIndices: positions.map(function (_, i) {\n        return i;\n      }),\n      glyphs: encoded.map(function (g, i) {\n        var glyph = _this.getGlyph(parseInt(g, 16));\n\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      })\n    };\n  };\n\n  StandardFont.prototype.glyphForCodePoint = function glyphForCodePoint(codePoint) {\n    var glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  };\n\n  StandardFont.prototype.getGlyph = function getGlyph(id) {\n    return {\n      id: id,\n      _font: this.src,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id)\n    };\n  };\n\n  StandardFont.prototype.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  };\n\n  _createClass(StandardFont, [{\n    key: 'ascent',\n    get: function get() {\n      return this.src.ascender;\n    }\n  }, {\n    key: 'descent',\n    get: function get() {\n      return this.src.descender;\n    }\n  }, {\n    key: 'lineGap',\n    get: function get() {\n      return this.src.lineGap;\n    }\n  }, {\n    key: 'unitsPerEm',\n    get: function get() {\n      return 1000;\n    }\n  }]);\n\n  return StandardFont;\n}();\n\nvar fontSubstitutionEngine = function fontSubstitutionEngine() {\n  return function (_ref) {\n    var Run = _ref.Run;\n    return function () {\n      function FontSubstitutionEngine() {\n        _classCallCheck(this, FontSubstitutionEngine);\n\n        this.fontCache = {};\n      }\n\n      FontSubstitutionEngine.prototype.getOrCreateFont = function getOrCreateFont(name) {\n        if (this.fontCache[name]) return this.fontCache[name];\n        var font = new StandardFont(name);\n        this.fontCache[name] = font;\n        return font;\n      };\n\n      FontSubstitutionEngine.prototype.shouldFallbackToFont = function shouldFallbackToFont(codePoint, font) {\n        return !font.hasGlyphForCodePoint(codePoint) && this.fallbackFont.hasGlyphForCodePoint(codePoint);\n      };\n\n      FontSubstitutionEngine.prototype.getRuns = function getRuns(string, runs) {\n        var res = [];\n        var lastFont = null;\n        var lastIndex = 0;\n        var index = 0;\n\n        for (var _iterator = runs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var run = _ref2;\n          var defaultFont = typeof run.attributes.font === 'string' ? this.getOrCreateFont(run.attributes.font) : run.attributes.font;\n\n          if (string.length === 0) {\n            res.push(new Run(0, 0, {\n              font: defaultFont\n            }));\n            break;\n          }\n\n          for (var _iterator2 = string.slice(run.start, run.end), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n            var _ref3;\n\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref3 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref3 = _i2.value;\n            }\n\n            var char = _ref3;\n            var codePoint = char.codePointAt();\n            var font = this.shouldFallbackToFont(codePoint, defaultFont) ? this.fallbackFont : defaultFont; // If the default font does not have a glyph and the fallback font does, we use it\n\n            if (font !== lastFont) {\n              if (lastFont) {\n                res.push(new Run(lastIndex, index, {\n                  font: lastFont\n                }));\n              }\n\n              lastFont = font;\n              lastIndex = index;\n            }\n\n            index += char.length;\n          }\n        }\n\n        if (lastIndex < string.length) {\n          res.push(new Run(lastIndex, string.length, {\n            font: lastFont\n          }));\n        }\n\n        return res;\n      };\n\n      _createClass(FontSubstitutionEngine, [{\n        key: 'fallbackFont',\n        get: function get() {\n          return this.getOrCreateFont('Helvetica');\n        }\n      }]);\n\n      return FontSubstitutionEngine;\n    }();\n  };\n};\n\nvar SOFT_HYPHEN_HEX = '\\xAD';\nvar hypher = new Hypher(english);\n\nvar wordHyphenation = function wordHyphenation(_ref) {\n  var hyphenationCallback = _ref.hyphenationCallback;\n  return function () {\n    return function () {\n      function _class() {\n        _classCallCheck(this, _class);\n\n        this.cache = {};\n      }\n\n      _class.prototype.calculateParts = function calculateParts(word) {\n        return word.includes(SOFT_HYPHEN_HEX) ? word.split(SOFT_HYPHEN_HEX) : hypher.hyphenate(word);\n      };\n\n      _class.prototype.hyphenateWord = function hyphenateWord(word) {\n        if (this.cache[word]) return this.cache[word];\n        var parts = hyphenationCallback ? hyphenationCallback(word) : this.calculateParts(word);\n        this.cache[word] = parts;\n        return parts;\n      };\n\n      return _class;\n    }();\n  };\n};\n\nvar Node = function () {\n  function Node(data) {\n    _classCallCheck(this, Node);\n\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n\n  Node.prototype.toString = function toString() {\n    return this.data.toString();\n  };\n\n  return Node;\n}();\n\nvar LinkedList = function () {\n  function LinkedList() {\n    _classCallCheck(this, LinkedList);\n\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n  }\n\n  LinkedList.prototype.isLinked = function isLinked(node) {\n    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n  };\n\n  LinkedList.prototype.size = function size() {\n    return this.listSize;\n  };\n\n  LinkedList.prototype.isEmpty = function isEmpty() {\n    return this.listSize === 0;\n  };\n\n  LinkedList.prototype.first = function first() {\n    return this.head;\n  };\n\n  LinkedList.prototype.last = function last() {\n    return this.last;\n  };\n\n  LinkedList.prototype.toString = function toString() {\n    return this.toArray().toString();\n  };\n\n  LinkedList.prototype.toArray = function toArray() {\n    var node = this.head;\n    var result = [];\n\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n\n    return result;\n  };\n\n  LinkedList.prototype.forEach = function forEach(fun) {\n    var node = this.head;\n\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  };\n\n  LinkedList.prototype.contains = function contains(n) {\n    var node = this.head;\n\n    if (!this.isLinked(n)) {\n      return false;\n    }\n\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n\n      node = node.next;\n    }\n\n    return false;\n  };\n\n  LinkedList.prototype.at = function at(i) {\n    var node = this.head;\n    var index = 0;\n\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n\n      node = node.next;\n      index += 1;\n    }\n\n    return null;\n  };\n\n  LinkedList.prototype.insertAfter = function insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n\n    newNode.prev = node;\n    newNode.next = node.next;\n\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  };\n\n  LinkedList.prototype.insertBefore = function insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n\n    newNode.prev = node.prev;\n    newNode.next = node;\n\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  };\n\n  LinkedList.prototype.push = function push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n\n    return this;\n  };\n\n  LinkedList.prototype.unshift = function unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n\n    return this;\n  };\n\n  LinkedList.prototype.remove = function remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n\n    this.listSize -= 1;\n    return this;\n  };\n\n  LinkedList.prototype.pop = function pop() {\n    var node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n\n  LinkedList.prototype.shift = function shift() {\n    var node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n\n  return LinkedList;\n}();\n\nLinkedList.Node = Node;\n/**\r\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\r\n *\r\n * Licensed under the new BSD License.\r\n * Copyright 2009-2010, Bram Stein\r\n * All rights reserved.\r\n */\n\nvar linebreak = function linebreak(nodes, lines, settings) {\n  var options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  var activeNodes = new LinkedList();\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLengths = lines;\n  var breaks = [];\n  var tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position: position,\n      demerits: demerits,\n      ratio: ratio,\n      line: line,\n      fitnessClass: fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous: previous\n    };\n  }\n\n  function computeCost(start, end, active, currentLine) {\n    var width = sum.width - active.totals.width;\n    var stretch = 0;\n    var shrink = 0; // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n\n    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n\n      return linebreak.infinity;\n    } else if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n\n      return linebreak.infinity;\n    } // perfect match\n\n\n    return 0;\n  } // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n\n\n  function computeSum(breakPointIndex) {\n    var result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n\n    for (var i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n\n    return result;\n  } // The main loop of the algorithm\n\n\n  function mainLoop(node, index, nodes) {\n    var active = activeNodes.first();\n    var next = null;\n    var ratio = 0;\n    var demerits = 0;\n    var candidates = [];\n    var badness = void 0;\n    var currentLine = 0;\n    var tmpSum = void 0;\n    var currentClass = 0;\n    var fitnessClass = void 0;\n    var candidate = void 0;\n    var newNode = void 0; // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }]; // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine); // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        } // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n\n\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3); // Positive penalty\n\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2); // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2); // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          } // Calculate the fitness class for this candidate active node.\n\n\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          } // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n\n\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          } // Add the total demerits of the active node to get the total demerits of this candidate node.\n\n\n          demerits += active.data.demerits; // Only store the best candidate for each fitness class\n\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active: active,\n              demerits: demerits,\n              ratio: ratio\n            };\n          }\n        }\n\n        active = next; // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n\n      tmpSum = computeSum(index);\n\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  } // Add an active node for the start of the paragraph.\n\n\n  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n  nodes.forEach(function (node, index, nodes) {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(function (node) {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n\n    return breaks.reverse();\n  }\n\n  return [];\n};\n\nlinebreak.infinity = 10000;\n\nlinebreak.glue = function (width, value, stretch, shrink) {\n  return {\n    type: 'glue',\n    value: value,\n    width: width,\n    stretch: stretch,\n    shrink: shrink\n  };\n};\n\nlinebreak.box = function (width, value) {\n  var hyphenated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: 'box',\n    width: width,\n    value: value,\n    hyphenated: hyphenated\n  };\n};\n\nlinebreak.penalty = function (width, penalty, flagged) {\n  return {\n    type: 'penalty',\n    width: width,\n    penalty: penalty,\n    flagged: flagged\n  };\n};\n\nvar INFINITY = 10000;\n\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    } else if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n\n    return 0;\n  };\n\n  for (var i = 0; i < subnodes.length; i++) {\n    var node = subnodes[i];\n\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n\n    if (sum.width - sum.shrink > lineLength) break;\n\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\n\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n\n    if (breakpoint) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n\n  return breakpoints;\n};\n\nvar HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n\nvar lineBreaker = function lineBreaker() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      penalty = _ref.penalty;\n\n  return function () {\n    return function () {\n      function KPLineBreaker(tolerance) {\n        _classCallCheck(this, KPLineBreaker);\n\n        this.tolerance = tolerance || 4;\n      }\n\n      KPLineBreaker.prototype.getNodes = function getNodes(glyphString, syllables, _ref2) {\n        var align = _ref2.align;\n        var start = 0;\n        var hyphenWidth = 5;\n        var hyphenPenalty = penalty || (align === 'justify' ? 100 : 600);\n        var result = syllables.reduce(function (acc, s, index) {\n          var glyphStart = glyphString.glyphIndexForStringIndex(start);\n          var glyphEnd = glyphString.glyphIndexForStringIndex(start + s.length);\n          var syllable = glyphString.slice(glyphStart, glyphEnd);\n\n          if (syllable.string.trim() === '') {\n            var width = syllable.advanceWidth;\n            var stretch = width * opts.width / opts.stretch;\n            var shrink = width * opts.width / opts.shrink;\n            var value = {\n              value: syllable,\n              start: start,\n              end: start + syllable.end\n            };\n            acc.push(linebreak.glue(width, value, stretch, shrink));\n          } else {\n            var hyphenated = syllables[index + 1] !== ' ';\n            var _value = {\n              value: syllable,\n              start: start,\n              end: start + syllable.end\n            };\n            acc.push(linebreak.box(syllable.advanceWidth, _value, hyphenated));\n\n            if (syllables[index + 1] && hyphenated) {\n              acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n            }\n          }\n\n          start += s.length;\n          return acc;\n        }, []);\n        result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n        result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n        return result;\n      };\n\n      KPLineBreaker.prototype.breakLines = function breakLines(glyphString, nodes, breaks) {\n        var start = 0;\n        var end = null;\n        var lines = breaks.reduce(function (acc, breakPoint) {\n          var node = nodes[breakPoint.position];\n          var prevNode = nodes[breakPoint.position - 1]; // Last breakpoint corresponds to K&P mandatory final glue\n\n          if (breakPoint.position === nodes.length - 1) return acc;\n          var line = void 0;\n\n          if (node.type === 'penalty') {\n            end = glyphString.glyphIndexForStringIndex(prevNode.value.end);\n            line = glyphString.slice(start, end);\n            line.insertGlyph(line.length, HYPHEN);\n          } else {\n            end = glyphString.glyphIndexForStringIndex(node.value.end);\n            line = glyphString.slice(start, end);\n          }\n\n          start = end;\n          return [].concat(acc, [line]);\n        }, []);\n        var lastLine = glyphString.slice(start, glyphString.length);\n        lines.push(lastLine);\n        return lines;\n      };\n\n      KPLineBreaker.prototype.suggestLineBreak = function suggestLineBreak(glyphString, syllables, availableWidths, paragraphStyle) {\n        var nodes = this.getNodes(glyphString, syllables, paragraphStyle);\n        var tolerance = this.tolerance;\n        var breaks = linebreak(nodes, availableWidths, {\n          tolerance: tolerance\n        }); // Try again with a higher tolerance if the line breaking failed.\n\n        while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n          tolerance += TOLERANCE_STEPS;\n          breaks = linebreak(nodes, availableWidths, {\n            tolerance: tolerance\n          });\n        }\n\n        if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n          breaks = applyBestFit(nodes, availableWidths);\n        }\n\n        return this.breakLines(glyphString, nodes, breaks.slice(1));\n      };\n\n      return KPLineBreaker;\n    }();\n  };\n}; // justificationEngine values\n\n\nvar shrinkWhitespaceFactor = {\n  before: -0.5,\n  after: -0.5\n};\n\nvar LayoutEngine$1 = function (_BaseLayoutEngine) {\n  _inherits(LayoutEngine$$1, _BaseLayoutEngine);\n\n  function LayoutEngine$$1(_ref) {\n    var hyphenationCallback = _ref.hyphenationCallback,\n        hyphenationPenalty = _ref.hyphenationPenalty;\n\n    _classCallCheck(this, LayoutEngine$$1);\n\n    var engines = {\n      scriptItemizer: scriptItemizer(),\n      decorationEngine: textDecorationEngine(),\n      fontSubstitutionEngine: fontSubstitutionEngine(),\n      wordHyphenation: wordHyphenation({\n        hyphenationCallback: hyphenationCallback\n      }),\n      lineBreaker: lineBreaker({\n        penalty: hyphenationPenalty\n      }),\n      justificationEngine: justificationEngine({\n        shrinkWhitespaceFactor: shrinkWhitespaceFactor\n      })\n    };\n    return _possibleConstructorReturn(this, _BaseLayoutEngine.call(this, engines));\n  }\n\n  return LayoutEngine$$1;\n}(LayoutEngine);\n\nPNG.isValid = function (data) {\n  try {\n    return !!new PNG(data);\n  } catch (e) {\n    return false;\n  }\n}; // Extracted from https://github.com/devongovett/pdfkit/blob/master/lib/image/jpeg.coffee\n\n\nvar MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];\n\nvar JPEG = function JPEG(data) {\n  _classCallCheck(this, JPEG);\n\n  this.data = null;\n  this.width = null;\n  this.height = null;\n  this.data = data;\n\n  if (data.readUInt16BE(0) !== 0xffd8) {\n    throw new Error('SOI not found in JPEG');\n  }\n\n  var marker = void 0;\n  var pos = 2;\n\n  while (pos < data.length) {\n    marker = data.readUInt16BE(pos);\n    pos += 2;\n\n    if (MARKERS.includes(marker)) {\n      break;\n    }\n\n    pos += data.readUInt16BE(pos);\n  }\n\n  if (!MARKERS.includes(marker)) {\n    throw new Error('Invalid JPEG.');\n  }\n\n  pos += 3;\n  this.height = data.readUInt16BE(pos);\n  pos += 2;\n  this.width = data.readUInt16BE(pos);\n};\n\nJPEG.isValid = function (data) {\n  if (!data || !Buffer.isBuffer(data) || data.readUInt16BE(0) !== 0xffd8) {\n    return false;\n  }\n\n  var marker = void 0;\n  var pos = 2;\n\n  while (pos < data.length) {\n    marker = data.readUInt16BE(pos);\n    pos += 2;\n\n    if (MARKERS.includes(marker)) {\n      break;\n    }\n\n    pos += data.readUInt16BE(pos);\n  }\n\n  if (!MARKERS.includes(marker)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar createCache = function createCache() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$limit = _ref.limit,\n      limit = _ref$limit === undefined ? 100 : _ref$limit;\n\n  var cache = {};\n  var keys = [];\n  return {\n    get: function get(key) {\n      return cache[key];\n    },\n    set: function set(key, value) {\n      keys.push(key);\n\n      if (keys.length > limit) {\n        delete cache[keys.shift()];\n      }\n\n      cache[key] = value;\n    },\n    length: function length() {\n      return keys.length;\n    }\n  };\n};\n\nvar imagesCache = createCache({\n  limit: 30\n});\n\nvar isValidFormat = function isValidFormat(format) {\n  var lower = format.toLowerCase();\n  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';\n};\n\nvar guessFormat = function guessFormat(buffer) {\n  var format = void 0;\n\n  if (JPEG.isValid(buffer)) {\n    format = 'jpg';\n  } else if (PNG.isValid(buffer)) {\n    format = 'png';\n  }\n\n  return format;\n};\n\nvar isCompatibleBase64 = function isCompatibleBase64(src) {\n  return /data:image\\/[a-zA-Z]*;base64,[^\"]*/g.test(src);\n};\n\nfunction getImage(body, extension) {\n  switch (extension.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n      return new JPEG(body);\n\n    case 'png':\n      return new PNG(body);\n\n    default:\n      return null;\n  }\n}\n\nvar resolveBase64Image = function resolveBase64Image(src) {\n  var match = /data:image\\/([a-zA-Z]*);base64,([^\"]*)/g.exec(src);\n  var format = match[1];\n  var data = match[2];\n\n  if (!isValidFormat(format)) {\n    throw new Error('Base64 image invalid format: ' + format);\n  }\n\n  return new _Promise(function (resolve) {\n    return resolve(getImage(Buffer.from(data, 'base64'), format));\n  });\n};\n\nvar resolveLocalImage = function resolveLocalImage(src) {\n  if (src.data && src.format) {\n    return new _Promise(function (resolve) {\n      return resolve(getImage(src.data, src.format));\n    });\n  }\n\n  throw new Error('Invalid data given for local file: ' + _JSON$stringify(src));\n};\n\nvar resolveBufferImage = function resolveBufferImage(buffer) {\n  var format = guessFormat(buffer);\n\n  if (format) {\n    return new _Promise(function (resolve) {\n      return resolve(getImage(buffer, format));\n    });\n  }\n};\n\nvar resolveRemoteImage = function resolveRemoteImage(src) {\n  return fetch(src).then(function (response) {\n    if (response.buffer) {\n      return response.buffer();\n    }\n\n    return response.arrayBuffer();\n  }).then(function (buffer) {\n    if (buffer.constructor.name === 'Buffer') {\n      return buffer;\n    }\n\n    return Buffer.from(buffer);\n  }).then(function (body) {\n    var isPng = body[0] === 137 && body[1] === 80 && body[2] === 78 && body[3] === 71 && body[4] === 13 && body[5] === 10 && body[6] === 26 && body[7] === 10;\n    var isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;\n    var extension = '';\n\n    if (isPng) {\n      extension = 'png';\n    } else if (isJpg) {\n      extension = 'jpg';\n    } else {\n      throw new Error('Not valid image extension');\n    }\n\n    return getImage(body, extension);\n  });\n};\n\nvar resolveImage = function resolveImage(src) {\n  var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var cacheKey = src.data ? src.data.toString() : src;\n\n  if (cache && imagesCache.get(cacheKey)) {\n    return imagesCache.get(cacheKey);\n  }\n\n  var image = void 0;\n\n  if (isCompatibleBase64(src)) {\n    image = resolveBase64Image(src);\n  } else if (Buffer.isBuffer(src)) {\n    image = resolveBufferImage(src);\n  } else if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n    image = resolveLocalImage(src);\n  } else {\n    image = resolveRemoteImage(src);\n  }\n\n  if (cache) {\n    imagesCache.set(cacheKey, image);\n  }\n\n  return image;\n};\n/* eslint-disable no-cond-assign */\n// Caches emoji images data\n\n\nvar emojis = {};\nvar regex = emojiRegex();\n\nvar reflect = function reflect(promise) {\n  return function () {\n    return promise.apply(undefined, arguments).then(function (v) {\n      return v;\n    }, function (e) {\n      return e;\n    });\n  };\n};\n\nvar fetchEmojiImage = reflect(resolveImage);\n\nvar getCodePoints = function getCodePoints(string) {\n  return _Array$from(string).map(function (char) {\n    return char.codePointAt(0).toString(16);\n  }).join('-');\n};\n\nvar buildEmojiUrl = function buildEmojiUrl(emoji) {\n  var _Font$getEmojiSource = Font.getEmojiSource(),\n      url = _Font$getEmojiSource.url,\n      format = _Font$getEmojiSource.format;\n\n  return '' + url + getCodePoints(emoji) + '.' + format;\n};\n\nvar fetchEmojis = function fetchEmojis(string) {\n  var emojiSource = Font.getEmojiSource();\n  if (!emojiSource || !emojiSource.url) return [];\n  var promises = [];\n  var match = void 0;\n\n  var _loop = function _loop() {\n    var emoji = match[0];\n\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      var emojiUrl = buildEmojiUrl(emoji);\n      emojis[emoji] = {\n        loading: true\n      };\n      promises.push(fetchEmojiImage(emojiUrl).then(function (image) {\n        emojis[emoji].loading = false;\n        emojis[emoji].data = image.data;\n      }));\n    }\n  };\n\n  while (match = regex.exec(string)) {\n    _loop();\n  }\n\n  return promises;\n};\n\nvar embedEmojis = function embedEmojis(fragments) {\n  var result = [];\n\n  for (var i = 0; i < fragments.length; i++) {\n    var fragment = fragments[i];\n    var match = void 0;\n    var lastIndex = 0;\n\n    while (match = regex.exec(fragment.string)) {\n      var index = match.index;\n      var _emoji = match[0];\n      var emojiSize = fragment.attributes.fontSize;\n      var chunk = fragment.string.slice(lastIndex, index + match[0].length); // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n\n      if (emojis[_emoji] && emojis[_emoji].data) {\n        result.push({\n          string: chunk.replace(match, Attachment.CHARACTER),\n          attributes: _extends({}, fragment.attributes, {\n            attachment: new Attachment(emojiSize, emojiSize, {\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[_emoji].data\n            })\n          })\n        });\n      } else {\n        // If no emoji data, we just replace the emoji with a nodef char\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0)),\n          attributes: fragment.attributes\n        });\n      }\n\n      lastIndex = index + _emoji.length;\n    }\n\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes\n      });\n    }\n  }\n\n  return result;\n};\n\nvar Document$2 = function () {\n  function Document(root, props) {\n    _classCallCheck(this, Document);\n\n    this.root = root;\n    this.props = props;\n    this.children = [];\n    this.subpages = [];\n  }\n\n  Document.prototype.appendChild = function appendChild(child) {\n    child.parent = this;\n    this.children.push(child);\n  };\n\n  Document.prototype.removeChild = function removeChild(child) {\n    var i = this.children.indexOf(child);\n    child.parent = null;\n    this.children.slice(i, 1);\n  };\n\n  Document.prototype.addMetaData = function addMetaData() {\n    var _props = this.props,\n        title = _props.title,\n        author = _props.author,\n        subject = _props.subject,\n        keywords = _props.keywords,\n        creator = _props.creator,\n        producer = _props.producer; // The object keys need to start with a capital letter by the PDF spec\n\n    if (title) this.root.instance.info.Title = title;\n    if (author) this.root.instance.info.Author = author;\n    if (subject) this.root.instance.info.Subject = subject;\n    if (keywords) this.root.instance.info.Keywords = keywords;\n    this.root.instance.info.Creator = creator || 'react-pdf';\n    this.root.instance.info.Producer = producer || 'react-pdf';\n  };\n\n  Document.prototype.loadFonts = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var promises, listToExplore, node;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              promises = [];\n              listToExplore = this.children.slice(0);\n\n              while (listToExplore.length > 0) {\n                node = listToExplore.shift();\n\n                if (node.style && node.style.fontFamily) {\n                  promises.push(Font.load(node.style.fontFamily, this.root.instance));\n                }\n\n                if (node.children) {\n                  node.children.forEach(function (childNode) {\n                    listToExplore.push(childNode);\n                  });\n                }\n              }\n\n              _context.next = 5;\n              return _Promise.all(promises);\n\n            case 5:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function loadFonts() {\n      return _ref.apply(this, arguments);\n    }\n\n    return loadFonts;\n  }();\n\n  Document.prototype.loadEmojis = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var promises, listToExplore, node;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              promises = [];\n              listToExplore = this.children.slice(0);\n\n              while (listToExplore.length > 0) {\n                node = listToExplore.shift();\n\n                if (typeof node === 'string') {\n                  promises.push.apply(promises, fetchEmojis(node));\n                } else if (typeof node.value === 'string') {\n                  promises.push.apply(promises, fetchEmojis(node.value));\n                } else if (node.children) {\n                  node.children.forEach(function (childNode) {\n                    listToExplore.push(childNode);\n                  });\n                }\n              }\n\n              _context2.next = 5;\n              return _Promise.all(promises);\n\n            case 5:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function loadEmojis() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return loadEmojis;\n  }();\n\n  Document.prototype.loadImages = function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var promises, listToExplore, node;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              promises = [];\n              listToExplore = this.children.slice(0);\n\n              while (listToExplore.length > 0) {\n                node = listToExplore.shift();\n\n                if (node.name === 'Image') {\n                  promises.push(node.fetch());\n                }\n\n                if (node.children) {\n                  node.children.forEach(function (childNode) {\n                    listToExplore.push(childNode);\n                  });\n                }\n              }\n\n              _context3.next = 5;\n              return _Promise.all(promises);\n\n            case 5:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function loadImages() {\n      return _ref3.apply(this, arguments);\n    }\n\n    return loadImages;\n  }();\n\n  Document.prototype.loadAssets = function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _Promise.all([this.loadFonts(), this.loadImages()]);\n\n            case 2:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function loadAssets() {\n      return _ref4.apply(this, arguments);\n    }\n\n    return loadAssets;\n  }();\n\n  Document.prototype.applyProps = function applyProps() {\n    this.children.forEach(function (child) {\n      return child.applyProps();\n    });\n  };\n\n  Document.prototype.update = function update(newProps) {\n    this.props = newProps;\n  };\n\n  Document.prototype.getLayoutData = function getLayoutData() {\n    return {\n      type: this.name,\n      children: this.subpages.map(function (c) {\n        return c.getLayoutData();\n      })\n    };\n  };\n\n  Document.prototype.wrapPages = function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var pageCount, pages, _iterator, _isArray, _i, _ref6, page, wrapArea, subpages;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              pageCount = 1;\n              pages = [];\n              _iterator = this.children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);\n\n            case 3:\n              if (!_isArray) {\n                _context5.next = 9;\n                break;\n              }\n\n              if (!(_i >= _iterator.length)) {\n                _context5.next = 6;\n                break;\n              }\n\n              return _context5.abrupt('break', 27);\n\n            case 6:\n              _ref6 = _iterator[_i++];\n              _context5.next = 13;\n              break;\n\n            case 9:\n              _i = _iterator.next();\n\n              if (!_i.done) {\n                _context5.next = 12;\n                break;\n              }\n\n              return _context5.abrupt('break', 27);\n\n            case 12:\n              _ref6 = _i.value;\n\n            case 13:\n              page = _ref6;\n              wrapArea = page.size.height - (page.style.paddingBottom || 0);\n\n              if (!page.wrap) {\n                _context5.next = 23;\n                break;\n              }\n\n              _context5.next = 18;\n              return _wrapPages(page, wrapArea, pageCount);\n\n            case 18:\n              subpages = _context5.sent;\n              pageCount += subpages.length;\n              pages.push.apply(pages, subpages);\n              _context5.next = 25;\n              break;\n\n            case 23:\n              page.height = page.size.height;\n              pages.push(page);\n\n            case 25:\n              _context5.next = 3;\n              break;\n\n            case 27:\n              return _context5.abrupt('return', pages);\n\n            case 28:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function wrapPages() {\n      return _ref5.apply(this, arguments);\n    }\n\n    return wrapPages;\n  }();\n\n  Document.prototype.renderPages = function () {\n    var _ref7 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var j;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.wrapPages();\n\n            case 2:\n              this.subpages = _context6.sent;\n              j = 0;\n\n            case 4:\n              if (!(j < this.subpages.length)) {\n                _context6.next = 11;\n                break;\n              } // Update dynamic text nodes with total pages info\n\n\n              this.subpages[j].renderDynamicNodes({\n                pageNumber: j + 1,\n                totalPages: this.subpages.length\n              }, function (node) {\n                return node.name === 'Text';\n              });\n              _context6.next = 8;\n              return this.subpages[j].render();\n\n            case 8:\n              j++;\n              _context6.next = 4;\n              break;\n\n            case 11:\n              return _context6.abrupt('return', this.subpages);\n\n            case 12:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function renderPages() {\n      return _ref7.apply(this, arguments);\n    }\n\n    return renderPages;\n  }();\n\n  Document.prototype.render = function () {\n    var _ref8 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              this.addMetaData();\n              this.applyProps();\n              _context7.next = 5;\n              return this.loadEmojis();\n\n            case 5:\n              _context7.next = 7;\n              return this.loadAssets();\n\n            case 7:\n              _context7.next = 9;\n              return this.renderPages();\n\n            case 9:\n              this.root.instance.end();\n              Font.reset();\n              _context7.next = 16;\n              break;\n\n            case 13:\n              _context7.prev = 13;\n              _context7.t0 = _context7['catch'](0);\n              throw _context7.t0;\n\n            case 16:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this, [[0, 13]]);\n    }));\n\n    function render() {\n      return _ref8.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Document, [{\n    key: 'name',\n    get: function get() {\n      return 'Document';\n    }\n  }]);\n\n  return Document;\n}();\n\nDocument$2.defaultProps = {\n  author: null,\n  keywords: null,\n  subject: null,\n  title: null\n};\n\nvar upperFirst = function upperFirst(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n\nvar matchPercent = function matchPercent(value) {\n  return /(-?\\d+\\.?\\d*)%/g.exec(value);\n};\n\nvar Node$1 = function () {\n  function Node() {\n    _classCallCheck(this, Node);\n\n    this.parent = null;\n    this.children = [];\n    this.computed = false;\n    this.layout = Yoga.Node.createDefault();\n  }\n\n  Node.prototype.appendChild = function appendChild(child) {\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n      this.layout.insertChild(child.layout, this.layout.getChildCount());\n    }\n  };\n\n  Node.prototype.appendChildBefore = function appendChildBefore(child, beforeChild) {\n    var index = this.children.indexOf(beforeChild);\n\n    if (index !== -1 && child) {\n      child.parent = this;\n      this.children.splice(index, 0, child);\n      this.layout.insertChild(child.layout, index);\n    }\n  };\n\n  Node.prototype.removeChild = function removeChild(child) {\n    var index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n      this.layout.removeChild(child.layout);\n    }\n  };\n\n  Node.prototype.removeAllChilds = function removeAllChilds() {\n    var children = [].concat(this.children);\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].remove();\n    }\n  };\n\n  Node.prototype.remove = function remove() {\n    this.parent.removeChild(this);\n  };\n\n  Node.prototype.setDimension = function setDimension(attr, value) {\n    var fixedMethod = 'set' + upperFirst(attr);\n    var percentMethod = fixedMethod + 'Percent';\n    var isPercent = matchPercent(value);\n\n    if (isPercent) {\n      this.layout[percentMethod](parseFloat(isPercent[1], 10));\n    } else {\n      this.layout[fixedMethod](value);\n    }\n  };\n\n  Node.prototype.setPosition = function setPosition(edge, value) {\n    var isPercent = matchPercent(value);\n\n    if (isPercent) {\n      this.layout.setPositionPercent(edge, parseFloat(isPercent[1], 10));\n    } else {\n      this.layout.setPosition(edge, value);\n    }\n  };\n\n  Node.prototype.setPadding = function setPadding(edge, value) {\n    var isPercent = matchPercent(value);\n\n    if (isPercent) {\n      this.layout.setPaddingPercent(edge, parseFloat(isPercent[1], 10));\n    } else {\n      this.layout.setPadding(edge, value);\n    }\n  };\n\n  Node.prototype.setMargin = function setMargin(edge, value) {\n    var isPercent = matchPercent(value);\n\n    if (isPercent) {\n      this.layout.setMarginPercent(edge, parseFloat(isPercent[1], 10));\n    } else {\n      this.layout.setMargin(edge, value);\n    }\n  };\n\n  Node.prototype.setBorder = function setBorder(edge, value) {\n    if (matchPercent(value)) {\n      throw new Error('Node: You cannot set percentage border widths');\n    }\n\n    this.layout.setBorder(edge, value);\n  };\n\n  Node.prototype.getAbsoluteLayout = function getAbsoluteLayout() {\n    var parent = this.parent;\n    var parentLayout = parent && parent.getAbsoluteLayout ? parent.getAbsoluteLayout() : {\n      left: 0,\n      top: 0\n    };\n    return {\n      left: this.left + parentLayout.left,\n      top: this.top + parentLayout.top,\n      height: this.height,\n      width: this.width\n    };\n  };\n\n  Node.prototype.copyStyle = function copyStyle(node) {\n    this.layout.copyStyle(node.layout);\n  };\n\n  Node.prototype.calculateLayout = function calculateLayout() {\n    this.layout.calculateLayout();\n    this.computed = true;\n  };\n\n  Node.prototype.isEmpty = function isEmpty() {\n    return this.children.length === 0;\n  };\n\n  Node.prototype.markDirty = function markDirty() {\n    return this.layout.markDirty();\n  };\n\n  Node.prototype.onAppendDynamically = function onAppendDynamically() {};\n\n  _createClass(Node, [{\n    key: 'position',\n    get: function get() {\n      return this.layout.getPositionType() === Yoga.POSITION_TYPE_ABSOLUTE ? 'absolute' : 'relative';\n    },\n    set: function set(value) {\n      this.layout.setPositionType(value === 'absolute' ? Yoga.POSITION_TYPE_ABSOLUTE : Yoga.POSITION_TYPE_RELATIVE);\n    }\n  }, {\n    key: 'top',\n    get: function get() {\n      return this.layout.getComputedTop() || 0;\n    },\n    set: function set(value) {\n      this.setPosition(Yoga.EDGE_TOP, value);\n    }\n  }, {\n    key: 'left',\n    get: function get() {\n      return this.layout.getComputedLeft() || 0;\n    },\n    set: function set(value) {\n      this.setPosition(Yoga.EDGE_LEFT, value);\n    }\n  }, {\n    key: 'right',\n    get: function get() {\n      return this.layout.getComputedRight() || 0;\n    },\n    set: function set(value) {\n      this.setPosition(Yoga.EDGE_RIGHT, value);\n    }\n  }, {\n    key: 'bottom',\n    get: function get() {\n      return this.layout.getComputedBottom() || 0;\n    },\n    set: function set(value) {\n      this.setPosition(Yoga.EDGE_BOTTOM, value);\n    }\n  }, {\n    key: 'width',\n    get: function get() {\n      return this.layout.getComputedWidth();\n    },\n    set: function set(value) {\n      this.setDimension('width', value);\n    }\n  }, {\n    key: 'minWidth',\n    get: function get() {\n      return this.layout.getMinWidth().value;\n    },\n    set: function set(value) {\n      this.setDimension('minWidth', value);\n    }\n  }, {\n    key: 'maxWidth',\n    get: function get() {\n      return this.layout.getMaxWidth().value;\n    },\n    set: function set(value) {\n      this.setDimension('maxWidth', value);\n    }\n  }, {\n    key: 'height',\n    get: function get() {\n      return this.layout.getComputedHeight();\n    },\n    set: function set(value) {\n      this.setDimension('height', value);\n    }\n  }, {\n    key: 'minHeight',\n    get: function get() {\n      return this.layout.getMinHeight().value;\n    },\n    set: function set(value) {\n      this.setDimension('minHeight', value);\n    }\n  }, {\n    key: 'maxHeight',\n    get: function get() {\n      return this.layout.getMaxHeight().value;\n    },\n    set: function set(value) {\n      this.setDimension('maxHeight', value);\n    }\n  }, {\n    key: 'paddingTop',\n    get: function get() {\n      return this.layout.getComputedPadding(Yoga.EDGE_TOP) || 0;\n    },\n    set: function set(value) {\n      this.setPadding(Yoga.EDGE_TOP, value);\n    }\n  }, {\n    key: 'paddingRight',\n    get: function get() {\n      return this.layout.getComputedPadding(Yoga.EDGE_RIGHT) || 0;\n    },\n    set: function set(value) {\n      this.setPadding(Yoga.EDGE_RIGHT, value);\n    }\n  }, {\n    key: 'paddingBottom',\n    get: function get() {\n      return this.layout.getComputedPadding(Yoga.EDGE_BOTTOM) || 0;\n    },\n    set: function set(value) {\n      this.setPadding(Yoga.EDGE_BOTTOM, value);\n    }\n  }, {\n    key: 'paddingLeft',\n    get: function get() {\n      return this.layout.getComputedPadding(Yoga.EDGE_LEFT) || 0;\n    },\n    set: function set(value) {\n      this.setPadding(Yoga.EDGE_LEFT, value);\n    }\n  }, {\n    key: 'marginTop',\n    get: function get() {\n      return this.layout.getComputedMargin(Yoga.EDGE_TOP) || 0;\n    },\n    set: function set(value) {\n      this.setMargin(Yoga.EDGE_TOP, value);\n    }\n  }, {\n    key: 'marginRight',\n    get: function get() {\n      return this.layout.getComputedMargin(Yoga.EDGE_RIGHT) || 0;\n    },\n    set: function set(value) {\n      this.setMargin(Yoga.EDGE_RIGHT, value);\n    }\n  }, {\n    key: 'marginBottom',\n    get: function get() {\n      return this.layout.getComputedMargin(Yoga.EDGE_BOTTOM) || 0;\n    },\n    set: function set(value) {\n      this.setMargin(Yoga.EDGE_BOTTOM, value);\n    }\n  }, {\n    key: 'marginLeft',\n    get: function get() {\n      return this.layout.getComputedMargin(Yoga.EDGE_LEFT) || 0;\n    },\n    set: function set(value) {\n      this.setMargin(Yoga.EDGE_LEFT, value);\n    }\n  }, {\n    key: 'borderTopWidth',\n    get: function get() {\n      return this.layout.getComputedBorder(Yoga.EDGE_TOP) || 0;\n    },\n    set: function set(value) {\n      this.setBorder(Yoga.EDGE_TOP, value);\n    }\n  }, {\n    key: 'borderRightWidth',\n    get: function get() {\n      return this.layout.getComputedBorder(Yoga.EDGE_RIGHT) || 0;\n    },\n    set: function set(value) {\n      this.setBorder(Yoga.EDGE_RIGHT, value);\n    }\n  }, {\n    key: 'borderBottomWidth',\n    get: function get() {\n      return this.layout.getComputedBorder(Yoga.EDGE_BOTTOM) || 0;\n    },\n    set: function set(value) {\n      this.setBorder(Yoga.EDGE_BOTTOM, value);\n    }\n  }, {\n    key: 'borderLeftWidth',\n    get: function get() {\n      return this.layout.getComputedBorder(Yoga.EDGE_LEFT) || 0;\n    },\n    set: function set(value) {\n      this.setBorder(Yoga.EDGE_LEFT, value);\n    }\n  }, {\n    key: 'padding',\n    get: function get() {\n      return {\n        top: this.paddingTop,\n        right: this.paddingRight,\n        bottom: this.paddingBottom,\n        left: this.paddingLeft\n      };\n    },\n    set: function set(value) {\n      this.paddingTop = value;\n      this.paddingRight = value;\n      this.paddingBottom = value;\n      this.paddingLeft = value;\n    }\n  }, {\n    key: 'margin',\n    get: function get() {\n      return {\n        top: this.marginTop,\n        right: this.marginRight,\n        bottom: this.marginBottom,\n        left: this.marginLeft\n      };\n    },\n    set: function set(value) {\n      this.marginTop = value;\n      this.marginRight = value;\n      this.marginBottom = value;\n      this.marginLeft = value;\n    }\n  }]);\n\n  return Node;\n}();\n\nvar yogaValue = function yogaValue(prop, value) {\n  var isAlignType = function isAlignType(prop) {\n    return prop === 'alignItems' || prop === 'alignContent' || prop === 'alignSelf';\n  };\n\n  switch (value) {\n    case 'auto':\n      if (prop === 'alignSelf') {\n        return Yoga.ALIGN_AUTO;\n      }\n\n      break;\n\n    case 'flex':\n      return Yoga.DISPLAY_FLEX;\n\n    case 'none':\n      return Yoga.DISPLAY_NONE;\n\n    case 'row':\n      return Yoga.FLEX_DIRECTION_ROW;\n\n    case 'row-reverse':\n      return Yoga.FLEX_DIRECTION_ROW_REVERSE;\n\n    case 'column':\n      return Yoga.FLEX_DIRECTION_COLUMN;\n\n    case 'column-reverse':\n      return Yoga.FLEX_DIRECTION_COLUMN_REVERSE;\n\n    case 'stretch':\n      return Yoga.ALIGN_STRETCH;\n\n    case 'baseline':\n      return Yoga.ALIGN_BASELINE;\n\n    case 'space-around':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_SPACE_AROUND;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_SPACE_AROUND;\n      }\n\n      break;\n\n    case 'space-between':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_SPACE_BETWEEN;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_SPACE_BETWEEN;\n      }\n\n      break;\n\n    case 'around':\n      return Yoga.JUSTIFY_SPACE_AROUND;\n\n    case 'between':\n      return Yoga.JUSTIFY_SPACE_BETWEEN;\n\n    case 'wrap':\n      return Yoga.WRAP_WRAP;\n\n    case 'wrap-reverse':\n      return Yoga.WRAP_WRAP_REVERSE;\n\n    case 'nowrap':\n      return Yoga.WRAP_NO_WRAP;\n\n    case 'flex-start':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_FLEX_START;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_FLEX_START;\n      }\n\n      break;\n\n    case 'flex-end':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_FLEX_END;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_FLEX_END;\n      }\n\n      break;\n\n    case 'center':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_CENTER;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_CENTER;\n      }\n\n      break;\n\n    default:\n      return value;\n  }\n};\n\nvar parseValue = function parseValue(value) {\n  var match = /^(\\d*\\.?\\d+)(in|mm|cm|pt)?$/g.exec(value);\n\n  if (match) {\n    return {\n      value: parseFloat(match[1], 10),\n      unit: match[2] || 'pt'\n    };\n  } else {\n    return {\n      value: value,\n      unit: undefined\n    };\n  }\n};\n\nvar parseScalar = function parseScalar(value) {\n  var result = {};\n  var scalar = parseValue(value);\n\n  switch (scalar.unit) {\n    case 'in':\n      result = scalar.value * 72;\n      break;\n\n    case 'mm':\n      result = scalar.value * (1 / 25.4) * 72;\n      break;\n\n    case 'cm':\n      result = scalar.value * (1 / 2.54) * 72;\n      break;\n\n    default:\n      result = scalar.value;\n  }\n\n  return result;\n};\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar styleShortHands = {\n  margin: {\n    marginTop: true,\n    marginRight: true,\n    marginBottom: true,\n    marginLeft: true\n  },\n  marginHorizontal: {\n    marginLeft: true,\n    marginRight: true\n  },\n  marginVertical: {\n    marginTop: true,\n    marginBottom: true\n  },\n  padding: {\n    paddingTop: true,\n    paddingRight: true,\n    paddingBottom: true,\n    paddingLeft: true\n  },\n  paddingHorizontal: {\n    paddingLeft: true,\n    paddingRight: true\n  },\n  paddingVertical: {\n    paddingTop: true,\n    paddingBottom: true\n  },\n  border: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true\n  },\n  borderTop: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true\n  },\n  borderRight: {\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true\n  },\n  borderBottom: {\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true\n  },\n  borderLeft: {\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true\n  },\n  borderColor: {\n    borderTopColor: true,\n    borderRightColor: true,\n    borderBottomColor: true,\n    borderLeftColor: true\n  },\n  borderRadius: {\n    borderTopLeftRadius: true,\n    borderTopRightRadius: true,\n    borderBottomRightRadius: true,\n    borderBottomLeftRadius: true\n  },\n  borderStyle: {\n    borderTopStyle: true,\n    borderRightStyle: true,\n    borderBottomStyle: true,\n    borderLeftStyle: true\n  },\n  borderWidth: {\n    borderTopWidth: true,\n    borderRightWidth: true,\n    borderBottomWidth: true,\n    borderLeftWidth: true\n  }\n}; // Expand the shorthand properties to isolate every declaration from the others.\n\nvar expandStyles = function expandStyles(style) {\n  if (!style) return style;\n\n  var propsArray = _Object$keys(style);\n\n  var resolvedStyle = {};\n\n  for (var i = 0; i < propsArray.length; i++) {\n    var key = propsArray[i];\n    var value = style[key];\n\n    switch (key) {\n      case 'display':\n      case 'flex':\n      case 'flexDirection':\n      case 'flexWrap':\n      case 'flexFlow':\n      case 'flexGrow':\n      case 'flexShrink':\n      case 'flexBasis':\n      case 'justifyContent':\n      case 'alignSelf':\n      case 'alignItems':\n      case 'alignContent':\n      case 'order':\n        resolvedStyle[key] = yogaValue(key, value);\n        break;\n\n      case 'textAlignVertical':\n        resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n        break;\n\n      case 'margin':\n      case 'marginHorizontal':\n      case 'marginVertical':\n      case 'padding':\n      case 'paddingHorizontal':\n      case 'paddingVertical':\n      case 'border':\n      case 'borderTop':\n      case 'borderRight':\n      case 'borderBottom':\n      case 'borderLeft':\n      case 'borderColor':\n      case 'borderRadius':\n      case 'borderStyle':\n      case 'borderWidth':\n        {\n          var expandedProps = styleShortHands[key];\n\n          for (var propName in expandedProps) {\n            if (hasOwnProperty.call(expandedProps, propName)) {\n              resolvedStyle[propName] = value;\n            }\n          }\n        }\n        break;\n\n      default:\n        resolvedStyle[key] = value;\n        break;\n    }\n  }\n\n  return resolvedStyle;\n};\n\nvar matchBorderShorthand = function matchBorderShorthand(value) {\n  return value.match(/(\\d+(px|in|mm|cm|pt)?)\\s(\\S+)\\s(\\S+)/);\n}; // Transforms shorthand border values to correct value\n\n\nvar processBorders = function processBorders(key, value) {\n  var match = matchBorderShorthand(value);\n\n  if (match) {\n    if (key.match(/.Color/)) {\n      return match[4];\n    } else if (key.match(/.Style/)) {\n      return match[3];\n    } else if (key.match(/.Width/)) {\n      return match[1];\n    } else {\n      throw new Error('StyleSheet: Invalid \\'' + value + '\\' for \\'' + key + '\\'');\n    }\n  }\n\n  return value;\n};\n\nvar transformStyles = function transformStyles(style) {\n  var expandedStyles = expandStyles(style);\n\n  var propsArray = _Object$keys(expandedStyles);\n\n  var resolvedStyle = {};\n\n  for (var i = 0; i < propsArray.length; i++) {\n    var key = propsArray[i];\n    var value = expandedStyles[key];\n    var isBorderStyle = key.match(/border/) && typeof value === 'string';\n    var resolved = isBorderStyle ? processBorders(key, value) : value;\n    resolvedStyle[key] = parseScalar(resolved);\n  }\n\n  return resolvedStyle;\n};\n\nvar create = function create(styles) {\n  return styles;\n};\n\nvar flatten = function flatten(input) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  var result = input.reduce(function (acc, style) {\n    if (style) {\n      _Object$keys(style).forEach(function (key) {\n        if (style[key] !== null && style[key] !== undefined) {\n          acc[key] = style[key];\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return result;\n};\n\nvar resolveMediaQueries = function resolveMediaQueries(input, container) {\n  var result = _Object$keys(input).reduce(function (acc, key) {\n    var _extends2;\n\n    if (/@media/.test(key)) {\n      var _matchMedia;\n\n      return _extends({}, acc, matchMedia((_matchMedia = {}, _matchMedia[key] = input[key], _matchMedia), container));\n    }\n\n    return _extends({}, acc, (_extends2 = {}, _extends2[key] = input[key], _extends2));\n  }, {});\n\n  return result;\n};\n\nvar resolve = function resolve(styles, container) {\n  if (!styles) return null;\n  styles = flatten(styles);\n  styles = resolveMediaQueries(styles, container);\n  styles = transformStyles(styles);\n  return styles;\n};\n\nvar absoluteFillObject = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nvar StyleSheet = {\n  hairlineWidth: 1,\n  create: create,\n  resolve: resolve,\n  flatten: flatten,\n  absoluteFillObject: absoluteFillObject\n};\nvar Debug = {\n  debug: function debug() {\n    var layout = this.getAbsoluteLayout();\n    var padding = this.padding;\n    var margin = this.margin;\n    this.root.instance.save();\n    this.debugContent(layout, margin, padding);\n    this.debugPadding(layout, margin, padding);\n    this.debugMargin(layout, margin);\n    this.debugText(layout, margin);\n    this.root.instance.restore();\n  },\n  debugText: function debugText(layout, margin) {\n    var roundedWidth = Math.round(this.width + margin.left + margin.right);\n    var roundedHeight = Math.round(this.height + margin.top + margin.bottom);\n    this.root.instance.fontSize(4).opacity(1).fillColor('black').text(roundedWidth + ' x ' + roundedHeight, layout.left - margin.left, Math.max(layout.top - margin.top - 4, 1));\n  },\n  debugContent: function debugContent(layout, margin, padding) {\n    this.root.instance.fillColor('#a1c6e7').opacity(0.5).rect(layout.left + padding.left, layout.top + padding.top, layout.width - padding.left - padding.right, layout.height - padding.top - padding.bottom).fill();\n  },\n  debugPadding: function debugPadding(layout, margin, padding) {\n    this.root.instance.fillColor('#c4deb9').opacity(0.5); // Padding top\n\n    this.root.instance.rect(layout.left + padding.left, layout.top, layout.width - padding.right - padding.left, padding.top).fill(); // Padding left\n\n    this.root.instance.rect(layout.left, layout.top, padding.left, layout.height).fill(); // Padding right\n\n    this.root.instance.rect(layout.left + layout.width - padding.right, layout.top, padding.right, layout.height).fill(); // Padding bottom\n\n    this.root.instance.rect(layout.left + padding.left, layout.top + layout.height - padding.bottom, layout.width - padding.right - padding.left, padding.bottom).fill();\n  },\n  debugMargin: function debugMargin(layout, margin) {\n    this.root.instance.fillColor('#f8cca1').opacity(0.5); // Margin top\n\n    this.root.instance.rect(layout.left, layout.top - margin.top, layout.width, margin.top).fill(); // Margin left\n\n    this.root.instance.rect(layout.left - margin.left, layout.top - margin.top, margin.left, layout.height + margin.top + margin.bottom).fill(); // Margin right\n\n    this.root.instance.rect(layout.left + layout.width, layout.top - margin.top, margin.right, layout.height + margin.top + margin.bottom).fill(); // Margin bottom\n\n    this.root.instance.rect(layout.left, layout.top + layout.height, layout.width, margin.bottom).fill();\n  }\n}; // Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\n\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nfunction drawBorders() {\n  var instance = this.root.instance;\n  var layout = this.getAbsoluteLayout();\n  var borderTopWidth = this.borderTopWidth,\n      borderLeftWidth = this.borderLeftWidth,\n      borderRightWidth = this.borderRightWidth,\n      borderBottomWidth = this.borderBottomWidth;\n\n  var _getComputedStyles = this.getComputedStyles(),\n      _getComputedStyles$bo = _getComputedStyles.borderTopLeftRadius,\n      borderTopLeftRadius = _getComputedStyles$bo === undefined ? 0 : _getComputedStyles$bo,\n      _getComputedStyles$bo2 = _getComputedStyles.borderTopRightRadius,\n      borderTopRightRadius = _getComputedStyles$bo2 === undefined ? 0 : _getComputedStyles$bo2,\n      _getComputedStyles$bo3 = _getComputedStyles.borderBottomLeftRadius,\n      borderBottomLeftRadius = _getComputedStyles$bo3 === undefined ? 0 : _getComputedStyles$bo3,\n      _getComputedStyles$bo4 = _getComputedStyles.borderBottomRightRadius,\n      borderBottomRightRadius = _getComputedStyles$bo4 === undefined ? 0 : _getComputedStyles$bo4,\n      _getComputedStyles$bo5 = _getComputedStyles.borderTopColor,\n      borderTopColor = _getComputedStyles$bo5 === undefined ? 'black' : _getComputedStyles$bo5,\n      _getComputedStyles$bo6 = _getComputedStyles.borderTopStyle,\n      borderTopStyle = _getComputedStyles$bo6 === undefined ? 'solid' : _getComputedStyles$bo6,\n      _getComputedStyles$bo7 = _getComputedStyles.borderLeftColor,\n      borderLeftColor = _getComputedStyles$bo7 === undefined ? 'black' : _getComputedStyles$bo7,\n      _getComputedStyles$bo8 = _getComputedStyles.borderLeftStyle,\n      borderLeftStyle = _getComputedStyles$bo8 === undefined ? 'solid' : _getComputedStyles$bo8,\n      _getComputedStyles$bo9 = _getComputedStyles.borderRightColor,\n      borderRightColor = _getComputedStyles$bo9 === undefined ? 'black' : _getComputedStyles$bo9,\n      _getComputedStyles$bo10 = _getComputedStyles.borderRightStyle,\n      borderRightStyle = _getComputedStyles$bo10 === undefined ? 'solid' : _getComputedStyles$bo10,\n      _getComputedStyles$bo11 = _getComputedStyles.borderBottomColor,\n      borderBottomColor = _getComputedStyles$bo11 === undefined ? 'black' : _getComputedStyles$bo11,\n      _getComputedStyles$bo12 = _getComputedStyles.borderBottomStyle,\n      borderBottomStyle = _getComputedStyles$bo12 === undefined ? 'solid' : _getComputedStyles$bo12;\n\n  var style = {\n    borderTopColor: borderTopColor,\n    borderTopWidth: borderTopWidth,\n    borderTopStyle: borderTopStyle,\n    borderLeftColor: borderLeftColor,\n    borderLeftWidth: borderLeftWidth,\n    borderLeftStyle: borderLeftStyle,\n    borderRightColor: borderRightColor,\n    borderRightWidth: borderRightWidth,\n    borderRightStyle: borderRightStyle,\n    borderBottomColor: borderBottomColor,\n    borderBottomWidth: borderBottomWidth,\n    borderBottomStyle: borderBottomStyle,\n    borderTopLeftRadius: borderTopLeftRadius,\n    borderTopRightRadius: borderTopRightRadius,\n    borderBottomLeftRadius: borderBottomLeftRadius,\n    borderBottomRightRadius: borderBottomRightRadius\n  };\n  var width = layout.width,\n      height = layout.height;\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  instance.save();\n\n  if (borderTopWidth) {\n    instance.save();\n    clipBorderTop(instance, layout, style, rtr, rtl);\n    fillBorderTop(instance, layout, style, rtr, rtl);\n    instance.restore();\n  }\n\n  if (borderRightWidth) {\n    instance.save();\n    clipBorderRight(instance, layout, style, rtr, rbr);\n    fillBorderRight(instance, layout, style, rtr, rbr);\n    instance.restore();\n  }\n\n  if (borderBottomWidth) {\n    instance.save();\n    clipBorderBottom(instance, layout, style, rbl, rbr);\n    fillBorderBottom(instance, layout, style, rbl, rbr);\n    instance.restore();\n  }\n\n  if (borderLeftWidth) {\n    instance.save();\n    clipBorderLeft(instance, layout, style, rbl, rtl);\n    fillBorderLeft(instance, layout, style, rbl, rtl);\n    instance.restore();\n  }\n\n  instance.restore();\n}\n\nvar clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c0 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr); // Move down in case the margin exceedes the radius\n\n  var topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord); // Clip inner top right cap\n\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth); // Clip inner top border edge\n\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  var topLeftYCoord = top + Math.max(borderTopWidth, rtl); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n  ctx.lineTo(left, topLeftYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c5 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip(); // Clip border top cap joins\n\n  if (borderRightWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var _trSlope = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width;\n  var borderTopColor = style.borderTopColor,\n      borderTopWidth = style.borderTopWidth,\n      borderTopStyle = style.borderTopStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rtl * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, {\n      space: borderTopWidth * 1.2\n    });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, {\n      space: borderTopWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer right border edge\n\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer bottom right cap\n\n  var c0 = rbr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height); // Move left in case the margin exceedes the radius\n\n  var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height); // Clip inner bottom right cap\n\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth); // Ellipse coefficients inner bottom right cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth)); // Clip inner right border edge\n\n  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth)); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  var topRightXCoord = left + width - Math.max(rtr, borderRightWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n  ctx.lineTo(topRightXCoord, top); // Move right in case the margin exceedes the radius\n\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c5 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderTopWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderRightColor = style.borderRightColor,\n      borderRightStyle = style.borderRightStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbr * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, {\n      space: borderRightWidth * 1.2\n    });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, {\n      space: borderRightWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c0 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl); // Move up in case the margin exceedes the radius\n\n  var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord); // Clip inner bottom left cap\n\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord); // Ellipse coefficients inner top right cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA); // Clip inner bottom left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth); // Clip inner bottom border edge\n\n  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth); // Ellipse coefficients inner top left cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n  ctx.lineTo(left + width, bottomRightYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer top left cap\n\n  var c5 = rbr * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n  ctx.closePath();\n  ctx.clip(); // Clip border bottom cap joins\n\n  if (borderRightWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomColor = style.borderBottomColor,\n      borderBottomStyle = style.borderBottomStyle,\n      borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rbr * (1.0 - KAPPA);\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, {\n      space: borderBottomWidth * 1.2\n    });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, {\n      space: borderBottomWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderLeftWidth = style.borderLeftWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer left border edge\n\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c0 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top); // Move right in case the margin exceedes the radius\n\n  var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top); // Clip inner top left cap\n\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopLeftRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth)); // Clip inner left border edge\n\n  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth)); // Ellipse coefficients inner bottom left cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n  ctx.lineTo(bottomLeftXCoord, top + height); // Move left in case the margin exceedes the radius\n\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c5 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderBottomWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var _trSlope2 = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      height = layout.height;\n  var borderLeftColor = style.borderLeftColor,\n      borderLeftStyle = style.borderLeftStyle,\n      borderLeftWidth = style.borderLeftWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rtl * (1.0 - KAPPA);\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, {\n      space: borderLeftWidth * 1.2\n    });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, {\n      space: borderLeftWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar Borders = {\n  drawBorders: drawBorders\n}; // This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\n\nvar KAPPA$1 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar Clipping = {\n  clip: function clip() {\n    var _getAbsoluteLayout = this.getAbsoluteLayout(),\n        top = _getAbsoluteLayout.top,\n        left = _getAbsoluteLayout.left,\n        width = _getAbsoluteLayout.width,\n        height = _getAbsoluteLayout.height;\n\n    var _getComputedStyles = this.getComputedStyles(),\n        _getComputedStyles$bo = _getComputedStyles.borderTopLeftRadius,\n        borderTopLeftRadius = _getComputedStyles$bo === undefined ? 0 : _getComputedStyles$bo,\n        _getComputedStyles$bo2 = _getComputedStyles.borderTopRightRadius,\n        borderTopRightRadius = _getComputedStyles$bo2 === undefined ? 0 : _getComputedStyles$bo2,\n        _getComputedStyles$bo3 = _getComputedStyles.borderBottomRightRadius,\n        borderBottomRightRadius = _getComputedStyles$bo3 === undefined ? 0 : _getComputedStyles$bo3,\n        _getComputedStyles$bo4 = _getComputedStyles.borderBottomLeftRadius,\n        borderBottomLeftRadius = _getComputedStyles$bo4 === undefined ? 0 : _getComputedStyles$bo4; // Border top\n\n\n    var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n    var ctr = rtr * (1.0 - KAPPA$1);\n    this.root.instance.moveTo(left + rtr, top);\n    this.root.instance.lineTo(left + width - rtr, top);\n    this.root.instance.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr); // Border right\n\n    var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n    var cbr = rbr * (1.0 - KAPPA$1);\n    this.root.instance.lineTo(left + width, top + height - rbr);\n    this.root.instance.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height); // Border bottom\n\n    var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n    var cbl = rbl * (1.0 - KAPPA$1);\n    this.root.instance.lineTo(left + rbl, top + height);\n    this.root.instance.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl); // Border left\n\n    var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n    var ctl = rtl * (1.0 - KAPPA$1);\n    this.root.instance.lineTo(left, top + rtl);\n    this.root.instance.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n    this.root.instance.closePath();\n    this.root.instance.clip();\n  }\n};\n\nvar getRotation = function getRotation(transform) {\n  var match = /rotate\\((-?\\d+.?\\d+)(.+)\\)/g.exec(transform);\n\n  if (match && match[1] && match[2]) {\n    var value = match[1];\n    return match[2] === 'rad' ? value * 180 / Math.PI : value;\n  }\n\n  return 0;\n};\n\nvar getTranslateX = function getTranslateX(transform) {\n  var matchX = /translateX\\((-?\\d+\\.?d*)\\)/g.exec(transform);\n  var matchGeneric = /translate\\((-?\\d+\\.?d*).*,\\s*(-?\\d+\\.?d*).*\\)/g.exec(transform);\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n  return 0;\n};\n\nvar getTranslateY = function getTranslateY(transform) {\n  var matchY = /translateY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  var matchGeneric = /translate\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(transform);\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n  return 0;\n};\n\nvar getScaleX = function getScaleX(transform) {\n  var matchX = /scaleX\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  var matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(transform);\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n  return 1;\n};\n\nvar getScaleY = function getScaleY(transform) {\n  var matchY = /scaleY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  var matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(transform);\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n  return 1;\n};\n\nvar getMatrix = function getMatrix(transform) {\n  var match = /matrix\\(([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)\\)/g.exec(transform);\n  if (match) return match.slice(1, 7);\n  return null;\n};\n\nvar applySingleTransformation = function applySingleTransformation(element, transform) {\n  var _element$getAbsoluteL = element.getAbsoluteLayout(),\n      left = _element$getAbsoluteL.left,\n      top = _element$getAbsoluteL.top,\n      width = _element$getAbsoluteL.width,\n      height = _element$getAbsoluteL.height;\n\n  var origin = [left + width / 2, top + height / 2];\n\n  if (/rotate/g.test(transform)) {\n    element.root.instance.rotate(getRotation(transform), {\n      origin: origin\n    });\n  } else if (/scaleX/g.test(transform)) {\n    element.root.instance.scale(getScaleX(transform), 1, {\n      origin: origin\n    });\n  } else if (/scaleY/g.test(transform)) {\n    element.root.instance.scale(1, getScaleY(transform), {\n      origin: origin\n    });\n  } else if (/scale/g.test(transform)) {\n    element.root.instance.scale(getScaleX(transform), getScaleY(transform), {\n      origin: origin\n    });\n  } else if (/translateX/g.test(transform)) {\n    element.root.instance.translate(getTranslateX(transform), 1, {\n      origin: origin\n    });\n  } else if (/translateY/g.test(transform)) {\n    element.root.instance.translate(1, getTranslateY(transform), {\n      origin: origin\n    });\n  } else if (/translate/g.test(transform)) {\n    element.root.instance.translate(getTranslateX(transform), getTranslateY(transform), {\n      origin: origin\n    });\n  } else if (/matrix/g.test(transform)) {\n    var _element$root$instanc;\n\n    (_element$root$instanc = element.root.instance).transform.apply(_element$root$instanc, getMatrix(transform));\n  }\n};\n\nvar Transformations = {\n  applyTransformations: function applyTransformations() {\n    var match = void 0;\n    var re = /[a-zA-Z]+\\([^)]+\\)/g;\n    var transform = this.style && this.style.transform || '';\n\n    while ((match = re.exec(transform)) != null) {\n      applySingleTransformation(this, match[0]);\n    }\n  }\n};\n\nvar Base = function (_Node) {\n  _inherits(Base, _Node);\n\n  function Base(root, props) {\n    _classCallCheck(this, Base);\n\n    var _this = _possibleConstructorReturn(this, _Node.call(this));\n\n    _this.root = root;\n    _this.props = merge({}, _this.constructor.defaultProps, Base.defaultProps, props);\n    warning(!_this.props.styles, '\"styles\" prop passed instead of \"style\" prop');\n    return _this;\n  }\n\n  Base.prototype.appendChild = function appendChild(child) {\n    _Node.prototype.appendChild.call(this, child);\n\n    this.root.markDirty();\n  };\n\n  Base.prototype.appendChildBefore = function appendChildBefore(child, beforeChild) {\n    _Node.prototype.appendChildBefore.call(this, child, beforeChild);\n\n    this.root.markDirty();\n  };\n\n  Base.prototype.removeChild = function removeChild(child) {\n    _Node.prototype.removeChild.call(this, child);\n\n    this.root.markDirty();\n  };\n\n  Base.prototype.update = function update(newProps) {\n    this.props = merge({}, this.constructor.defaultProps, Base.defaultProps, newProps);\n    this.root.markDirty();\n  };\n\n  Base.prototype.applyProps = function applyProps() {\n    var _this2 = this;\n\n    var _page = this.page,\n        size = _page.size,\n        orientation = _page.orientation;\n    this.style = StyleSheet.resolve(this.props.style, {\n      width: size.width,\n      height: size.height,\n      orientation: orientation\n    });\n    toPairsIn(this.style).map(function (_ref) {\n      var attribute = _ref[0],\n          value = _ref[1];\n\n      _this2.applyStyle(attribute, value);\n    });\n    this.children.forEach(function (child) {\n      if (child.applyProps) {\n        child.applyProps();\n      }\n    });\n  };\n\n  Base.prototype.applyStyle = function applyStyle(attribute, value) {\n    var setter = 'set' + upperFirst(attribute);\n\n    switch (attribute) {\n      case 'marginTop':\n      case 'marginRight':\n      case 'marginBottom':\n      case 'marginLeft':\n      case 'paddingTop':\n      case 'paddingRight':\n      case 'paddingBottom':\n      case 'paddingLeft':\n      case 'borderTopWidth':\n      case 'borderRightWidth':\n      case 'borderBottomWidth':\n      case 'borderLeftWidth':\n      case 'position':\n      case 'top':\n      case 'right':\n      case 'bottom':\n      case 'left':\n      case 'width':\n      case 'height':\n      case 'minHeight':\n      case 'maxHeight':\n      case 'minWidth':\n      case 'maxWidth':\n        this[attribute] = value;\n        break;\n\n      default:\n        if (isFunction(this.layout[setter])) {\n          this.layout[setter](value);\n        }\n\n    }\n  };\n\n  Base.prototype.getComputedStyles = function getComputedStyles() {\n    var element = this.parent;\n    var inheritedStyles = {};\n\n    while (element && element.parent) {\n      inheritedStyles = _extends({}, element.parent.style, element.style, inheritedStyles);\n      element = element.parent;\n    }\n\n    return _extends({}, pick(inheritedStyles, inheritedProperties), this.style);\n  };\n\n  Base.prototype.getLayoutData = function getLayoutData() {\n    var layout = this.getAbsoluteLayout();\n    return {\n      type: this.name,\n      top: layout.top,\n      left: layout.left,\n      width: layout.width,\n      height: layout.height,\n      style: this.getComputedStyles(),\n      children: this.children.map(function (c) {\n        return c.getLayoutData();\n      })\n    };\n  };\n\n  Base.prototype.drawBackgroundColor = function drawBackgroundColor() {\n    var _getAbsoluteLayout = this.getAbsoluteLayout(),\n        left = _getAbsoluteLayout.left,\n        top = _getAbsoluteLayout.top,\n        width = _getAbsoluteLayout.width,\n        height = _getAbsoluteLayout.height;\n\n    var styles = this.getComputedStyles();\n\n    if (styles.backgroundColor) {\n      this.root.instance.save();\n      this.clip();\n      this.root.instance.fillColor(styles.backgroundColor).rect(left, top, width, height).fill().restore();\n    }\n  };\n\n  Base.prototype.clone = function clone() {\n    var clone = new this.constructor(this.root, this.props);\n    clone.copyStyle(this);\n    clone.style = this.style;\n    return clone;\n  };\n\n  Base.prototype.onNodeSplit = function onNodeSplit(height, clone) {\n    this.calculateLayout();\n    clone.marginTop = 0;\n    clone.paddingTop = 0; // If a height was given to the element, we need to substract the remaining wrapping height\n    // If not, we just let Yoga calculate the appropiate height when layout get's calculated.\n\n    if (clone.style.height) {\n      clone.height = this.height - height;\n    }\n\n    this.height = height;\n    this.marginBottom = 0;\n    this.paddingBottom = 0;\n  };\n\n  Base.prototype.renderChildren = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var absoluteChilds, nonAbsoluteChilds, i, _i;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              absoluteChilds = this.children.filter(function (child) {\n                return child.absolute;\n              });\n              nonAbsoluteChilds = this.children.filter(function (child) {\n                return !child.absolute;\n              });\n              i = 0;\n\n            case 3:\n              if (!(i < nonAbsoluteChilds.length)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return nonAbsoluteChilds[i].render();\n\n            case 6:\n              i++;\n              _context.next = 3;\n              break;\n\n            case 9:\n              _i = 0;\n\n            case 10:\n              if (!(_i < absoluteChilds.length)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 13;\n              return absoluteChilds[_i].render();\n\n            case 13:\n              _i++;\n              _context.next = 10;\n              break;\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function renderChildren() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return renderChildren;\n  }();\n\n  _createClass(Base, [{\n    key: 'page',\n    get: function get() {\n      return this.parent.page;\n    }\n  }, {\n    key: 'wrap',\n    get: function get() {\n      return this.props.wrap;\n    }\n  }, {\n    key: 'break',\n    get: function get() {\n      return this.props.break;\n    },\n    set: function set(value) {\n      this.props.break = value;\n    }\n  }, {\n    key: 'fixed',\n    get: function get() {\n      return this.props.fixed;\n    }\n  }, {\n    key: 'minPresenceAhead',\n    get: function get() {\n      return this.props.minPresenceAhead;\n    }\n  }, {\n    key: 'absolute',\n    get: function get() {\n      return this.props.style.position === 'absolute';\n    }\n  }]);\n\n  return Base;\n}(Node$1);\n\nBase.defaultProps = {\n  style: {\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    borderBottomLeftRadius: 0\n  },\n  minPresenceAhead: 0\n};\n\n_Object$assign(Base.prototype, Debug);\n\n_Object$assign(Base.prototype, Borders);\n\n_Object$assign(Base.prototype, Clipping);\n\n_Object$assign(Base.prototype, Transformations);\n\nvar TextInstance = function () {\n  function TextInstance(root, value) {\n    _classCallCheck(this, TextInstance);\n\n    this.root = root;\n    this.value = value;\n    this.parent = null;\n    this.props = {};\n  }\n\n  TextInstance.prototype.getLayoutData = function getLayoutData() {\n    return this.value;\n  };\n\n  TextInstance.prototype.remove = function remove() {\n    this.parent.removeChild(this);\n  };\n\n  TextInstance.prototype.clone = function clone() {\n    return new this.constructor(this.root, this.value);\n  };\n\n  TextInstance.prototype.update = function update(value) {\n    this.value = value;\n    this.parent.computed = false;\n    this.parent._container = null;\n    this.root.markDirty();\n  };\n\n  _createClass(TextInstance, [{\n    key: 'name',\n    get: function get() {\n      return 'TextInstance';\n    }\n  }]);\n\n  return TextInstance;\n}();\n\nvar PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0]\n}; // Return page size in an object { width, height } given the passed size and orientation\n// Accepts page type, arraoy or object as parameter\n\nvar getPageSize = function getPageSize(size) {\n  var orientation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'portrait';\n  var result = void 0;\n\n  if (typeof size === 'string') {\n    result = PAGE_SIZES[size.toUpperCase()];\n  } else if (Array.isArray(size)) {\n    result = size;\n  } else if ((typeof size === 'undefined' ? 'undefined' : _typeof(size)) === 'object' && size.width && size.height) {\n    result = [size.width, size.height];\n  } else {\n    throw new Error('Invalid Page size: ' + size);\n  }\n\n  return orientation === 'portrait' ? {\n    width: result[0],\n    height: result[1]\n  } : {\n    width: result[1],\n    height: result[0]\n  };\n};\n\nvar RULER_WIDTH = 13;\nvar RULER_COLOR = 'white';\nvar RULER_FONT_SIZE = 5;\nvar DEFAULT_RULER_STEPS = 50;\nvar LINE_WIDTH = 0.5;\nvar LINE_COLOR = 'gray';\nvar GRID_COLOR = '#ababab';\n\nvar range = function range(max, steps) {\n  return _Array$from({\n    length: Math.ceil(max / steps)\n  }, function (_, i) {\n    return i * steps;\n  });\n};\n\nvar matchPercentage = function matchPercentage(value) {\n  var match = value.match(/(\\d+\\.?\\d*)%/);\n\n  if (match) {\n    return 100 / parseFloat(match[1], 10);\n  }\n\n  return null;\n};\n\nvar Ruler = {\n  getRulerWidth: function getRulerWidth() {\n    return RULER_WIDTH;\n  },\n  hasHorizontalRuler: function hasHorizontalRuler() {\n    return this.props.ruler || this.props.horizontalRuler;\n  },\n  hasVerticalRuler: function hasVerticalRuler() {\n    return this.props.ruler || this.props.verticalRuler;\n  },\n  getHorizontalSteps: function getHorizontalSteps() {\n    var value = this.props.horizontalRulerSteps || this.props.rulerSteps || DEFAULT_RULER_STEPS;\n\n    if (typeof value === 'string') {\n      var percentage = matchPercentage(value);\n\n      if (percentage) {\n        var width = this.width - (this.hasVerticalRuler() ? RULER_WIDTH : 0);\n        return width / percentage;\n      }\n\n      throw new Error('Page: Invalid horizontal steps value');\n    }\n\n    return value;\n  },\n  getVerticalSteps: function getVerticalSteps() {\n    var value = this.props.verticalRulerSteps || this.props.rulerSteps || DEFAULT_RULER_STEPS;\n\n    if (typeof value === 'string') {\n      var percentage = matchPercentage(value);\n\n      if (percentage) {\n        var height = this.height - (this.hasHorizontalRuler() ? RULER_WIDTH : 0);\n        return height / percentage;\n      }\n\n      throw new Error('Page: Invalid horizontal steps value');\n    }\n\n    return value;\n  },\n  renderRuler: function renderRuler() {\n    var hasHorizontalRuler = this.hasHorizontalRuler();\n    var hasVerticalRuler = this.hasVerticalRuler();\n\n    if (hasHorizontalRuler || hasVerticalRuler) {\n      this.root.instance.save().lineWidth(LINE_WIDTH).fontSize(RULER_FONT_SIZE).opacity(1);\n      if (hasHorizontalRuler) this.drawHorizontalRuler();\n      if (hasVerticalRuler) this.drawVerticalRuler();\n\n      if (hasHorizontalRuler && hasVerticalRuler) {\n        this.root.instance.rect(0, 0, RULER_WIDTH - LINE_WIDTH, RULER_WIDTH - LINE_WIDTH).fill(RULER_COLOR);\n      }\n\n      this.root.instance.restore();\n    }\n  },\n  drawHorizontalRuler: function drawHorizontalRuler() {\n    var _this = this;\n\n    var offset = this.hasVerticalRuler() ? RULER_WIDTH : 0;\n    this.root.instance.rect(offset, 0, this.width, RULER_WIDTH).fill(RULER_COLOR).moveTo(this.hasVerticalRuler() ? RULER_WIDTH : 0, RULER_WIDTH).lineTo(this.width, RULER_WIDTH).stroke(LINE_COLOR);\n    var hRange = range(this.width, this.getHorizontalSteps());\n    hRange.map(function (step) {\n      _this.root.instance.moveTo(offset + step, 0).lineTo(offset + step, RULER_WIDTH).stroke(LINE_COLOR).fillColor('black').text('' + Math.round(step), offset + step + 1, 1);\n    });\n    hRange.map(function (step) {\n      if (step !== 0) {\n        _this.root.instance.moveTo(offset + step, RULER_WIDTH).lineTo(offset + step, _this.height).stroke(GRID_COLOR);\n      }\n    });\n  },\n  drawVerticalRuler: function drawVerticalRuler() {\n    var _this2 = this;\n\n    var offset = this.hasHorizontalRuler() ? RULER_WIDTH : 0;\n    this.root.instance.rect(0, offset, RULER_WIDTH, this.height).fill(RULER_COLOR).moveTo(RULER_WIDTH, this.hasHorizontalRuler() ? RULER_WIDTH : 0).lineTo(RULER_WIDTH, this.height).stroke(LINE_COLOR);\n    var vRange = range(this.height, this.getVerticalSteps());\n    vRange.map(function (step) {\n      _this2.root.instance.moveTo(0, offset + step).lineTo(RULER_WIDTH, offset + step).stroke(LINE_COLOR).fillColor('black').text('' + Math.round(step), 1, offset + step + 1);\n    });\n    vRange.map(function (step) {\n      if (step !== 0) {\n        _this2.root.instance.moveTo(RULER_WIDTH, offset + step).lineTo(_this2.width, offset + step).stroke(GRID_COLOR);\n      }\n    });\n  }\n};\n\nvar Page$1 = function (_Base) {\n  _inherits(Page, _Base);\n\n  function Page(root, props) {\n    _classCallCheck(this, Page);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, root, props));\n\n    _this._size = null;\n    return _this;\n  }\n\n  Page.prototype.resetMargins = function resetMargins() {\n    if (!!this.marginTop || !!this.marginBottom || !!this.marginLeft || !!this.marginRight) {\n      warning(false, 'Margin values are not allowed on Page element. Use padding instead.');\n      this.marginTop = 0;\n      this.marginBottom = 0;\n      this.marginLeft = 0;\n      this.marginRight = 0;\n    }\n  };\n\n  Page.prototype.applyProps = function applyProps() {\n    _Base.prototype.applyProps.call(this);\n\n    this.top = 0;\n    this.left = 0;\n    this.width = this.size.width;\n    this.resetMargins(); // Add some padding if ruler present, so we can see the whole page inside it\n\n    var rulerWidth = this.getRulerWidth();\n\n    if (this.hasHorizontalRuler()) {\n      this.paddingTop = this.paddingTop + rulerWidth;\n    }\n\n    if (this.hasVerticalRuler()) {\n      this.paddingLeft = this.paddingLeft + rulerWidth;\n    }\n  };\n\n  Page.prototype.setPadding = function setPadding(edge, value) {\n    var isPercent = matchPercent(value);\n    var dimension = edge === Yoga.EDGE_TOP || edge === Yoga.EDGE_BOTTOM ? this.size.height : this.size.width;\n\n    if (isPercent) {\n      var percent = parseFloat(isPercent[1], 10) / 100;\n      this.layout.setPadding(edge, dimension * percent);\n    } else {\n      this.layout.setPadding(edge, value);\n    }\n  };\n\n  Page.prototype.addDynamicChild = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(parent, elements) {\n      var children, i, child, type, props, instance, _instance;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (elements) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 2:\n              children = Array.isArray(elements) ? elements : [elements];\n              i = 0;\n\n            case 4:\n              if (!(i < children.length)) {\n                _context.next = 27;\n                break;\n              }\n\n              child = children[i];\n              type = child.type, props = child.props;\n\n              if (!(typeof child === 'string')) {\n                _context.next = 12;\n                break;\n              }\n\n              instance = new TextInstance(this.root, child);\n              parent.appendChild(instance);\n              _context.next = 24;\n              break;\n\n            case 12:\n              if (!(type !== Fragment)) {\n                _context.next = 22;\n                break;\n              }\n\n              _instance = createInstance(child, this.root);\n              _context.next = 16;\n              return _instance.onAppendDynamically();\n\n            case 16:\n              parent.appendChild(_instance);\n\n              _instance.applyProps();\n\n              _context.next = 20;\n              return this.addDynamicChild(_instance, props.children);\n\n            case 20:\n              _context.next = 24;\n              break;\n\n            case 22:\n              _context.next = 24;\n              return this.addDynamicChild(parent, props.children);\n\n            case 24:\n              i++;\n              _context.next = 4;\n              break;\n\n            case 27:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function addDynamicChild(_x, _x2) {\n      return _ref.apply(this, arguments);\n    }\n\n    return addDynamicChild;\n  }();\n\n  Page.prototype.renderDynamicNodes = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(props, cb) {\n      var listToExplore, node, condition, elements;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              listToExplore = this.children.slice(0);\n\n            case 1:\n              if (!(listToExplore.length > 0)) {\n                _context2.next = 14;\n                break;\n              }\n\n              node = listToExplore.shift();\n              condition = cb ? cb(node) : true;\n\n              if (!(condition && node.props.render)) {\n                _context2.next = 11;\n                break;\n              }\n\n              node.removeAllChilds();\n              elements = node.props.render(props);\n              _context2.next = 9;\n              return this.addDynamicChild(node, elements);\n\n            case 9:\n              if (!node.fixed) node.props.render = null;\n              return _context2.abrupt('continue', 1);\n\n            case 11:\n              if (node.children) {\n                listToExplore.push.apply(listToExplore, node.children);\n              }\n\n              _context2.next = 1;\n              break;\n\n            case 14:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function renderDynamicNodes(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return renderDynamicNodes;\n  }();\n\n  Page.prototype.nodeWillWrap = function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(props) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.renderDynamicNodes(props);\n\n            case 2:\n              this.calculateLayout();\n\n            case 3:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function nodeWillWrap(_x5) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return nodeWillWrap;\n  }();\n\n  Page.prototype.onNodeSplit = function onNodeSplit(height, clone) {\n    clone.marginTop = 0;\n    this.marginBottom = 0;\n    this.calculateLayout();\n  };\n\n  Page.prototype.clone = function clone() {\n    var clone = _Base.prototype.clone.call(this);\n\n    clone._size = this.size;\n    return clone;\n  };\n\n  Page.prototype.render = function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var instance;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              instance = this.root.instance;\n              this.height = this.size.height;\n              this.calculateLayout();\n              instance.addPage({\n                size: [this.size.width, this.size.height],\n                margin: 0\n              });\n\n              if (this.style.backgroundColor) {\n                instance.fillColor(this.style.backgroundColor).rect(0, 0, this.size.width, this.size.height).fill();\n              }\n\n              _context4.next = 7;\n              return this.renderChildren();\n\n            case 7:\n              if (this.props.debug) this.debug();\n              this.renderRuler();\n\n            case 9:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function render() {\n      return _ref4.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Page, [{\n    key: 'name',\n    get: function get() {\n      return 'Page';\n    }\n  }, {\n    key: 'document',\n    get: function get() {\n      return this.parent;\n    }\n  }, {\n    key: 'page',\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: 'orientation',\n    get: function get() {\n      return this.props.orientation;\n    }\n  }, {\n    key: 'size',\n    get: function get() {\n      if (this._size) return this._size;\n      this._size = getPageSize(this.props.size, this.orientation); // Adjust size for ruler\n\n      if (this.hasHorizontalRuler()) {\n        this._size.width += this.getRulerWidth();\n      }\n\n      if (this.hasVerticalRuler()) {\n        this._size.height += this.getRulerWidth();\n      }\n\n      return this._size;\n    }\n  }]);\n\n  return Page;\n}(Base);\n\nPage$1.defaultProps = {\n  size: 'A4',\n  orientation: 'portrait',\n  style: {},\n  wrap: true\n};\n\n_Object$assign(Page$1.prototype, Ruler);\n\nvar View$1 = function (_Base) {\n  _inherits(View, _Base);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    return _possibleConstructorReturn(this, _Base.apply(this, arguments));\n  }\n\n  View.prototype.render = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.root.instance.save();\n              this.applyTransformations();\n              this.drawBackgroundColor();\n              this.drawBorders();\n              _context.next = 6;\n              return this.renderChildren();\n\n            case 6:\n              if (this.props.debug) this.debug();\n              this.root.instance.restore();\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function render() {\n      return _ref.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(View, [{\n    key: 'name',\n    get: function get() {\n      return 'View';\n    }\n  }]);\n\n  return View;\n}(Base);\n\nView$1.defaultProps = {\n  style: {},\n  wrap: true\n};\nvar PROTOCOL_REGEXP = /^(http|https|ftp|ftps|mailto)\\:\\/\\//i;\n\nvar getURL = function getURL(value) {\n  if (typeof value === 'string' && !value.match(PROTOCOL_REGEXP)) {\n    return 'http://' + value;\n  }\n\n  return value;\n};\n\nvar capitalize = function capitalize(value) {\n  return value.replace(/(^|\\s)\\S/g, function (l) {\n    return l.toUpperCase();\n  });\n};\n\nvar IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR\n8233];\n\nvar buildSubsetForFont = function buildSubsetForFont(font) {\n  return IGNORABLE_CODEPOINTS.reduce(function (acc, codePoint) {\n    if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n\n    return [].concat(acc, [String.fromCharCode(codePoint)]);\n  }, []);\n};\n\nvar ignoreChars = function ignoreChars(fragments) {\n  return fragments.map(function (fragment) {\n    var charSubset = buildSubsetForFont(fragment.attributes.font);\n    var subsetRegex = new RegExp(charSubset.join('|'));\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes\n    };\n  });\n};\n\nvar PREPROCESSORS = [ignoreChars, embedEmojis];\n\nvar transformText = function transformText(text, transformation) {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n\n    case 'lowercase':\n      return text.toLowerCase();\n\n    case 'capitalize':\n      return capitalize(text);\n\n    default:\n      return text;\n  }\n};\n\nvar getFragments = function getFragments(instance) {\n  if (!instance) return [{\n    string: ''\n  }];\n  var fragments = [];\n\n  var _instance$getComputed = instance.getComputedStyles(),\n      _instance$getComputed2 = _instance$getComputed.color,\n      color = _instance$getComputed2 === undefined ? 'black' : _instance$getComputed2,\n      backgroundColor = _instance$getComputed.backgroundColor,\n      _instance$getComputed3 = _instance$getComputed.fontFamily,\n      fontFamily = _instance$getComputed3 === undefined ? 'Helvetica' : _instance$getComputed3,\n      _instance$getComputed4 = _instance$getComputed.fontSize,\n      fontSize = _instance$getComputed4 === undefined ? 18 : _instance$getComputed4,\n      _instance$getComputed5 = _instance$getComputed.textAlign,\n      textAlign = _instance$getComputed5 === undefined ? 'left' : _instance$getComputed5,\n      position = _instance$getComputed.position,\n      top = _instance$getComputed.top,\n      bottom = _instance$getComputed.bottom,\n      lineHeight = _instance$getComputed.lineHeight,\n      textDecoration = _instance$getComputed.textDecoration,\n      textDecorationColor = _instance$getComputed.textDecorationColor,\n      textDecorationStyle = _instance$getComputed.textDecorationStyle,\n      textTransform = _instance$getComputed.textTransform,\n      letterSpacing = _instance$getComputed.letterSpacing;\n\n  instance.children.forEach(function (child) {\n    if (child.value !== null && child.value !== undefined) {\n      var obj = Font.getFont(fontFamily);\n      var font = obj ? obj.data : fontFamily;\n      var string = transformText(child.value, textTransform);\n      fragments.push({\n        string: string,\n        attributes: {\n          font: font,\n          color: color,\n          fontSize: fontSize,\n          backgroundColor: backgroundColor,\n          align: textAlign,\n          link: instance.src,\n          characterSpacing: letterSpacing,\n          underlineStyle: textDecorationStyle,\n          underline: textDecoration === 'underline',\n          underlineColor: textDecorationColor || color,\n          lineHeight: lineHeight ? lineHeight * fontSize : null,\n          yOffset: position === 'relative' ? -top || bottom || 0 : null\n        }\n      });\n    } else {\n      if (child) {\n        var _fragments;\n\n        (_fragments = fragments).push.apply(_fragments, getFragments(child));\n      }\n    }\n  });\n\n  for (var _iterator = PREPROCESSORS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var preprocessor = _ref;\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n\nvar getAttributedString = function getAttributedString(instance) {\n  return AttributedString.fromFragments(getFragments(instance)).trim();\n};\n\nvar PDFRenderer$2 = createPDFRenderer({\n  Rect: Rect\n});\n\nvar Text$1 = function (_Base) {\n  _inherits(Text, _Base);\n\n  function Text(root, props) {\n    _classCallCheck(this, Text);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, root, props));\n\n    _this.start = 0;\n    _this.end = 0;\n    _this.computed = false;\n    _this._container = null;\n    _this._attributedString = null;\n    _this._layoutEngine = null;\n    _this.renderCallback = props.render;\n\n    _this.layout.setMeasureFunc(_this.measureText.bind(_this));\n\n    return _this;\n  }\n\n  Text.prototype.appendChild = function appendChild(child) {\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n      this.computed = false;\n      this._attributedString = null;\n      this.markDirty();\n    }\n  };\n\n  Text.prototype.removeChild = function removeChild(child) {\n    var index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n      this.computed = false;\n      this._attributedString = null;\n      this.markDirty();\n    }\n  };\n\n  Text.prototype.lineIndexAtHeight = function lineIndexAtHeight(height) {\n    var counter = 0;\n\n    for (var i = 0; i < this.lines.length; i++) {\n      var line = this.lines[i];\n\n      if (counter + line.height > height) {\n        return i;\n      }\n\n      counter += line.height;\n    }\n\n    return this.lines.length;\n  };\n\n  Text.prototype.heightAtLineIndex = function heightAtLineIndex(index) {\n    var counter = 0;\n\n    for (var i = 0; i < index; i++) {\n      var line = this.lines[i];\n      counter += line.height;\n    }\n\n    return counter;\n  };\n\n  Text.prototype.layoutText = function layoutText(width, height) {\n    // IF height null or NaN, we take some liberty on layout height\n    var containerHeight = height || this.page.size.height; // Text layout is expensive. That's why we ensure to only do it once\n    // (except dynamic nodes. Those change content and needs to relayout every time)\n\n    if (!this._container || this.props.render) {\n      var path = new Path().rect(0, 0, width, containerHeight);\n      var container = new Container(path);\n      var attributedString = this.attributedString; // Do the actual text layout\n\n      this.layoutEngine.layout(attributedString, [container]);\n      this._container = container;\n    } // Get the total amount of rendered lines\n\n\n    var linesCount = this._container.blocks.reduce(function (acc, block) {\n      return acc + block.lines.length;\n    }, 0);\n\n    this.computed = true;\n    this.end = linesCount + 1;\n  };\n\n  Text.prototype.measureText = function measureText(width, widthMode, height, heightMode) {\n    if (widthMode === Yoga.MEASURE_MODE_EXACTLY) {\n      this.layoutText(width);\n      return {\n        height: this.style.flexGrow ? NaN : this.linesHeight\n      };\n    }\n\n    if (widthMode === Yoga.MEASURE_MODE_AT_MOST || heightMode === Yoga.MEASURE_MODE_AT_MOST) {\n      this.layoutText(width, height);\n      return {\n        height: this.linesHeight,\n        width: Math.min(width, this.linesWidth)\n      };\n    }\n\n    return {};\n  };\n\n  Text.prototype.getComputedStyles = function getComputedStyles() {\n    var styles = _Base.prototype.getComputedStyles.call(this); // Inherit relative positioning for inline childs\n\n\n    if (this.parent && this.parent.name === 'Text' && this.parent.style.position === 'relative') {\n      styles.top = styles.top || this.parent.style.top;\n      styles.bottom = styles.bottom || this.parent.style.bottom;\n      styles.position = styles.position || 'relative';\n    } // Apply default link styles\n\n\n    if (this.src) {\n      styles.color = styles.color || 'blue';\n      styles.textDecoration = styles.textDecoration || 'underline';\n    }\n\n    return styles;\n  };\n\n  Text.prototype.wrapHeight = function wrapHeight(height) {\n    var _props = this.props,\n        orphans = _props.orphans,\n        widows = _props.widows;\n    var linesQuantity = this.lines.length;\n    var sliceHeight = height - this.paddingTop;\n    var slicedLine = this.lineIndexAtHeight(sliceHeight);\n\n    if (linesQuantity < orphans) {\n      return height;\n    } else if (slicedLine < orphans || linesQuantity < orphans + widows) {\n      return 0;\n    } else if (linesQuantity === orphans + widows) {\n      return this.heightAtLineIndex(orphans);\n    } else if (linesQuantity - slicedLine < widows) {\n      return height - this.heightAtLineIndex(widows - 1);\n    }\n\n    return height;\n  };\n\n  Text.prototype.onNodeSplit = function onNodeSplit(height, clone) {\n    var wrapHeight = this.wrapHeight(height);\n    var slicedLineIndex = this.lineIndexAtHeight(wrapHeight);\n    clone.marginTop = 0;\n    clone.paddingTop = 0;\n    clone.start = slicedLineIndex;\n    clone.attributedString = this.attributedString;\n    this.height = wrapHeight;\n    this.marginBottom = 0;\n    this.paddingBottom = 0;\n    this.end = slicedLineIndex;\n  };\n\n  Text.prototype.clone = function clone() {\n    var text = _Base.prototype.clone.call(this);\n\n    text.layoutEngine = this.layoutEngine; // Save calculated layout for non-dynamic clone elements\n\n    if (!this.props.render && !this.props.fixed) {\n      text._container = this._container;\n    }\n\n    return text;\n  };\n\n  Text.prototype.render = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var padding, _getAbsoluteLayout, top, left, initialX, renderer;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.root.instance.save();\n              this.applyTransformations();\n              this.drawBackgroundColor();\n              this.drawBorders(); // Calculate text layout if needed\n              // This can happen if measureText was not called by Yoga\n\n              if (!this.computed) {\n                this.layoutText(this.width - this.padding.left - this.padding.right, this.height - this.padding.top - this.padding.bottom);\n              }\n\n              padding = this.padding;\n              _getAbsoluteLayout = this.getAbsoluteLayout(), top = _getAbsoluteLayout.top, left = _getAbsoluteLayout.left; // We translate lines based on Yoga container\n\n              initialX = this.lines[0] ? this.lines[0].rect.y : 0;\n              this.lines.forEach(function (line) {\n                line.rect.x += left + padding.left;\n                line.rect.y += top + padding.top - initialX;\n              });\n              renderer = new PDFRenderer$2(this.root.instance, {\n                outlineLines: false\n              });\n              renderer.render(this.container);\n\n              if (this.props.debug) {\n                this.debug();\n              }\n\n              this.root.instance.restore();\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function render() {\n      return _ref.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Text, [{\n    key: 'name',\n    get: function get() {\n      return 'Text';\n    }\n  }, {\n    key: 'src',\n    get: function get() {\n      return getURL(this.props.src || this.props.href);\n    }\n  }, {\n    key: 'attributedString',\n    get: function get() {\n      if (!this._attributedString) {\n        this._attributedString = getAttributedString(this);\n      }\n\n      return this._attributedString;\n    },\n    set: function set(value) {\n      this._attributedString = value;\n    }\n  }, {\n    key: 'container',\n    get: function get() {\n      var lines = this._container.blocks.reduce(function (acc, block) {\n        return [].concat(acc, block.lines);\n      }, []);\n\n      return _extends({}, this._container, {\n        blocks: [{\n          lines: lines.splice(this.start, this.end)\n        }]\n      });\n    }\n  }, {\n    key: 'lines',\n    get: function get() {\n      if (!this.container) return [];\n      return this.container.blocks.reduce(function (acc, block) {\n        return [].concat(acc, block.lines);\n      }, []);\n    }\n  }, {\n    key: 'linesHeight',\n    get: function get() {\n      if (!this._container) return -1;\n      return this.lines.reduce(function (acc, line) {\n        return acc + line.height;\n      }, 0);\n    }\n  }, {\n    key: 'linesWidth',\n    get: function get() {\n      if (!this._container) return -1;\n      return Math.max.apply(Math, this.lines.map(function (line) {\n        return line.advanceWidth;\n      }));\n    }\n  }, {\n    key: 'layoutEngine',\n    get: function get() {\n      if (!this._layoutEngine) {\n        var hyphenationPenalty = this.props.hyphenationPenalty;\n        var hyphenationCallback = Font.getHyphenationCallback();\n        this._layoutEngine = new LayoutEngine$1({\n          hyphenationCallback: hyphenationCallback,\n          hyphenationPenalty: hyphenationPenalty\n        });\n      }\n\n      return this._layoutEngine;\n    },\n    set: function set(instance) {\n      this._layoutEngine = instance;\n    }\n  }]);\n\n  return Text;\n}(Base);\n\nText$1.defaultProps = {\n  wrap: true,\n  widows: 2,\n  orphans: 2\n};\n\nvar Link$1 = function (_Base) {\n  _inherits(Link, _Base);\n\n  function Link() {\n    _classCallCheck(this, Link);\n\n    return _possibleConstructorReturn(this, _Base.apply(this, arguments));\n  }\n\n  Link.prototype.render = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _getAbsoluteLayout, top, left, width, height;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _getAbsoluteLayout = this.getAbsoluteLayout(), top = _getAbsoluteLayout.top, left = _getAbsoluteLayout.left, width = _getAbsoluteLayout.width, height = _getAbsoluteLayout.height;\n              this.root.instance.link(left, top, width, height, this.src);\n              _context.next = 4;\n              return this.renderChildren();\n\n            case 4:\n              if (this.props.debug) this.debug();\n\n            case 5:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function render() {\n      return _ref.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Link, [{\n    key: 'name',\n    get: function get() {\n      return 'Link';\n    }\n  }, {\n    key: 'src',\n    get: function get() {\n      return getURL(this.props.src || this.props.href);\n    }\n  }]);\n\n  return Link;\n}(Base);\n\nvar Note$1 = function (_Base) {\n  _inherits(Note, _Base);\n\n  function Note() {\n    _classCallCheck(this, Note);\n\n    return _possibleConstructorReturn(this, _Base.apply(this, arguments));\n  }\n\n  Note.prototype.appendChild = function appendChild(child) {\n    if (child.name !== 'TextInstance') {\n      throw new Error('Note only accepts string children');\n    }\n\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n    }\n  };\n\n  Note.prototype.removeChild = function removeChild(child) {\n    var index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n    }\n  };\n\n  Note.prototype.applyProps = function applyProps() {\n    _Base.prototype.applyProps.call(this);\n\n    this.height = 0;\n    this.width = 0;\n  };\n\n  Note.prototype.render = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _getAbsoluteLayout, top, left, value;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _getAbsoluteLayout = this.getAbsoluteLayout(), top = _getAbsoluteLayout.top, left = _getAbsoluteLayout.left;\n              value = this.children[0] ? this.children[0].value : '';\n              this.root.instance.note(left, top, 0, 0, value);\n\n            case 3:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function render() {\n      return _ref.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Note, [{\n    key: 'name',\n    get: function get() {\n      return 'Note';\n    }\n  }]);\n\n  return Note;\n}(Base);\n\nNote$1.defaultProps = {};\nvar SAFETY_HEIGHT = 10; // We manage two bounding boxes in this class:\n//  - Yoga node: Image bounding box. Adjust based on image and page size\n//  - Image node: Real image container. In most cases equals Yoga node, except if image is bigger than page\n\nvar Image$1 = function (_Base) {\n  _inherits(Image, _Base);\n\n  function Image(root, props) {\n    _classCallCheck(this, Image);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, root, props));\n\n    _this.image = null;\n\n    _this.layout.setMeasureFunc(_this.measureImage.bind(_this));\n\n    return _this;\n  }\n\n  Image.prototype.shouldGrow = function shouldGrow() {\n    return !!this.getComputedStyles().flexGrow;\n  };\n\n  Image.prototype.measureImage = function measureImage(width, widthMode, height, heightMode) {\n    var imageMargin = this.margin;\n    var pagePadding = this.page.padding;\n    var pageArea = this.page.size.height - pagePadding.top - pagePadding.bottom - imageMargin.top - imageMargin.bottom - SAFETY_HEIGHT; // Skip measure if image data not present yet\n\n    if (!this.image) return {\n      width: 0,\n      height: 0\n    };\n\n    if (widthMode === Yoga.MEASURE_MODE_EXACTLY && heightMode === Yoga.MEASURE_MODE_UNDEFINED) {\n      var scaledHeight = width / this.ratio;\n      return {\n        height: Math.min(pageArea, scaledHeight)\n      };\n    }\n\n    if (heightMode === Yoga.MEASURE_MODE_EXACTLY && (widthMode === Yoga.MEASURE_MODE_AT_MOST || widthMode === Yoga.MEASURE_MODE_UNDEFINED)) {\n      return {\n        width: Math.min(height * this.ratio, width)\n      };\n    }\n\n    if (widthMode === Yoga.MEASURE_MODE_EXACTLY && heightMode === Yoga.MEASURE_MODE_AT_MOST) {\n      var _scaledHeight = width / this.ratio;\n\n      return {\n        height: Math.min(height, pageArea, _scaledHeight)\n      };\n    }\n\n    if (widthMode === Yoga.MEASURE_MODE_AT_MOST && heightMode === Yoga.MEASURE_MODE_AT_MOST) {\n      if (this.ratio > 1) {\n        return {\n          width: width,\n          height: Math.min(width / this.ratio, height)\n        };\n      } else {\n        return {\n          width: Math.min(height * this.ratio, width),\n          height: height\n        };\n      }\n    }\n\n    return {\n      height: height,\n      width: width\n    };\n  };\n\n  Image.prototype.fetch = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return resolveImage(this.props.src, this.props.cache);\n\n            case 3:\n              this.image = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context['catch'](0);\n              this.image = {\n                width: 0,\n                height: 0\n              };\n              console.warn(_context.t0.message);\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 6]]);\n    }));\n\n    function fetch$$1() {\n      return _ref.apply(this, arguments);\n    }\n\n    return fetch$$1;\n  }();\n\n  Image.prototype.clone = function clone() {\n    var clone = _Base.prototype.clone.call(this);\n\n    clone.image = this.image;\n    return clone;\n  };\n\n  Image.prototype.onAppendDynamically = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.fetch();\n\n            case 2:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function onAppendDynamically() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return onAppendDynamically;\n  }();\n\n  Image.prototype.renderImage = function renderImage() {\n    var padding = this.padding;\n\n    var _getAbsoluteLayout = this.getAbsoluteLayout(),\n        left = _getAbsoluteLayout.left,\n        top = _getAbsoluteLayout.top;\n\n    this.root.instance.save(); // Clip path to keep image inside border radius\n\n    this.clip();\n\n    if (this.image.data) {\n      // Inner offset between yoga node and image box\n      // Makes image centered inside Yoga node\n      var width = Math.min(this.height * this.ratio, this.width) - padding.left - padding.right;\n      var height = this.height - padding.top - padding.bottom;\n      var xOffset = Math.max((this.width - width) / 2, 0);\n\n      if (width !== 0 && height !== 0) {\n        this.root.instance.image(this.image.data, left + padding.left + xOffset, top + padding.top, {\n          width: width,\n          height: height\n        });\n      } else {\n        warning(false, 'Image with src \\'' + this.props.src + '\\' skipped due to invalid dimensions');\n      }\n    }\n\n    this.root.instance.restore();\n  };\n\n  Image.prototype.render = function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this.root.instance.save();\n              this.applyTransformations();\n              this.drawBackgroundColor();\n              this.renderImage();\n              this.drawBorders();\n\n              if (this.props.debug) {\n                this.debug();\n              }\n\n              this.root.instance.restore();\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function render() {\n      return _ref3.apply(this, arguments);\n    }\n\n    return render;\n  }();\n\n  _createClass(Image, [{\n    key: 'name',\n    get: function get() {\n      return 'Image';\n    }\n  }, {\n    key: 'ratio',\n    get: function get() {\n      return this.image.data ? this.image.width / this.image.height : 1;\n    }\n  }]);\n\n  return Image;\n}(Base);\n\nImage$1.defaultProps = {\n  wrap: false,\n  cache: true\n};\nvar constructors = {\n  ROOT: Root,\n  PAGE: Page$1,\n  TEXT: Text$1,\n  LINK: Link$1,\n  VIEW: View$1,\n  NOTE: Note$1,\n  IMAGE: Image$1,\n  DOCUMENT: Document$2,\n  TEXT_INSTANCE: TextInstance\n};\n\nfunction createInstance(element, root) {\n  var type = element.type,\n      _element$props = element.props,\n      props = _element$props === undefined ? {} : _element$props;\n\n  if (constructors[type]) {\n    return new constructors[type](root, props);\n  }\n\n  throw new Error('Invalid element of type ' + type + ' passed to PDF renderer');\n}\n\nvar propsEqual = function propsEqual(a, b) {\n  var oldPropsKeys = _Object$keys(a);\n\n  var newPropsKeys = _Object$keys(b);\n\n  if (oldPropsKeys.length !== newPropsKeys.length) {\n    return false;\n  }\n\n  for (var i = 0; i < oldPropsKeys.length; i++) {\n    var propName = oldPropsKeys[i];\n\n    if (propName === 'render') {\n      if (!a[propName] !== !b[propName]) {\n        return false;\n      }\n\n      continue;\n    }\n\n    if (propName !== 'children' && a[propName] !== b[propName]) {\n      if (_typeof(a[propName]) === 'object' && _typeof(b[propName]) === 'object' && propsEqual(a[propName], b[propName])) {\n        continue;\n      }\n\n      return false;\n    }\n\n    if (propName === 'children' && (typeof a[propName] === 'string' || typeof b[propName] === 'string')) {\n      return a[propName] === b[propName];\n    }\n  }\n\n  return true;\n}; // If the Link has a strign child or render prop, substitute the instance by a Text,\n// that will ultimately render the inline Link via the textkit PDF renderer.\n\n\nvar shouldReplaceLink = function shouldReplaceLink(type, props) {\n  return type === 'LINK' && (typeof props.children === 'string' || Array.isArray(props.children) || props.render);\n};\n\nvar PDFRenderer = ReactFiberReconciler({\n  supportsMutation: true,\n  appendInitialChild: function appendInitialChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n  createInstance: function createInstance$$1(type, props, internalInstanceHandle) {\n    var instanceType = shouldReplaceLink(type, props) ? 'TEXT' : type;\n    return createInstance({\n      type: instanceType,\n      props: props\n    }, internalInstanceHandle);\n  },\n  createTextInstance: function createTextInstance(text, rootContainerInstance) {\n    return createInstance({\n      type: 'TEXT_INSTANCE',\n      props: text\n    }, rootContainerInstance);\n  },\n  finalizeInitialChildren: function finalizeInitialChildren(element, type, props) {\n    return false;\n  },\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  prepareForCommit: function prepareForCommit() {// Noop\n  },\n  prepareUpdate: function prepareUpdate(element, type, oldProps, newProps) {\n    return !propsEqual(oldProps, newProps);\n  },\n  resetAfterCommit: function resetAfterCommit() {// Noop\n  },\n  resetTextContent: function resetTextContent(element) {// Noop\n  },\n  getRootHostContext: function getRootHostContext() {\n    return emptyObject;\n  },\n  getChildHostContext: function getChildHostContext() {\n    return emptyObject;\n  },\n  shouldSetTextContent: function shouldSetTextContent(type, props) {\n    return false;\n  },\n  now: Date.now,\n  useSyncScheduling: true,\n  appendChild: function appendChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n  appendChildToContainer: function appendChildToContainer(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n  insertBefore: function insertBefore(parentInstance, child, beforeChild) {\n    parentInstance.appendChildBefore(child, beforeChild);\n  },\n  removeChild: function removeChild(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n  removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n  commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n    textInstance.update(newText);\n  },\n  commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    instance.update(newProps);\n  }\n});\nvar version = \"1.2.2\";\nvar View = 'VIEW';\nvar Text = 'TEXT';\nvar Link = 'LINK';\nvar Page = 'PAGE';\nvar Note = 'NOTE';\nvar Image = 'IMAGE';\nvar Document$1 = 'DOCUMENT';\n\nvar pdf = function pdf(input) {\n  var toBlob = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var stream;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return container.render();\n\n            case 2:\n              stream = container.instance.pipe(BlobStream());\n              return _context.abrupt('return', new _Promise(function (resolve, reject) {\n                stream.on('finish', function () {\n                  try {\n                    var blob = stream.toBlob('application/pdf');\n                    callOnRender({\n                      blob: blob\n                    });\n                    resolve(blob);\n                  } catch (error) {\n                    reject(error);\n                  }\n                });\n                stream.on('error', reject);\n              }));\n\n            case 4:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function toBlob() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var container = createInstance({\n    type: 'ROOT'\n  });\n  var mountNode = PDFRenderer.createContainer(container);\n  if (input) updateContainer(input);\n\n  function callOnRender() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (container.document.props.onRender) {\n      var layoutData = container.document.getLayoutData();\n      container.document.props.onRender(_extends({}, params, {\n        layoutData: layoutData\n      }));\n    }\n  }\n\n  function isDirty() {\n    return container.isDirty;\n  }\n\n  function updateContainer(doc) {\n    PDFRenderer.updateContainer(doc, mountNode, null);\n  }\n\n  function toBuffer() {\n    callOnRender();\n    container.render();\n    return container.instance;\n  }\n\n  function toString() {\n    var result = '';\n    container.render();\n    return new _Promise(function (resolve, reject) {\n      try {\n        container.instance.on('data', function (buffer) {\n          result += buffer;\n        });\n        container.instance.on('end', function () {\n          callOnRender({\n            string: result\n          });\n          resolve(result);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  return {\n    isDirty: isDirty,\n    updateContainer: updateContainer,\n    toBuffer: toBuffer,\n    toBlob: toBlob,\n    toString: toString\n  };\n};\n/* eslint-disable no-unused-vars */\n\n\nvar Document$$1 = function Document$$1(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, ['children']);\n\n  return React.createElement(Document$1, props, children);\n};\n\nvar InternalBlobProvider = function (_React$PureComponent) {\n  _inherits(InternalBlobProvider, _React$PureComponent);\n\n  function InternalBlobProvider(props) {\n    _classCallCheck(this, InternalBlobProvider); // Create new root container for this render\n\n\n    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));\n\n    _this.state = {\n      blob: null,\n      url: null,\n      loading: true,\n      error: null\n    };\n    _this.instance = pdf();\n    return _this;\n  }\n\n  InternalBlobProvider.prototype.componentDidMount = function componentDidMount() {\n    this.renderDocument();\n    this.onDocumentUpdate();\n  };\n\n  InternalBlobProvider.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.renderDocument();\n\n    if (this.instance.isDirty() && !this.state.error) {\n      this.onDocumentUpdate();\n    }\n  };\n\n  InternalBlobProvider.prototype.renderDocument = function renderDocument() {\n    this.instance.updateContainer(this.props.document);\n  };\n\n  InternalBlobProvider.prototype.onDocumentUpdate = function onDocumentUpdate() {\n    var _this2 = this;\n\n    var oldBlobUrl = this.state.url;\n    this.instance.toBlob().then(function (blob) {\n      _this2.setState({\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        loading: false\n      }, function () {\n        return URL.revokeObjectURL(oldBlobUrl);\n      });\n    }).catch(function (error) {\n      _this2.setState({\n        error: error\n      });\n\n      console.error(error);\n      throw error;\n    });\n  };\n\n  InternalBlobProvider.prototype.render = function render() {\n    return this.props.children(this.state);\n  };\n\n  return InternalBlobProvider;\n}(React.PureComponent);\n\nvar BlobProvider = function BlobProvider(_ref2) {\n  var doc = _ref2.document,\n      children = _ref2.children;\n\n  if (!doc) {\n    warning(false, 'You should pass a valid document to BlobProvider');\n    return null;\n  }\n\n  return React.createElement(InternalBlobProvider, {\n    document: doc\n  }, children);\n};\n\nvar PDFViewer = function PDFViewer(_ref3) {\n  var className = _ref3.className,\n      style = _ref3.style,\n      children = _ref3.children,\n      innerRef = _ref3.innerRef,\n      props = _objectWithoutProperties(_ref3, ['className', 'style', 'children', 'innerRef']);\n\n  return React.createElement(InternalBlobProvider, {\n    document: children\n  }, function (_ref4) {\n    var url = _ref4.url;\n    return React.createElement('iframe', _extends({\n      className: className,\n      ref: innerRef,\n      src: url,\n      style: Array.isArray(style) ? flatStyles(style) : style\n    }, props));\n  });\n};\n\nvar PDFDownloadLink = function PDFDownloadLink(_ref5) {\n  var doc = _ref5.document,\n      className = _ref5.className,\n      style = _ref5.style,\n      children = _ref5.children,\n      _ref5$fileName = _ref5.fileName,\n      fileName = _ref5$fileName === undefined ? 'document.pdf' : _ref5$fileName;\n\n  if (!doc) {\n    warning(false, 'You should pass a valid document to PDFDownloadLink');\n    return null;\n  }\n\n  var downloadOnIE = function downloadOnIE(blob) {\n    return function () {\n      if (window.navigator.msSaveBlob) {\n        window.navigator.msSaveBlob(blob, fileName);\n      }\n    };\n  };\n\n  return React.createElement(InternalBlobProvider, {\n    document: doc\n  }, function (params) {\n    return React.createElement('a', {\n      className: className,\n      download: fileName,\n      href: params.url,\n      onClick: downloadOnIE(params.blob),\n      style: Array.isArray(style) ? flatStyles(style) : style\n    }, typeof children === 'function' ? children(params) : children);\n  });\n};\n\nvar dom = {\n  pdf: pdf,\n  View: View,\n  Text: Text,\n  Link: Link,\n  Page: Page,\n  Font: Font,\n  Note: Note,\n  Image: Image,\n  version: version,\n  Document: Document$$1,\n  PDFViewer: PDFViewer,\n  StyleSheet: StyleSheet,\n  PDFRenderer: PDFRenderer,\n  BlobProvider: BlobProvider,\n  createInstance: createInstance,\n  PDFDownloadLink: PDFDownloadLink\n};\nexport { Document$$1 as Document, BlobProvider, PDFViewer, PDFDownloadLink, pdf, View, Text, Link, Page, Font, Note, Image, version, StyleSheet, PDFRenderer, createInstance };\nexport default dom;","map":null,"metadata":{},"sourceType":"module"}