{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _GlyphRun = require('../models/GlyphRun');\n\nvar _GlyphRun2 = _interopRequireDefault(_GlyphRun);\n\nvar _GlyphString = require('../models/GlyphString');\n\nvar _GlyphString2 = _interopRequireDefault(_GlyphString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar resolveGlyphIndices = function resolveGlyphIndices(string, stringIndices) {\n  var glyphIndices = [];\n\n  for (var i = 0; i < string.length; i++) {\n    for (var j = 0; j < stringIndices.length; j++) {\n      if (stringIndices[j] >= i) {\n        glyphIndices[i] = j;\n        break;\n      }\n\n      glyphIndices[i] = undefined;\n    }\n  }\n\n  var lastValue = glyphIndices[glyphIndices.length - 1];\n\n  for (var _i = glyphIndices.length - 1; _i >= 0; _i--) {\n    if (glyphIndices[_i] === undefined) {\n      glyphIndices[_i] = lastValue;\n    } else {\n      lastValue = glyphIndices[_i];\n    }\n  }\n\n  lastValue = glyphIndices[0];\n\n  for (var _i2 = 0; _i2 < glyphIndices.length; _i2++) {\n    if (glyphIndices[_i2] === undefined) {\n      glyphIndices[_i2] = lastValue;\n    } else {\n      lastValue = glyphIndices[_i2];\n    }\n  }\n\n  return glyphIndices;\n};\n\nvar stringToGlyphs = function stringToGlyphs(attributedString) {\n  var glyphIndex = 0;\n  var glyphRuns = attributedString.runs.map(function (run) {\n    var start = run.start,\n        end = run.end,\n        attributes = run.attributes;\n    var str = attributedString.string.slice(start, end);\n    var glyphRun = run.attributes.font.layout(str, attributes.features, attributes.script);\n    var glyphEnd = glyphIndex + glyphRun.glyphs.length;\n    var glyphIndices = resolveGlyphIndices(str, glyphRun.stringIndices);\n    var res = new _GlyphRun2.default(glyphIndex, glyphEnd, attributes, glyphRun.glyphs, glyphRun.positions, glyphRun.stringIndices, glyphIndices);\n    glyphIndex = glyphEnd;\n    return res;\n  });\n  return new _GlyphString2.default(attributedString.string, glyphRuns);\n};\n\nvar generateGlyphs = function generateGlyphs() {\n  return function (paragraph) {\n    return {\n      syllables: paragraph.syllables,\n      value: stringToGlyphs(paragraph.attributedString)\n    };\n  };\n};\n\nexports.default = generateGlyphs;","map":null,"metadata":{},"sourceType":"script"}