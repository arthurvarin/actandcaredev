{"ast":null,"code":"/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*!\n * @module common/service\n */\n'use strict';\n\nvar arrify = require('arrify');\n\nvar extend = require('extend');\n/**\n * @type {module:common/util}\n * @private\n */\n\n\nvar util = require('./util.js');\n\nvar PROJECT_ID_TOKEN = '{{projectId}}';\n/**\n * Service is a base class, meant to be inherited from by a \"service,\" like\n * BigQuery or Storage.\n *\n * This handles making authenticated requests by exposing a `makeReq_` function.\n *\n * @constructor\n * @alias module:common/service\n *\n * @param {object} config - Configuration object.\n * @param {string} config.baseUrl - The base URL to make API requests to.\n * @param {string[]} config.scopes - The scopes required for the request.\n * @param {object=} options - [Configuration object](#/docs).\n */\n\nfunction Service(config, options) {\n  options = options || {};\n  util.privatize(this, 'baseUrl', config.baseUrl);\n  util.privatize(this, 'globalInterceptors', arrify(options.interceptors_));\n  util.privatize(this, 'interceptors', []);\n  util.privatize(this, 'packageJson', config.packageJson);\n  util.privatize(this, 'projectId', options.projectId || PROJECT_ID_TOKEN);\n  util.privatize(this, 'projectIdRequired', config.projectIdRequired !== false);\n  util.privatize(this, 'Promise', options.promise || Promise);\n  var reqCfg = extend({}, config, {\n    projectIdRequired: this.projectIdRequired,\n    projectId: this.projectId,\n    credentials: options.credentials,\n    keyFile: options.keyFilename,\n    email: options.email,\n    token: options.token\n  });\n  util.privatize(this, 'makeAuthenticatedRequest', util.makeAuthenticatedRequestFactory(reqCfg));\n  util.privatize(this, 'authClient', this.makeAuthenticatedRequest.authClient);\n  util.privatize(this, 'getCredentials', this.makeAuthenticatedRequest.getCredentials);\n  var isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n\n  if (isCloudFunctionEnv) {\n    this.interceptors.push({\n      request: function request(reqOpts) {\n        reqOpts.forever = false;\n        return reqOpts;\n      }\n    });\n  }\n}\n/**\n * Get and update the Service's project ID.\n *\n * @param {function} callback - The callback function.\n */\n\n\nService.prototype.getProjectId = function (callback) {\n  var self = this;\n  this.authClient.getProjectId(function (err, projectId) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (self.projectId === PROJECT_ID_TOKEN && projectId) {\n      self.projectId = projectId;\n    }\n\n    callback(null, self.projectId);\n  });\n};\n/**\n * Make an authenticated API request.\n *\n * @private\n *\n * @param {object} reqOpts - Request options that are passed to `request`.\n * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n * @param {function} callback - The callback function passed to `request`.\n */\n\n\nService.prototype.request_ = function (reqOpts, callback) {\n  reqOpts = extend(true, {}, reqOpts);\n  var isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n  var uriComponents = [this.baseUrl];\n\n  if (this.projectIdRequired) {\n    uriComponents.push('projects');\n    uriComponents.push(this.projectId);\n  }\n\n  uriComponents.push(reqOpts.uri);\n\n  if (isAbsoluteUrl) {\n    uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n  }\n\n  reqOpts.uri = uriComponents.map(function (uriComponent) {\n    var trimSlashesRegex = /^\\/*|\\/*$/g;\n    return uriComponent.replace(trimSlashesRegex, '');\n  }).join('/') // Some URIs have colon separators.\n  // Bad: https://.../projects/:list\n  // Good: https://.../projects:list\n  .replace(/\\/:/g, ':'); // Interceptors should be called in the order they were assigned.\n\n  var combinedInterceptors = [].slice.call(this.globalInterceptors).concat(this.interceptors).concat(arrify(reqOpts.interceptors_));\n  var interceptor;\n\n  while ((interceptor = combinedInterceptors.shift()) && interceptor.request) {\n    reqOpts = interceptor.request(reqOpts);\n  }\n\n  delete reqOpts.interceptors_;\n  var pkg = this.packageJson;\n  reqOpts.headers = extend({}, reqOpts.headers, {\n    'User-Agent': util.getUserAgentFromPackageJson(pkg),\n    'x-goog-api-client': \"gl-node/\".concat(process.versions.node, \" gccl/\").concat(pkg.version)\n  });\n  return this.makeAuthenticatedRequest(reqOpts, callback);\n};\n/**\n * Make an authenticated API request.\n *\n * @private\n *\n * @param {object} reqOpts - Request options that are passed to `request`.\n * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n * @param {function} callback - The callback function passed to `request`.\n */\n\n\nService.prototype.request = function (reqOpts, callback) {\n  Service.prototype.request_.call(this, reqOpts, callback);\n};\n/**\n * Make an authenticated API request.\n *\n * @private\n *\n * @param {object} reqOpts - Request options that are passed to `request`.\n * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n */\n\n\nService.prototype.requestStream = function (reqOpts) {\n  return Service.prototype.request_.call(this, reqOpts);\n};\n\nmodule.exports = Service;","map":null,"metadata":{},"sourceType":"script"}