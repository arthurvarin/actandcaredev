{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar validator = require(\"../utils/validator\");\n/** Firebase IID backend host. */\n\n\nvar FIREBASE_IID_HOST = 'console.firebase.google.com';\n/** Firebase IID backend port number. */\n\nvar FIREBASE_IID_PORT = 443;\n/** Firebase IID backend path. */\n\nvar FIREBASE_IID_PATH = '/v1/';\n/** Firebase IID request timeout duration in milliseconds. */\n\nvar FIREBASE_IID_TIMEOUT = 10000;\n/** HTTP error codes raised by the backend server. */\n\nvar ERROR_CODES = {\n  400: 'Malformed instance ID argument.',\n  401: 'Request not authorized.',\n  403: 'Project does not match instance ID or the client does not have sufficient privileges.',\n  404: 'Failed to find the instance ID.',\n  409: 'Already deleted.',\n  429: 'Request throttled out by the backend server.',\n  500: 'Internal server error.',\n  503: 'Backend servers are over capacity. Try again later.'\n};\n/**\n * Class that provides mechanism to send requests to the Firebase Instance ID backend endpoints.\n */\n\nvar FirebaseInstanceIdRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @param {string} projectId A Firebase project ID string.\n   *\n   * @constructor\n   */\n  function FirebaseInstanceIdRequestHandler(app, projectId) {\n    this.host = FIREBASE_IID_HOST;\n    this.port = FIREBASE_IID_PORT;\n    this.timeout = FIREBASE_IID_TIMEOUT;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    this.path = FIREBASE_IID_PATH + (\"project/\" + projectId + \"/instanceId/\");\n  }\n\n  FirebaseInstanceIdRequestHandler.prototype.deleteInstanceId = function (instanceId) {\n    if (!validator.isNonEmptyString(instanceId)) {\n      return Promise.reject(new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_INSTANCE_ID, 'Instance ID must be a non-empty string.'));\n    }\n\n    return this.invokeRequestHandler(new api_request_1.ApiSettings(instanceId, 'DELETE'));\n  };\n  /**\n   * Invokes the request handler based on the API settings object passed.\n   *\n   * @param {ApiSettings} apiSettings The API endpoint settings to apply to request and response.\n   * @return {Promise<object>} A promise that resolves with the response.\n   */\n\n\n  FirebaseInstanceIdRequestHandler.prototype.invokeRequestHandler = function (apiSettings) {\n    var _this = this;\n\n    var path = this.path + apiSettings.getEndpoint();\n    return Promise.resolve().then(function () {\n      var req = {\n        url: \"https://\" + _this.host + path,\n        method: apiSettings.getHttpMethod(),\n        timeout: _this.timeout\n      };\n      return _this.httpClient.send(req);\n    }).then(function (response) {\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var response = err.response;\n        var errorMessage = response.isJson() && 'error' in response.data ? response.data.error : response.text;\n        var template = ERROR_CODES[response.status];\n        var message = template ? \"Instance ID \\\"\" + apiSettings.getEndpoint() + \"\\\": \" + template : errorMessage;\n        throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.API_ERROR, message);\n      } // In case of timeouts and other network errors, the HttpClient returns a\n      // FirebaseError wrapped in the response. Simply throw it here.\n\n\n      throw err;\n    });\n  };\n\n  return FirebaseInstanceIdRequestHandler;\n}();\n\nexports.FirebaseInstanceIdRequestHandler = FirebaseInstanceIdRequestHandler;","map":null,"metadata":{},"sourceType":"script"}