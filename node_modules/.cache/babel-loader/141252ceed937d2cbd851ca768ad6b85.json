{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [0, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar child_process_1 = require(\"child_process\");\n\nvar crypto_1 = __importDefault(require(\"crypto\"));\n\nvar fs = __importStar(require(\"fs\"));\n\nvar gcpMetadata = __importStar(require(\"gcp-metadata\"));\n\nvar os_1 = __importDefault(require(\"os\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar util_1 = __importDefault(require(\"util\"));\n\nvar transporters_1 = require(\"../transporters\");\n\nvar computeclient_1 = require(\"./computeclient\");\n\nvar envDetect_1 = require(\"./envDetect\");\n\nvar jwtclient_1 = require(\"./jwtclient\");\n\nvar refreshclient_1 = require(\"./refreshclient\");\n\nvar GoogleAuth =\n/** @class */\nfunction () {\n  function GoogleAuth(opts) {\n    // This shim is in place for compatibility with google-auto-auth.\n    this.getProjectId = this.getDefaultProjectId;\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n  }\n\n  Object.defineProperty(GoogleAuth.prototype, \"isGCE\", {\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get: function get() {\n      return this.checkIsGCE;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  GoogleAuth.prototype.getDefaultProjectId = function (callback) {\n    if (callback) {\n      this.getDefaultProjectIdAsync().then(function (r) {\n        return callback(null, r);\n      }).catch(callback);\n    } else {\n      return this.getDefaultProjectIdAsync();\n    }\n  };\n\n  GoogleAuth.prototype.getDefaultProjectIdAsync = function () {\n    var _this = this;\n\n    if (this._cachedProjectId) {\n      return Promise.resolve(this._cachedProjectId);\n    } // In implicit case, supports three environments. In order of precedence,\n    // the implicit environments are:\n    // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n    // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n    // - Cloud SDK: `gcloud config config-helper --format json`\n    // - GCE project ID from metadata server)\n\n\n    if (!this._getDefaultProjectIdPromise) {\n      this._getDefaultProjectIdPromise = new Promise(function (resolve, reject) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var projectId, _a, _b, _c, e_1;\n\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                _d.trys.push([0, 7,, 8]);\n\n                _c = this.getProductionProjectId();\n                if (_c) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this.getFileProjectId()];\n\n              case 1:\n                _c = _d.sent();\n                _d.label = 2;\n\n              case 2:\n                _b = _c;\n                if (_b) return [3\n                /*break*/\n                , 4];\n                return [4\n                /*yield*/\n                , this.getDefaultServiceProjectId()];\n\n              case 3:\n                _b = _d.sent();\n                _d.label = 4;\n\n              case 4:\n                _a = _b;\n                if (_a) return [3\n                /*break*/\n                , 6];\n                return [4\n                /*yield*/\n                , this.getGCEProjectId()];\n\n              case 5:\n                _a = _d.sent();\n                _d.label = 6;\n\n              case 6:\n                projectId = _a;\n                this._cachedProjectId = projectId;\n                resolve(projectId);\n                return [3\n                /*break*/\n                , 8];\n\n              case 7:\n                e_1 = _d.sent();\n                reject(e_1);\n                return [3\n                /*break*/\n                , 8];\n\n              case 8:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n    }\n\n    return this._getDefaultProjectIdPromise;\n  };\n\n  GoogleAuth.prototype.getApplicationDefault = function (optionsOrCallback, callback) {\n    if (optionsOrCallback === void 0) {\n      optionsOrCallback = {};\n    }\n\n    var options;\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(function (r) {\n        return callback(null, r.credential, r.projectId);\n      }).catch(callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  };\n\n  GoogleAuth.prototype.getApplicationDefaultAsync = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, credential, projectId, gce, e_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.cachedCredential) return [3\n            /*break*/\n            , 2];\n            _a = {\n              credential: this.cachedCredential\n            };\n            return [4\n            /*yield*/\n            , this.getDefaultProjectIdAsync()];\n\n          case 1:\n            return [2\n            /*return*/\n            , (_a.projectId = _b.sent(), _a)];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this._tryGetApplicationCredentialsFromEnvironmentVariable(options)];\n\n          case 3:\n            // Check for the existence of a local environment variable pointing to the\n            // location of the credential file. This is typically used in local\n            // developer scenarios.\n            credential = _b.sent();\n            if (!credential) return [3\n            /*break*/\n            , 5];\n\n            if (credential instanceof jwtclient_1.JWT) {\n              credential.scopes = this.scopes;\n            }\n\n            this.cachedCredential = credential;\n            return [4\n            /*yield*/\n            , this.getDefaultProjectId()];\n\n          case 4:\n            projectId = _b.sent();\n            return [2\n            /*return*/\n            , {\n              credential: credential,\n              projectId: projectId\n            }];\n\n          case 5:\n            return [4\n            /*yield*/\n            , this._tryGetApplicationCredentialsFromWellKnownFile(options)];\n\n          case 6:\n            // Look in the well-known credential file location.\n            credential = _b.sent();\n            if (!credential) return [3\n            /*break*/\n            , 8];\n\n            if (credential instanceof jwtclient_1.JWT) {\n              credential.scopes = this.scopes;\n            }\n\n            this.cachedCredential = credential;\n            return [4\n            /*yield*/\n            , this.getDefaultProjectId()];\n\n          case 7:\n            projectId = _b.sent();\n            return [2\n            /*return*/\n            , {\n              credential: credential,\n              projectId: projectId\n            }];\n\n          case 8:\n            _b.trys.push([8, 13,, 14]);\n\n            return [4\n            /*yield*/\n            , this._checkIsGCE()];\n\n          case 9:\n            gce = _b.sent();\n            if (!gce) return [3\n            /*break*/\n            , 11]; // For GCE, just return a default ComputeClient. It will take care of\n            // the rest.\n\n            this.cachedCredential = new computeclient_1.Compute(options);\n            return [4\n            /*yield*/\n            , this.getDefaultProjectId()];\n\n          case 10:\n            projectId = _b.sent();\n            return [2\n            /*return*/\n            , {\n              projectId: projectId,\n              credential: this.cachedCredential\n            }];\n\n          case 11:\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://developers.google.com/accounts/docs/application-default-credentials for more information.');\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            e_2 = _b.sent();\n            throw new Error('Unexpected error while acquiring application default credentials: ' + e_2.message);\n\n          case 14:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._checkIsGCE = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.checkIsGCE === undefined)) return [3\n            /*break*/\n            , 2];\n            _a = this;\n            return [4\n            /*yield*/\n            , gcpMetadata.isAvailable()];\n\n          case 1:\n            _a.checkIsGCE = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this.checkIsGCE];\n        }\n      });\n    });\n  };\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._tryGetApplicationCredentialsFromEnvironmentVariable = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsPath;\n      return __generator(this, function (_a) {\n        credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'];\n\n        if (!credentialsPath || credentialsPath.length === 0) {\n          return [2\n          /*return*/\n          , null];\n        }\n\n        try {\n          return [2\n          /*return*/\n          , this._getApplicationCredentialsFromFilePath(credentialsPath, options)];\n        } catch (e) {\n          throw this.createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable.', e);\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._tryGetApplicationCredentialsFromWellKnownFile = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var location, home;\n      return __generator(this, function (_a) {\n        location = null;\n\n        if (this._isWindows()) {\n          // Windows\n          location = process.env['APPDATA'];\n        } else {\n          home = process.env['HOME'];\n\n          if (home) {\n            location = this._pathJoin(home, '.config');\n          }\n        } // If we found the root path, expand it.\n\n\n        if (location) {\n          location = this._pathJoin(location, 'gcloud');\n          location = this._pathJoin(location, 'application_default_credentials.json');\n          location = this._mockWellKnownFilePath(location); // Check whether the file exists.\n\n          if (!this._fileExists(location)) {\n            location = null;\n          }\n        } // The file does not exist.\n\n\n        if (!location) {\n          return [2\n          /*return*/\n          , null];\n        } // The file seems to exist. Try to use it.\n\n\n        return [2\n        /*return*/\n        , this._getApplicationCredentialsFromFilePath(location, options)];\n      });\n    });\n  };\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._getApplicationCredentialsFromFilePath = function (filePath, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var readStream;\n      return __generator(this, function (_a) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n          throw new Error('The file path is invalid.');\n        } // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n\n\n        try {\n          // Resolve path to actual file in case of symlink. Expect a thrown error\n          // if not resolvable.\n          filePath = fs.realpathSync(filePath);\n\n          if (!fs.lstatSync(filePath).isFile()) {\n            throw new Error();\n          }\n        } catch (err) {\n          throw this.createError(util_1.default.format('The file at %s does not exist, or it is not a file.', filePath), err);\n        } // Now open a read stream on the file, and parse it.\n\n\n        try {\n          readStream = this._createReadStream(filePath);\n          return [2\n          /*return*/\n          , this.fromStream(readStream, options)];\n        } catch (err) {\n          throw this.createError(util_1.default.format('Unable to read the file at %s.', filePath), err);\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  GoogleAuth.prototype.fromJSON = function (json, options) {\n    var client;\n\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the Google auth settings.');\n    }\n\n    this.jsonContent = json;\n    options = options || {};\n\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n    }\n\n    client.fromJSON(json);\n    return client;\n  };\n\n  GoogleAuth.prototype.fromStream = function (inputStream, optionsOrCallback, callback) {\n    if (optionsOrCallback === void 0) {\n      optionsOrCallback = {};\n    }\n\n    var options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(function (r) {\n        return callback(null, r);\n      }).catch(callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  };\n\n  GoogleAuth.prototype.fromStreamAsync = function (inputStream, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n\n      var s = '';\n      inputStream.setEncoding('utf8');\n      inputStream.on('data', function (chunk) {\n        s += chunk;\n      });\n      inputStream.on('end', function () {\n        try {\n          var data = JSON.parse(s);\n\n          var r = _this.fromJSON(data, options);\n\n          return resolve(r);\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  };\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n\n\n  GoogleAuth.prototype.fromAPIKey = function (apiKey, options) {\n    options = options || {};\n    var client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  };\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._isWindows = function () {\n    var sys = this._osPlatform();\n\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Creates a file stream. Allows mocking.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._createReadStream = function (filePath) {\n    return fs.createReadStream(filePath);\n  };\n  /**\n   * Gets the current operating system platform. Allows mocking.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._osPlatform = function () {\n    return os_1.default.platform();\n  };\n  /**\n   * Determines whether a file exists. Allows mocking.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._fileExists = function (filePath) {\n    return fs.existsSync(filePath);\n  };\n  /**\n   * Joins two parts of a path. Allows mocking.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._pathJoin = function (item1, item2) {\n    return path_1.default.join(item1, item2);\n  };\n  /**\n   * Allows mocking of the path to a well-known file.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype._mockWellKnownFilePath = function (filePath) {\n    return filePath;\n  }; // Creates an Error containing the given message, and includes the message\n  // from the optional err passed in.\n\n\n  GoogleAuth.prototype.createError = function (message, err) {\n    var s = message || '';\n\n    if (err) {\n      var errorMessage = String(err);\n\n      if (errorMessage && errorMessage.length > 0) {\n        if (s.length > 0) {\n          s += ' ';\n        }\n\n        s += errorMessage;\n      }\n    }\n\n    return Error(s);\n  };\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n\n\n  GoogleAuth.prototype.getDefaultServiceProjectId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve) {\n          child_process_1.exec('gcloud config config-helper --format json', function (err, stdout, stderr) {\n            if (!err && stdout) {\n              try {\n                var projectId = JSON.parse(stdout).configuration.properties.core.project;\n                resolve(projectId);\n                return;\n              } catch (e) {// ignore errors\n              }\n            }\n\n            resolve(null);\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype.getProductionProjectId = function () {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'];\n  };\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n\n\n  GoogleAuth.prototype.getFileProjectId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var r;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.cachedCredential) {\n              // Try to read the project ID from the cached credentials file\n              return [2\n              /*return*/\n              , this.cachedCredential.projectId];\n            }\n\n            return [4\n            /*yield*/\n            , this._tryGetApplicationCredentialsFromEnvironmentVariable()];\n\n          case 1:\n            r = _a.sent();\n\n            if (r) {\n              return [2\n              /*return*/\n              , r.projectId];\n            } else {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n\n\n  GoogleAuth.prototype.getGCEProjectId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var r, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , gcpMetadata.project('project-id')];\n\n          case 1:\n            r = _a.sent();\n            return [2\n            /*return*/\n            , r.data];\n\n          case 2:\n            e_3 = _a.sent(); // Ignore any errors\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  GoogleAuth.prototype.getCredentials = function (callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(function (r) {\n        return callback(null, r);\n      }).catch(callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  };\n\n  GoogleAuth.prototype.getCredentialsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credential, isGCE, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.jsonContent) {\n              credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key\n              };\n              return [2\n              /*return*/\n              , credential];\n            }\n\n            return [4\n            /*yield*/\n            , this._checkIsGCE()];\n\n          case 1:\n            isGCE = _a.sent();\n\n            if (!isGCE) {\n              throw new Error('Unknown error.');\n            }\n\n            return [4\n            /*yield*/\n            , gcpMetadata.instance({\n              property: 'service-accounts/',\n              params: {\n                recursive: true\n              }\n            })];\n\n          case 2:\n            data = _a.sent().data;\n\n            if (!data || !data.default || !data.default.email) {\n              throw new Error('Failure from metadata server.');\n            }\n\n            return [2\n            /*return*/\n            , {\n              client_email: data.default.email\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Automatically obtain a client based on the provided configuration.  If no\n   * options were passed, use Application Default Credentials.\n   */\n\n\n  GoogleAuth.prototype.getClient = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, filePath, stream_1, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (options) {\n              this.keyFilename = options.keyFilename || options.keyFile || this.keyFilename;\n              this.scopes = options.scopes || this.scopes;\n              this.jsonContent = options.credentials || this.jsonContent;\n            }\n\n            if (!!this.cachedCredential) return [3\n            /*break*/\n            , 6];\n            if (!this.jsonContent) return [3\n            /*break*/\n            , 2];\n            _a = this;\n            return [4\n            /*yield*/\n            , this.fromJSON(this.jsonContent)];\n\n          case 1:\n            _a.cachedCredential = _c.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            if (!this.keyFilename) return [3\n            /*break*/\n            , 4];\n            filePath = path_1.default.resolve(this.keyFilename);\n            stream_1 = fs.createReadStream(filePath);\n            _b = this;\n            return [4\n            /*yield*/\n            , this.fromStreamAsync(stream_1)];\n\n          case 3:\n            _b.cachedCredential = _c.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.getApplicationDefaultAsync()];\n\n          case 5:\n            _c.sent();\n\n            _c.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            , this.cachedCredential];\n        }\n      });\n    });\n  };\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n\n\n  GoogleAuth.prototype.getAccessToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClient()];\n\n          case 1:\n            client = _a.sent();\n            return [4\n            /*yield*/\n            , client.getAccessToken()];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent().token];\n        }\n      });\n    });\n  };\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n\n\n  GoogleAuth.prototype.getRequestHeaders = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClient()];\n\n          case 1:\n            client = _a.sent();\n            return [4\n            /*yield*/\n            , client.getRequestMetadata(url)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent().headers];\n        }\n      });\n    });\n  };\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n\n\n  GoogleAuth.prototype.authorizeRequest = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, client, headers;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            opts = opts || {};\n            url = opts.url || opts.uri;\n            return [4\n            /*yield*/\n            , this.getClient()];\n\n          case 1:\n            client = _a.sent();\n            return [4\n            /*yield*/\n            , client.getRequestMetadata(url)];\n\n          case 2:\n            headers = _a.sent().headers;\n            opts.headers = Object.assign(opts.headers || {}, headers);\n            return [2\n            /*return*/\n            , opts];\n        }\n      });\n    });\n  };\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // tslint:disable-next-line no-any\n\n\n  GoogleAuth.prototype.request = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClient()];\n\n          case 1:\n            client = _a.sent();\n            return [2\n            /*return*/\n            , client.request(opts)];\n        }\n      });\n    });\n  };\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n\n\n  GoogleAuth.prototype.getEnv = function () {\n    return envDetect_1.getEnv();\n  };\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n\n\n  GoogleAuth.prototype.sign = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client, sign, projectId, creds, id, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClient()];\n\n          case 1:\n            client = _a.sent();\n\n            if (client instanceof jwtclient_1.JWT && client.key) {\n              sign = crypto_1.default.createSign('RSA-SHA256');\n              sign.update(data);\n              return [2\n              /*return*/\n              , sign.sign(client.key, 'base64')];\n            }\n\n            return [4\n            /*yield*/\n            , this.getProjectId()];\n\n          case 2:\n            projectId = _a.sent();\n\n            if (!projectId) {\n              throw new Error('Cannot sign data without a project ID.');\n            }\n\n            return [4\n            /*yield*/\n            , this.getCredentials()];\n\n          case 3:\n            creds = _a.sent();\n\n            if (!creds.client_email) {\n              throw new Error('Cannot sign data without `client_email`.');\n            }\n\n            id = \"projects/\" + projectId + \"/serviceAccounts/\" + creds.client_email;\n            return [4\n            /*yield*/\n            , this.request({\n              method: 'POST',\n              url: \"https://iam.googleapis.com/v1/\" + id + \":signBlob\",\n              data: {\n                bytesToSign: Buffer.from(data).toString('base64')\n              }\n            })];\n\n          case 4:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.data.signature];\n        }\n      });\n    });\n  };\n  /**\n   * Export DefaultTransporter as a static property of the class.\n   */\n\n\n  GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n  return GoogleAuth;\n}();\n\nexports.GoogleAuth = GoogleAuth;","map":null,"metadata":{},"sourceType":"script"}