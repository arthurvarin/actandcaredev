{"ast":null,"code":"import _regeneratorRuntime from 'babel-runtime/regenerator';\nimport _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';\nvar _this = undefined; // Default presence ahead function. Used when node does not provides one.\n\nvar defaultPresenceAhead = function defaultPresenceAhead(element) {\n  return function (height) {\n    return Math.min(element.height, height);\n  };\n}; // Calculates the presence ahead or an array of nodes, given the available height.\n\n\nvar getPresenceAhead = function getPresenceAhead(elements, height) {\n  var result = 0;\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    var isElementInside = height > element.top;\n    var presenceAhead = element.presenceAhead || defaultPresenceAhead(element);\n\n    if (element && isElementInside) {\n      result += presenceAhead(height - element.top);\n    }\n  }\n\n  return result;\n}; // Clone element recursively including children\n\n\nvar cloneRecursively = function cloneRecursively(node) {\n  var clone = node.clone();\n\n  if (node.children && node.children.length > 0) {\n    node.children.forEach(function (child) {\n      return clone.appendChild(cloneRecursively(child));\n    });\n  }\n\n  return clone;\n}; // Wrap nodes tree in fixed height page, and returns exceedings separately.\n\n\nvar wrap = function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(elements, height, pageNumber) {\n    var nextPageElements, elementsToBeRemoved, i, element, futureElements, isElementOutside, elementShouldSplit, elementShouldBreak, presenceAhead, clone, newFutureElements, nonFixedElements, _ret;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            nextPageElements = [];\n            elementsToBeRemoved = [];\n            i = 0;\n\n          case 3:\n            if (!(i < elements.length)) {\n              _context2.next = 37;\n              break;\n            }\n\n            element = elements[i];\n\n            if (!element.nodeWillWrap) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 8;\n            return element.nodeWillWrap({\n              pageNumber: pageNumber\n            });\n\n          case 8:\n            futureElements = elements.slice(i + 1);\n            isElementOutside = height <= element.top;\n            elementShouldSplit = height < element.top + element.height;\n            elementShouldBreak = element.break || !element.wrap && elementShouldSplit; // If element is fixed, we add it both to the current page\n            // and to all future pages to come.\n\n            if (!element.fixed) {\n              _context2.next = 15;\n              break;\n            }\n\n            nextPageElements.push(cloneRecursively(element));\n            return _context2.abrupt(\"continue\", 34);\n\n          case 15:\n            if (!isElementOutside) {\n              _context2.next = 19;\n              break;\n            }\n\n            nextPageElements.push(cloneRecursively(element));\n            elementsToBeRemoved.push(element);\n            return _context2.abrupt(\"continue\", 34);\n\n          case 19:\n            // Checks if element has more than the minimun presence ahead on that page.\n            // If not, we break the page in this element.\n            if (element.minPresenceAhead) {\n              presenceAhead = getPresenceAhead(futureElements, height);\n              if (presenceAhead < element.minPresenceAhead) elementShouldBreak = true;\n            } // Element can break based on many conditions: if has the break flag,\n            // if has the wrap flag as false and should be splitted or didn't have enough\n            // presence ahead. Either way, the element get's relocated on the next page,\n            // as well as all other next elements.\n\n\n            if (!elementShouldBreak) {\n              _context2.next = 29;\n              break;\n            }\n\n            clone = cloneRecursively(element);\n            newFutureElements = futureElements.map(function (element) {\n              return cloneRecursively(element);\n            });\n            nonFixedElements = futureElements.filter(function (element) {\n              return !element.fixed;\n            });\n            clone.top = 0;\n            clone.break = false;\n            nextPageElements.push.apply(nextPageElements, [clone].concat(newFutureElements));\n            elementsToBeRemoved.push.apply(elementsToBeRemoved, [element].concat(nonFixedElements));\n            return _context2.abrupt(\"break\", 37);\n\n          case 29:\n            if (!elementShouldSplit) {\n              _context2.next = 34;\n              break;\n            }\n\n            return _context2.delegateYield(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee() {\n              var clone, remainingHeight, wrappedChildren;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      clone = element.clone();\n                      remainingHeight = height - element.top;\n\n                      if (!(element.children && element.children.length > 0)) {\n                        _context.next = 7;\n                        break;\n                      }\n\n                      _context.next = 5;\n                      return wrap(element.children, remainingHeight);\n\n                    case 5:\n                      wrappedChildren = _context.sent;\n                      wrappedChildren.forEach(function (child) {\n                        return clone.appendChild(child);\n                      });\n\n                    case 7:\n                      element.onNodeSplit(remainingHeight, clone);\n                      nextPageElements.push(clone);\n                      return _context.abrupt(\"return\", \"continue\");\n\n                    case 10:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, _this);\n            })(), \"t0\", 31);\n\n          case 31:\n            _ret = _context2.t0;\n\n            if (!(_ret === \"continue\")) {\n              _context2.next = 34;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 34);\n\n          case 34:\n            i++;\n            _context2.next = 3;\n            break;\n\n          case 37:\n            // Remove elements that didn't fit inside page\n            // We do this here to not interfer with upper elements iteration\n            elementsToBeRemoved.forEach(function (element) {\n              return element.remove();\n            });\n            return _context2.abrupt(\"return\", nextPageElements);\n\n          case 39:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, _this);\n  }));\n\n  return function wrap(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Wrap nodes tree in equal sized subpages\n\n\nvar wrapPages = function () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(nodes, height, pageIndex) {\n    var wrapResult, nextPage, hasOnlyFixedChilds, nextPages;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return wrap(nodes, height, pageIndex++);\n\n          case 2:\n            wrapResult = _context3.sent;\n            nextPage = wrapResult[0];\n\n            if (!(!nextPage || nextPage.isEmpty())) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", nodes);\n\n          case 6:\n            hasOnlyFixedChilds = nextPage.children.length > 0 && nextPage.children.every(function (c) {\n              return c.fixed;\n            });\n\n            if (!hasOnlyFixedChilds) {\n              _context3.next = 9;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", nodes);\n\n          case 9:\n            _context3.next = 11;\n            return wrapPages([nextPage], height, pageIndex);\n\n          case 11:\n            nextPages = _context3.sent;\n            return _context3.abrupt(\"return\", [].concat(nodes, nextPages));\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, _this);\n  }));\n\n  return function wrapPages(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar wrapPage = function () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(page, height) {\n    var pageIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var pages;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (page) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", []);\n\n          case 2:\n            _context4.next = 4;\n            return wrapPages([cloneRecursively(page)], height, pageIndex);\n\n          case 4:\n            pages = _context4.sent;\n            return _context4.abrupt(\"return\", pages);\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, _this);\n  }));\n\n  return function wrapPage(_x8, _x9) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport { wrap };\nexport default wrapPage;","map":null,"metadata":{},"sourceType":"module"}