{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2016, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\n\nvar RetryOptions = function RetryOptions(retryCodes, backoffSettings) {\n  _classCallCheck(this, RetryOptions);\n\n  this.retryCodes = retryCodes;\n  this.backoffSettings = backoffSettings;\n};\n\nexports.RetryOptions = RetryOptions;\n\nvar CallSettings =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  function CallSettings(settings) {\n    _classCallCheck(this, CallSettings);\n\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate = 'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n    this.longrunning = 'longrunning' in settings ? settings.longrunning : null;\n    this.promise = 'promise' in settings ? settings.promise : Promise;\n  }\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n\n\n  _createClass(CallSettings, [{\n    key: \"merge\",\n    value: function merge(options) {\n      if (!options) {\n        return new CallSettings(this);\n      }\n\n      var timeout = this.timeout;\n      var retry = this.retry;\n      var autoPaginate = this.autoPaginate;\n      var pageToken = this.pageToken;\n      var maxResults = this.maxResults;\n      var otherArgs = this.otherArgs;\n      var isBundling = this.isBundling;\n      var longrunning = this.longrunning;\n      var promise = this.promise;\n\n      if ('timeout' in options) {\n        timeout = options.timeout;\n      }\n\n      if ('retry' in options) {\n        retry = options.retry;\n      }\n\n      if ('autoPaginate' in options && !options.autoPaginate) {\n        autoPaginate = false;\n      }\n\n      if ('pageToken' in options) {\n        autoPaginate = false;\n        pageToken = options.pageToken;\n      }\n\n      if ('maxResults' in options) {\n        maxResults = options.maxResults;\n      }\n\n      if ('otherArgs' in options) {\n        otherArgs = {}; // tslint:disable-next-line forin\n\n        for (var key in this.otherArgs) {\n          otherArgs[key] = this.otherArgs[key];\n        } // tslint:disable-next-line forin\n\n\n        for (var optionsKey in options.otherArgs) {\n          otherArgs[optionsKey] = options.otherArgs[optionsKey];\n        }\n      }\n\n      if ('isBundling' in options) {\n        isBundling = options.isBundling;\n      }\n\n      if ('maxRetries' in options) {\n        retry.backoffSettings.maxRetries = options.maxRetries;\n        delete retry.backoffSettings.totalTimeoutMillis;\n      }\n\n      if ('longrunning' in options) {\n        longrunning = options.longrunning;\n      }\n\n      if ('promise' in options) {\n        promise = options.promise;\n      }\n\n      return new CallSettings({\n        timeout: timeout,\n        retry: retry,\n        bundleOptions: this.bundleOptions,\n        longrunning: longrunning,\n        autoPaginate: autoPaginate,\n        pageToken: pageToken,\n        maxResults: maxResults,\n        otherArgs: otherArgs,\n        isBundling: isBundling,\n        promise: promise\n      });\n    }\n  }]);\n\n  return CallSettings;\n}();\n\nexports.CallSettings = CallSettings;\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {String[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\n\nfunction createRetryOptions(retryCodes, backoffSettings) {\n  return {\n    retryCodes: retryCodes,\n    backoffSettings: backoffSettings\n  };\n}\n\nexports.createRetryOptions = createRetryOptions;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\n\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n  return {\n    initialRetryDelayMillis: initialRetryDelayMillis,\n    retryDelayMultiplier: retryDelayMultiplier,\n    maxRetryDelayMillis: maxRetryDelayMillis,\n    initialRpcTimeoutMillis: initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier: rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis: maxRpcTimeoutMillis,\n    totalTimeoutMillis: totalTimeoutMillis\n  };\n}\n\nexports.createBackoffSettings = createBackoffSettings;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\n\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n  return {\n    initialRetryDelayMillis: initialRetryDelayMillis,\n    retryDelayMultiplier: retryDelayMultiplier,\n    maxRetryDelayMillis: maxRetryDelayMillis,\n    initialRpcTimeoutMillis: initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier: rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis: maxRpcTimeoutMillis,\n    maxRetries: maxRetries\n  };\n}\n\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\n\nfunction createBundleOptions(options) {\n  var params = ['element_count_threshold', 'element_count_limit', 'request_byte_threshold', 'request_byte_limit', 'delay_threshold_millis'];\n  params.forEach(function (param) {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(\"\".concat(param, \" should be a number\"));\n    }\n  });\n  var elementCountThreshold = options.element_count_threshold || 0;\n  var elementCountLimit = options.element_count_limit || 0;\n  var requestByteThreshold = options.request_byte_threshold || 0;\n  var requestByteLimit = options.request_byte_limit || 0;\n  var delayThreshold = options.delay_threshold_millis || 0;\n\n  if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {\n    throw new Error('one threshold should be > 0');\n  }\n\n  return {\n    elementCountThreshold: elementCountThreshold,\n    elementCountLimit: elementCountLimit,\n    requestByteThreshold: requestByteThreshold,\n    requestByteLimit: requestByteLimit,\n    delayThreshold: delayThreshold\n  };\n}\n\nexports.createBundleOptions = createBundleOptions;\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\n\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n  if (!methodConfig) {\n    return null;\n  }\n\n  var codes = null;\n\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    var retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(function (name) {\n      return Number(retryNames[name]);\n    });\n  }\n\n  var backoffSettings = null;\n\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    var params = retryParams[methodConfig.retry_params_name];\n    backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n  }\n\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\n\n\nfunction mergeRetryOptions(retry, overrides) {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  var codes = retry.retryCodes;\n\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n\n  var backoffSettings = retry.backoffSettings;\n\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\n\n\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs, promise) {\n  otherArgs = otherArgs || {}; // tslint:disable-next-line no-any\n\n  var defaults = {};\n  var serviceConfig = (clientConfig.interfaces || {})[serviceName];\n\n  if (!serviceConfig) {\n    return null;\n  }\n\n  var overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  var methods = serviceConfig.methods;\n  var overridingMethods = overrides.methods || {}; // tslint:disable-next-line forin\n\n  for (var methodName in methods) {\n    var methodConfig = methods[methodName];\n    var jsName = methodName[0].toLowerCase() + methodName.slice(1);\n    var retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n    var bundlingConfig = methodConfig.bundling;\n    var timeout = methodConfig.timeout_millis;\n\n    if (methodName in overridingMethods) {\n      var overridingMethod = overridingMethods[methodName];\n\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n\n      retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout: timeout,\n      retry: retry,\n      bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,\n      otherArgs: otherArgs,\n      promise: promise || Promise\n    });\n  }\n\n  return defaults;\n}\n\nexports.constructSettings = constructSettings;","map":null,"metadata":{},"sourceType":"script"}