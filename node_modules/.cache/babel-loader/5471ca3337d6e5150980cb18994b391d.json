{"ast":null,"code":"\"use strict\";\n/*\n *\n * Copyright 2016, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = require(\"util\");\n/* constants used in the pegjs parser */\n\n\nexports.BINDING = 1;\nexports.END_BINDING = 2;\nexports.TERMINAL = 3;\n/**\n * Checks that segments only has one terminal segment that is a path wildcard.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n * @throws {TypeError} if there are too many\n */\n\nfunction allowOnePathWildcard(segments) {\n  var hasPathWildcard = false;\n\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n\n    if (s.kind !== exports.TERMINAL || s.literal !== '**') {\n      continue;\n    }\n\n    if (hasPathWildcard) {\n      var tooManyWildcards = 'cannot contain more than one path wildcard';\n      throw new TypeError(tooManyWildcards);\n    }\n\n    hasPathWildcard = true;\n  }\n}\n/**\n * Counts the number of terminal segments.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n * @return {number} the number of terminal segments in the template\n */\n\n\nfunction countTerminals(segments) {\n  return segments.filter(function (x) {\n    return x.kind === exports.TERMINAL;\n  }).length;\n}\n/**\n * Updates missing literals of each of the binding segments.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n */\n\n\nfunction updateBindingLiterals(segments) {\n  var bindingIndex = 0;\n  segments.forEach(function (s) {\n    if (s.kind === exports.BINDING && !s.literal) {\n      s.literal = util.format('$%d', bindingIndex);\n      bindingIndex += 1;\n    }\n  });\n}\n/**\n * Completes the parsing of the segments\n *\n * Validates them, and transforms them into the object used by the\n * PathTemplate class.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n * @param {Object} initializes the attributes of a PathTemplate\n * @return {Object} Returns segments and size\n * @throws {TypeError} if multiple path wildcards exist\n */\n\n\nfunction finishParse(segments) {\n  allowOnePathWildcard(segments);\n  updateBindingLiterals(segments);\n  return {\n    segments: segments,\n    size: countTerminals(segments)\n  };\n}\n\nexports.finishParse = finishParse;","map":null,"metadata":{},"sourceType":"script"}