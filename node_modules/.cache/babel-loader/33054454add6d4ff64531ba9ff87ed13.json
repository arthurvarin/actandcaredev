{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * Internals of a Database instance.\n */\n\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  function DatabaseInternals() {\n    this.databases = {};\n  }\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    for (var _i = 0, _a = Object.keys(this.databases); _i < _a.length; _i++) {\n      var dbUrl = _a[_i];\n      var db = this.databases[dbUrl];\n      db.INTERNAL.delete();\n    }\n\n    return Promise.resolve(undefined);\n  };\n\n  return DatabaseInternals;\n}();\n\nvar DatabaseService =\n/** @class */\nfunction () {\n  function DatabaseService(app) {\n    this.INTERNAL = new DatabaseInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'First argument passed to admin.database() must be a valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n\n  Object.defineProperty(DatabaseService.prototype, \"app\", {\n    /**\n     * Returns the app associated with this DatabaseService instance.\n     *\n     * @return {FirebaseApp} The app associated with this DatabaseService instance.\n     */\n    get: function get() {\n      return this.appInternal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DatabaseService.prototype.getDatabase = function (url) {\n    var dbUrl = this.ensureUrl(url);\n\n    if (!validator.isNonEmptyString(dbUrl)) {\n      throw new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'Database URL must be a valid, non-empty URL string.'\n      });\n    }\n\n    var db = this.INTERNAL.databases[dbUrl];\n\n    if (typeof db === 'undefined') {\n      var rtdb = require('@firebase/database');\n\n      var version = require('../../package.json').version;\n\n      db = rtdb.initStandalone(this.appInternal, dbUrl, version).instance;\n      this.INTERNAL.databases[dbUrl] = db;\n    }\n\n    return db;\n  };\n\n  DatabaseService.prototype.ensureUrl = function (url) {\n    if (typeof url !== 'undefined') {\n      return url;\n    } else if (typeof this.appInternal.options.databaseURL !== 'undefined') {\n      return this.appInternal.options.databaseURL;\n    }\n\n    throw new error_1.FirebaseDatabaseError({\n      code: 'invalid-argument',\n      message: 'Can\\'t determine Firebase Database URL.'\n    });\n  };\n\n  return DatabaseService;\n}();\n\nexports.DatabaseService = DatabaseService;","map":null,"metadata":{},"sourceType":"script"}