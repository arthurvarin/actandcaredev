{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar reference_1 = require(\"./reference\");\n\nvar util_1 = require(\"./util\");\n\nvar util_2 = require(\"./util\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\n\n\nvar READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\n/*!\n * Transactions can be retried if the initial stream opening errors out.\n */\n\nvar ALLOW_RETRIES = true;\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class\n */\n\nvar Transaction =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @private\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   * @param previousTransaction If available, the failed transaction that is\n   * being retried.\n   */\n  function Transaction(firestore, previousTransaction) {\n    _classCallCheck(this, Transaction);\n\n    this._firestore = firestore;\n    this._validator = firestore._validator;\n    this._previousTransaction = previousTransaction;\n    this._writeBatch = firestore.batch();\n    this._requestTag = previousTransaction ? previousTransaction.requestTag : util_2.requestTag();\n  }\n  /**\n   * Retrieve a document or a query result from the database. Holds a\n   * pessimistic lock on all returned documents.\n   *\n   * @param {DocumentReference|Query} refOrQuery The document or query to\n   * return.\n   * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n   * QuerySnapshot for the returned documents.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"get\",\n    value: function get(refOrQuery) {\n      if (!this._writeBatch.isEmpty) {\n        throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n      }\n\n      if (refOrQuery instanceof reference_1.DocumentReference) {\n        return this._firestore.getAll_([refOrQuery],\n        /* fieldMask= */\n        null, this._requestTag, this._transactionId).then(function (res) {\n          return Promise.resolve(res[0]);\n        });\n      }\n\n      if (refOrQuery instanceof reference_1.Query) {\n        return refOrQuery._get(this._transactionId);\n      }\n\n      throw new Error('Argument \"refOrQuery\" must be a DocumentRef or a Query.');\n    }\n    /**\n     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n     * all returned documents.\n     *\n     * @param {DocumentReference} documentRef A `DocumentReference` to receive.\n     * @param {Array.<DocumentReference|ReadOptions>} moreDocumentRefsOrReadOptions\n     * Additional `DocumentReferences` to receive, followed by an optional field\n     * mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let firstDoc = firestore.doc('col/doc1');\n     * let secondDoc = firestore.doc('col/doc2');\n     * let resultDoc = firestore.doc('col/doc3');\n     *\n     * firestore.runTransaction(transaction => {\n     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n     *     transaction.set(resultDoc, {\n     *       sum: docs[1].get('count') + docs[2].get('count')\n     *     });\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(documentRef) {\n      for (var _len = arguments.length, moreDocumentRefsOrReadOptions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        moreDocumentRefsOrReadOptions[_key - 1] = arguments[_key];\n      }\n\n      if (!this._writeBatch.isEmpty) {\n        throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n      }\n\n      this._validator.minNumberOfArguments('Transaction.getAll', arguments, 1);\n\n      var _util_1$parseGetAllAr = util_1.parseGetAllArguments(this._validator, [documentRef].concat(moreDocumentRefsOrReadOptions)),\n          documents = _util_1$parseGetAllAr.documents,\n          fieldMask = _util_1$parseGetAllAr.fieldMask;\n\n      return this._firestore.getAll_(documents, fieldMask, this._requestTag, this._transactionId);\n    }\n    /**\n     * Create the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The operation will\n     * fail the transaction if a document exists at the specified location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object data to serialize as the document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (!doc.exists) {\n     *       transaction.create(documentRef, { foo: 'bar' });\n     *     }\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(documentRef, data) {\n      this._writeBatch.create(documentRef, data);\n\n      return this;\n    }\n    /**\n     * Writes to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n     * existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {DocumentData} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.set(documentRef, { foo: 'bar' });\n     *   return Promise.resolve();\n     * });\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._writeBatch.set(documentRef, data, options);\n\n      return this;\n    }\n    /**\n     * Updates fields in the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The update will\n     * fail if applied to a document that does not exist.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to to enforce on this update.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(documentRef, dataOrField) {\n      for (var _len2 = arguments.length, preconditionOrValues = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        preconditionOrValues[_key2 - 2] = arguments[_key2];\n      }\n\n      this._validator.minNumberOfArguments('update', arguments, 2);\n\n      preconditionOrValues = Array.prototype.slice.call(arguments, 2);\n\n      this._writeBatch.update.apply(this._writeBatch, [documentRef, dataOrField].concat(preconditionOrValues));\n\n      return this;\n    }\n    /**\n     * Deletes the document referred to by the provided [DocumentReference]\n     * {@link DocumentReference}.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the transaction if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.delete(documentRef);\n     *   return Promise.resolve();\n     * });\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef, precondition) {\n      this._writeBatch.delete(documentRef, precondition);\n\n      return this;\n    }\n    /**\n     * Starts a transaction and obtains the transaction id from the server.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      var _this = this;\n\n      var request = {\n        database: this._firestore.formattedName\n      };\n\n      if (this._previousTransaction) {\n        // tslint:disable-next-line no-any\n        request.options = {\n          readWrite: {\n            retryTransaction: this._previousTransaction._transactionId\n          }\n        };\n      }\n\n      return this._firestore.request('beginTransaction', request, this._requestTag, ALLOW_RETRIES).then(function (resp) {\n        _this._transactionId = resp.transaction;\n      });\n    }\n    /**\n     * Commits all queued-up changes in this transaction and releases all locks.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return this._writeBatch.commit_({\n        transactionId: this._transactionId,\n        requestTag: this._requestTag\n      }).then(function () {});\n    }\n    /**\n     * Releases all locks and rolls back this transaction.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      var request = {\n        database: this._firestore.formattedName,\n        transaction: this._transactionId\n      };\n      return this._firestore.request('rollback', request, this._requestTag,\n      /* allowRetries= */\n      false);\n    }\n    /**\n     * Returns the tag to use with with all request for this Transaction.\n     * @private\n     * @return A unique client-generated identifier for this transaction.\n     */\n\n  }, {\n    key: \"requestTag\",\n    get: function get() {\n      return this._requestTag;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nexports.Transaction = Transaction;","map":null,"metadata":{},"sourceType":"script"}