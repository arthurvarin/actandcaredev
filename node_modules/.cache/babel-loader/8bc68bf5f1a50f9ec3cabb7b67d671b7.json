{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Run2 = require('./Run');\n\nvar _Run3 = _interopRequireDefault(_Run2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar GlyphRun = function (_Run) {\n  (0, _inherits3.default)(GlyphRun, _Run);\n\n  function GlyphRun(start, end, attributes, glyphs, positions, stringIndices, glyphIndices, preScaled) {\n    (0, _classCallCheck3.default)(this, GlyphRun);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Run.call(this, start, end, attributes));\n\n    _this.glyphs = glyphs || [];\n    _this.positions = positions || [];\n    _this.glyphIndices = glyphIndices || [];\n    _this.stringIndices = stringIndices || [];\n    _this.scale = attributes.fontSize / attributes.font.unitsPerEm;\n\n    if (!preScaled) {\n      _this.positions = _this.positions.map(function (pos, index) {\n        var xAdvance = index === _this.positions.length - 1 ? pos.xAdvance * _this.scale : pos.xAdvance * _this.scale + attributes.characterSpacing;\n        return {\n          xAdvance: xAdvance,\n          yAdvance: pos.yAdvance * _this.scale,\n          xOffset: pos.xOffset * _this.scale,\n          yOffset: pos.yOffset * _this.scale\n        };\n      });\n    }\n\n    return _this;\n  }\n\n  GlyphRun.prototype.slice = function slice(start, end) {\n    var _this2 = this;\n\n    var glyphs = this.glyphs.slice(start, end);\n    var positions = this.positions.slice(start, end);\n    var stringIndices = this.stringIndices.slice(start, end);\n    var glyphIndices = this.glyphIndices.filter(function (i) {\n      return i >= start && i < end;\n    });\n    glyphIndices = glyphIndices.map(function (index) {\n      return index - start;\n    });\n    stringIndices = stringIndices.map(function (index) {\n      return index - _this2.stringIndices[start];\n    });\n    start += this.start;\n    end += this.start;\n    end = Math.min(end, this.end);\n    return new GlyphRun(start, end, this.attributes, glyphs, positions, stringIndices, glyphIndices, true);\n  };\n\n  GlyphRun.prototype.copy = function copy() {\n    return new GlyphRun(this.start, this.end, this.attributes, [].concat(this.glyphs), [].concat(this.positions), [].concat(this.stringIndices), [].concat(this.glyphIndices), true);\n  };\n\n  (0, _createClass3.default)(GlyphRun, [{\n    key: 'length',\n    get: function get() {\n      return this.end - this.start;\n    }\n  }, {\n    key: 'stringStart',\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: 'stringEnd',\n    get: function get() {\n      return this.glyphIndices.length - 1;\n    }\n  }, {\n    key: 'advanceWidth',\n    get: function get() {\n      var width = 0;\n\n      for (var _iterator = this.positions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var position = _ref;\n        width += position.xAdvance;\n      }\n\n      return width;\n    }\n  }, {\n    key: 'ascent',\n    get: function get() {\n      var ascent = this.attributes.font.ascent * this.scale;\n\n      if (this.attributes.attachment) {\n        return Math.max(ascent, this.attributes.attachment.height);\n      }\n\n      return ascent;\n    }\n  }, {\n    key: 'descent',\n    get: function get() {\n      return this.attributes.font.descent * this.scale;\n    }\n  }, {\n    key: 'lineGap',\n    get: function get() {\n      return this.attributes.font.lineGap * this.scale;\n    }\n  }, {\n    key: 'height',\n    get: function get() {\n      return this.attributes.lineHeight || this.ascent - this.descent + this.lineGap;\n    }\n  }]);\n  return GlyphRun;\n}(_Run3.default);\n\nexports.default = GlyphRun;","map":null,"metadata":{},"sourceType":"script"}