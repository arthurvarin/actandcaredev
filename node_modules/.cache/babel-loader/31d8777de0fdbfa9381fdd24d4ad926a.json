{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2016, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ended = require(\"is-stream-ended\");\n\nvar stream_1 = require(\"stream\");\n\nvar api_callable_1 = require(\"./api_callable\");\n\nvar PagedIteration =\n/*#__PURE__*/\nfunction (_api_callable_1$Norma) {\n  _inherits(PagedIteration, _api_callable_1$Norma);\n\n  /**\n   * Creates an API caller that returns a stream to performs page-streaming.\n   *\n   * @private\n   * @constructor\n   * @param {PageDescriptor} pageDescriptor - indicates the structure\n   *   of page streaming to be performed.\n   */\n  function PagedIteration(pageDescriptor) {\n    var _this;\n\n    _classCallCheck(this, PagedIteration);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PagedIteration).call(this));\n    _this.pageDescriptor = pageDescriptor;\n    return _this;\n  }\n\n  _createClass(PagedIteration, [{\n    key: \"createActualCallback\",\n    value: function createActualCallback(request, callback) {\n      var self = this;\n      return function fetchNextPageToken(err, response) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var resources = response[self.pageDescriptor.resourceField];\n        var pageToken = response[self.pageDescriptor.responsePageTokenField];\n\n        if (pageToken) {\n          request[self.pageDescriptor.requestPageTokenField] = pageToken;\n          callback(err, resources, request, response);\n        } else {\n          callback(err, resources, null, response);\n        }\n      };\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(func) {\n      var self = this;\n      return function wrappedCall(argument, metadata, options, callback) {\n        return func(argument, metadata, options, self.createActualCallback(argument, callback));\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(settings, callback) {\n      return api_callable_1.NormalApiCaller.prototype.init.call(this, settings, callback);\n    }\n  }, {\n    key: \"call\",\n    value: function call(apiCall, argument, settings, canceller) {\n      argument = Object.assign({}, argument);\n\n      if (settings.pageToken) {\n        argument[this.pageDescriptor.requestPageTokenField] = settings.pageToken;\n      }\n\n      if (settings.pageSize) {\n        argument[this.pageDescriptor.requestPageSizeField] = settings.pageSize;\n      }\n\n      if (!settings.autoPaginate) {\n        api_callable_1.NormalApiCaller.prototype.call.call(this, apiCall, argument, settings, canceller);\n        return;\n      }\n\n      var maxResults = settings.maxResults || -1;\n      var allResources = [];\n\n      function pushResources(err, resources, next) {\n        if (err) {\n          canceller.callback(err);\n          return;\n        }\n\n        for (var i = 0; i < resources.length; ++i) {\n          allResources.push(resources[i]);\n\n          if (allResources.length === maxResults) {\n            next = null;\n            break;\n          }\n        }\n\n        if (!next) {\n          canceller.callback(null, allResources);\n          return;\n        }\n\n        setImmediate(apiCall, next, pushResources);\n      }\n\n      setImmediate(apiCall, argument, pushResources);\n    }\n  }]);\n\n  return PagedIteration;\n}(api_callable_1.NormalApiCaller);\n\nexports.PagedIteration = PagedIteration;\n\nvar PageDescriptor =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Describes the structure of a page-streaming call.\n   *\n   * @property {String} requestPageTokenField\n   * @property {String} responsePageTokenField\n   * @property {String} resourceField\n   *\n   * @param {String} requestPageTokenField - The field name of the page token in\n   *   the request.\n   * @param {String} responsePageTokenField - The field name of the page token in\n   *   the response.\n   * @param {String} resourceField - The resource field name.\n   *\n   * @constructor\n   */\n  function PageDescriptor(requestPageTokenField, responsePageTokenField, resourceField) {\n    _classCallCheck(this, PageDescriptor);\n\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n  /**\n   * Creates a new object Stream which emits the resource on 'data' event.\n   * @private\n   * @param {ApiCall} apiCall - the callable object.\n   * @param {Object} request - the request object.\n   * @param {CallOptions=} options - the call options to customize the api call.\n   * @return {Stream} - a new object Stream.\n   */\n\n\n  _createClass(PageDescriptor, [{\n    key: \"createStream\",\n    value: function createStream(apiCall, request, options) {\n      var stream = new stream_1.PassThrough({\n        objectMode: true\n      });\n      options = Object.assign({}, options, {\n        autoPaginate: false\n      });\n      var maxResults = 'maxResults' in options ? options.maxResults : -1;\n      var pushCount = 0;\n      var started = false;\n\n      function callback(err, resources, next) {\n        if (err) {\n          stream.emit('error', err);\n          return;\n        }\n\n        for (var i = 0; i < resources.length; ++i) {\n          if (ended(stream)) {\n            return;\n          }\n\n          if (resources[i] === null) {\n            continue;\n          }\n\n          stream.push(resources[i]);\n          pushCount++;\n\n          if (pushCount === maxResults) {\n            stream.end();\n          }\n        }\n\n        if (ended(stream)) {\n          return;\n        }\n\n        if (!next) {\n          stream.end();\n          return;\n        } // When pageToken is specified in the original options, it will overwrite\n        // the page token field in the next request. Therefore it must be cleared.\n\n\n        if ('pageToken' in options) {\n          delete options.pageToken;\n        }\n\n        if (stream.isPaused()) {\n          request = next;\n          started = false;\n        } else {\n          setImmediate(apiCall, next, options, callback);\n        }\n      }\n\n      stream.on('resume', function () {\n        if (!started) {\n          started = true;\n          apiCall(request, options, callback);\n        }\n      });\n      return stream;\n    }\n    /**\n     * Returns a new API caller.\n     * @private\n     * @return {PageStreamable} - the page streaming caller.\n     */\n\n  }, {\n    key: \"apiCaller\",\n    value: function apiCaller() {\n      return new PagedIteration(this);\n    }\n  }]);\n\n  return PageDescriptor;\n}();\n\nexports.PageDescriptor = PageDescriptor;","map":null,"metadata":{},"sourceType":"script"}