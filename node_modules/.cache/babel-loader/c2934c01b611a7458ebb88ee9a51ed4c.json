{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Message;\n\nvar util = require(\"./util/minimal\");\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object = object\r\n */\n\n\nfunction Message(properties) {\n  // not used internally\n  if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {\n    this[keys[i]] = properties[keys[i]];\n  }\n}\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\n\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.create = function create(properties) {\n  return this.$type.create(properties);\n};\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.encode = function encode(message, writer) {\n  return this.$type.encode(message, writer);\n};\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.$type.encodeDelimited(message, writer);\n};\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.decode = function decode(reader) {\n  return this.$type.decode(reader);\n};\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.decodeDelimited = function decodeDelimited(reader) {\n  return this.$type.decodeDelimited(reader);\n};\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\n\n\nMessage.verify = function verify(message) {\n  return this.$type.verify(message);\n};\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.fromObject = function fromObject(object) {\n  return this.$type.fromObject(object);\n};\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\n\n\nMessage.toObject = function toObject(message, options) {\n  return this.$type.toObject(message, options);\n};\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\n\n\nMessage.prototype.toJSON = function toJSON() {\n  return this.$type.toObject(this, util.toJSONOptions);\n};\n/*eslint-enable valid-jsdoc*/","map":null,"metadata":{},"sourceType":"script"}