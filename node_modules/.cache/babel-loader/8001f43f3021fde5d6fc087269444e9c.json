{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [0, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gcpMetadata = __importStar(require(\"gcp-metadata\"));\n\nvar GCPEnv;\n\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\n\nvar env;\n\nfunction clear() {\n  env = undefined;\n}\n\nexports.clear = clear;\n\nfunction getEnv() {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!env) return [3\n          /*break*/\n          , 6];\n          if (!isAppEngine()) return [3\n          /*break*/\n          , 1];\n          env = GCPEnv.APP_ENGINE;\n          return [3\n          /*break*/\n          , 6];\n\n        case 1:\n          if (!isCloudFunction()) return [3\n          /*break*/\n          , 2];\n          env = GCPEnv.CLOUD_FUNCTIONS;\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          return [4\n          /*yield*/\n          , isKubernetesEngine()];\n\n        case 3:\n          if (!_a.sent()) return [3\n          /*break*/\n          , 4];\n          env = GCPEnv.KUBERNETES_ENGINE;\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          return [4\n          /*yield*/\n          , isComputeEngine()];\n\n        case 5:\n          if (_a.sent()) {\n            env = GCPEnv.COMPUTE_ENGINE;\n          } else {\n            env = GCPEnv.NONE;\n          }\n\n          _a.label = 6;\n\n        case 6:\n          return [2\n          /*return*/\n          , env];\n      }\n    });\n  });\n}\n\nexports.getEnv = getEnv;\n\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\n\nfunction isCloudFunction() {\n  return !!process.env.FUNCTION_NAME;\n}\n\nfunction isKubernetesEngine() {\n  return __awaiter(this, void 0, void 0, function () {\n    var e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , gcpMetadata.instance('attributes/cluster-name')];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , true];\n\n        case 2:\n          e_1 = _a.sent();\n          return [2\n          /*return*/\n          , false];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction isComputeEngine() {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , gcpMetadata.isAvailable()];\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}