{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Field; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum = require(\"./enum\"),\n    types = require(\"./types\"),\n    util = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\n\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\nField.fromJSON = function fromJSON(name, json) {\n  return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\n\n\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n  /**\r\n   * Field rule, if any.\r\n   * @type {string|undefined}\r\n   */\n\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\r\n   * Field type.\r\n   * @type {string}\r\n   */\n\n  this.type = type; // toJSON\n\n  /**\r\n   * Unique field id.\r\n   * @type {number}\r\n   */\n\n  this.id = id; // toJSON, marker\n\n  /**\r\n   * Extended type if different from parent.\r\n   * @type {string|undefined}\r\n   */\n\n  this.extend = extend || undefined; // toJSON\n\n  /**\r\n   * Whether this field is required.\r\n   * @type {boolean}\r\n   */\n\n  this.required = rule === \"required\";\n  /**\r\n   * Whether this field is optional.\r\n   * @type {boolean}\r\n   */\n\n  this.optional = !this.required;\n  /**\r\n   * Whether this field is repeated.\r\n   * @type {boolean}\r\n   */\n\n  this.repeated = rule === \"repeated\";\n  /**\r\n   * Whether this field is a map or not.\r\n   * @type {boolean}\r\n   */\n\n  this.map = false;\n  /**\r\n   * Message this field belongs to.\r\n   * @type {Type|null}\r\n   */\n\n  this.message = null;\n  /**\r\n   * OneOf this field belongs to, if any,\r\n   * @type {OneOf|null}\r\n   */\n\n  this.partOf = null;\n  /**\r\n   * The field type's default value.\r\n   * @type {*}\r\n   */\n\n  this.typeDefault = null;\n  /**\r\n   * The field's default value on prototypes.\r\n   * @type {*}\r\n   */\n\n  this.defaultValue = null;\n  /**\r\n   * Whether this field's value should be treated as a long.\r\n   * @type {boolean}\r\n   */\n\n  this.long = util.Long ? types.long[type] !== undefined :\n  /* istanbul ignore next */\n  false;\n  /**\r\n   * Whether this field's value is a buffer.\r\n   * @type {boolean}\r\n   */\n\n  this.bytes = type === \"bytes\";\n  /**\r\n   * Resolved type if not a basic type.\r\n   * @type {Type|Enum|null}\r\n   */\n\n  this.resolvedType = null;\n  /**\r\n   * Sister-field within the extended type if a declaring extension field.\r\n   * @type {Field|null}\r\n   */\n\n  this.extensionField = null;\n  /**\r\n   * Sister-field within the declaring namespace if an extended field.\r\n   * @type {Field|null}\r\n   */\n\n  this.declaringField = null;\n  /**\r\n   * Internally remembers whether this field is packed.\r\n   * @type {boolean|null}\r\n   * @private\r\n   */\n\n  this._packed = null;\n  /**\r\n   * Comment for this field.\r\n   * @type {string|null}\r\n   */\n\n  this.comment = comment;\n}\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\n\n\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function get() {\n    // defaults to packed=true if not explicity set to false\n    if (this._packed === null) this._packed = this.getOption(\"packed\") !== false;\n    return this._packed;\n  }\n});\n/**\r\n * @override\r\n */\n\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (name === \"packed\") // clear cached before setting\n    this._packed = null;\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\n\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\n\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\n\n\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\n\n\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } // use explicitly set default value if present\n\n\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  } // remove unnecessary options\n\n\n  if (this.options) {\n    if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  } // convert to internal data type if necesssary\n\n\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n    /* istanbul ignore else */\n\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  } // take special care of maps and repeated fields\n\n\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault; // ensure proper value on prototype\n\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\n\n\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name; // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\n// like Field.d but without a default value\n// Sets up cyclic dependencies (called in index-light)\n\n\nField._configure = function configure(Type_) {\n  Type = Type_;\n};","map":null,"metadata":{},"sourceType":"script"}