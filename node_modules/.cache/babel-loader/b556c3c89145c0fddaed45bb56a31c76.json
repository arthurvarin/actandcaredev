{"ast":null,"code":"\"use strict\";\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\n\nvar wrappers = exports;\n\nvar Message = require(\"./message\");\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\n\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\n\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\n// Custom wrapper for Any\n\n\nwrappers[\".google.protobuf.Any\"] = {\n  fromObject: function fromObject(object) {\n    // unwrap value type if mapped\n    if (object && object[\"@type\"]) {\n      var type = this.lookup(object[\"@type\"]);\n      /* istanbul ignore else */\n\n      if (type) {\n        // type_url does not accept leading \".\"\n        var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].substr(1) : object[\"@type\"]; // type_url prefix is optional, but path seperator is required\n\n        return this.create({\n          type_url: \"/\" + type_url,\n          value: type.encode(type.fromObject(object)).finish()\n        });\n      }\n    }\n\n    return this.fromObject(object);\n  },\n  toObject: function toObject(message, options) {\n    // decode value if requested and unmapped\n    if (options && options.json && message.type_url && message.value) {\n      // Only use fully qualified type name after the last '/'\n      var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n\n      if (type) message = type.decode(message.value);\n    } // wrap value if unmapped\n\n\n    if (!(message instanceof this.ctor) && message instanceof Message) {\n      var object = message.$type.toObject(message, options);\n      object[\"@type\"] = message.$type.fullName;\n      return object;\n    }\n\n    return this.toObject(message, options);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}