{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Root; // extends Namespace\n\nvar Namespace = require(\"./namespace\");\n\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field = require(\"./field\"),\n    Enum = require(\"./enum\"),\n    OneOf = require(\"./oneof\"),\n    util = require(\"./util\");\n\nvar Type, // cyclic\nparse, // might be excluded\ncommon; // \"\n\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\n\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n  /**\r\n   * Deferred extension fields.\r\n   * @type {Field[]}\r\n   */\n\n  this.deferred = [];\n  /**\r\n   * Resolved file names of loaded files.\r\n   * @type {string[]}\r\n   */\n\n  this.files = [];\n}\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\n\n\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\n\n\nRoot.prototype.resolvePath = util.path.resolve; // A symbol-like function to safely signal synchronous loading\n\n/* istanbul ignore next */\n\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\n\n\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n  // Finishes loading by calling the callback (exactly once)\n\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    var cb = callback;\n    callback = null;\n    if (sync) throw err;\n    cb(err, root);\n  } // Processes a single file\n\n\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n            resolved,\n            i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) {\n          if (resolved = self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        }\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) {\n          if (resolved = self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n        }\n      }\n    } catch (err) {\n      finish(err);\n    }\n\n    if (!sync && !queued) finish(null, self); // only once anyway\n  } // Fetches a single file\n\n\n  function fetch(filename, weak) {\n    // Strip path if this file references a bundled definition\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) filename = altname;\n    } // Skip if already loaded / attempted\n\n\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename); // Shortcut bundled definitions\n\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    } // Otherwise fetch from disk or network\n\n\n    if (sync) {\n      var source;\n\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n\n      process(filename, source);\n    } else {\n      ++queued;\n      util.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n\n        if (!callback) return; // terminated meanwhile\n\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued) // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n\n        process(filename, source);\n      });\n    }\n  }\n\n  var queued = 0; // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n\n  if (util.isString(filename)) filename = [filename];\n\n  for (var i = 0, resolved; i < filename.length; ++i) {\n    if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n  }\n\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n}; // function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\n\n\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n/**\r\n * @override\r\n */\n\n\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n}; // only uppercased (and thus conflict-free) children are exposed, see below\n\n\nvar exposeRe = /^[A-Z]/;\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\n\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\n\n\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if (\n    /* an extension field (implies not part of a oneof) */\n    object.extend !== undefined &&\n    /* not already handled */\n    !object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf))\n    /* everything else is a namespace */\n    {\n      if (object instanceof Type) // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) {\n          if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n        }\n\n      for (var j = 0; j <\n      /* initializes */\n      object.nestedArray.length; ++j) {\n        // recurse into the namespace\n        this._handleAdd(object._nestedArray[j]);\n      }\n\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    } // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n\n};\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\n\n\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if (\n    /* an extension field */\n    object.extend !== undefined) {\n      if (\n      /* already handled */\n      object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i <\n    /* initializes */\n    object.nestedArray.length; ++i) {\n      // recurse into the namespace\n      this._handleRemove(object._nestedArray[i]);\n    }\n\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n}; // Sets up cyclic dependencies (called in index-light)\n\n\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};","map":null,"metadata":{},"sourceType":"script"}