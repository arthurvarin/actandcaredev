{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Point = require('./Point');\n\nvar _Point2 = _interopRequireDefault(_Point);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar CORNERS = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];\n\nvar Rect = function () {\n  /** @public */\n  function Rect() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    (0, _classCallCheck3.default)(this, Rect);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  Rect.prototype.intersects = function intersects(rect) {\n    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n  };\n\n  Rect.prototype.containsRect = function containsRect(rect) {\n    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n  };\n\n  Rect.prototype.containsPoint = function containsPoint(point) {\n    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n  };\n\n  Rect.prototype.getCornerInRect = function getCornerInRect(rect) {\n    for (var _iterator = CORNERS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var key = _ref;\n\n      if (rect.containsPoint(this[key])) {\n        return key;\n      }\n    }\n\n    return null;\n  };\n\n  Rect.prototype.equals = function equals(rect) {\n    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n  };\n\n  Rect.prototype.pointEquals = function pointEquals(point) {\n    return this.x === point.x && this.y === point.y;\n  };\n\n  Rect.prototype.sizeEquals = function sizeEquals(size) {\n    return this.width === size.width && this.height === size.height;\n  };\n\n  Rect.prototype.copy = function copy() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  };\n\n  (0, _createClass3.default)(Rect, [{\n    key: 'maxX',\n    get: function get() {\n      return this.x + this.width;\n    }\n  }, {\n    key: 'maxY',\n    get: function get() {\n      return this.y + this.height;\n    }\n  }, {\n    key: 'area',\n    get: function get() {\n      return this.width * this.height;\n    }\n  }, {\n    key: 'topLeft',\n    get: function get() {\n      return new _Point2.default(this.x, this.y);\n    }\n  }, {\n    key: 'topRight',\n    get: function get() {\n      return new _Point2.default(this.maxX, this.y);\n    }\n  }, {\n    key: 'bottomLeft',\n    get: function get() {\n      return new _Point2.default(this.x, this.maxY);\n    }\n  }, {\n    key: 'bottomRight',\n    get: function get() {\n      return new _Point2.default(this.maxX, this.maxY);\n    }\n  }]);\n  return Rect;\n}();\n\nexports.default = Rect;","map":null,"metadata":{},"sourceType":"script"}