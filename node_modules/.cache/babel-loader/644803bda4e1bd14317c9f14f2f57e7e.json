{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require('path');\n\nvar os = require('os');\n\nvar fs = require('graceful-fs');\n\nvar makeDir = require('make-dir');\n\nvar xdgBasedir = require('xdg-basedir');\n\nvar writeFileAtomic = require('write-file-atomic');\n\nvar dotProp = require('dot-prop');\n\nvar uniqueString = require('unique-string');\n\nvar configDir = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());\nvar permissionError = 'You don\\'t have access to this file.';\nvar makeDirOptions = {\n  mode: 448\n};\nvar writeFileOptions = {\n  mode: 384\n};\n\nvar Configstore =\n/*#__PURE__*/\nfunction () {\n  function Configstore(id, defaults, opts) {\n    _classCallCheck(this, Configstore);\n\n    opts = opts || {};\n    var pathPrefix = opts.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', \"\".concat(id, \".json\"));\n    this.path = path.join(configDir, pathPrefix);\n    this.all = Object.assign({}, defaults, this.all);\n  }\n\n  _createClass(Configstore, [{\n    key: \"get\",\n    value: function get(key) {\n      return dotProp.get(this.all, key);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      var config = this.all;\n\n      if (arguments.length === 1) {\n        var _arr = Object.keys(key);\n\n        for (var _i = 0; _i < _arr.length; _i++) {\n          var k = _arr[_i];\n          dotProp.set(config, k, key[k]);\n        }\n      } else {\n        dotProp.set(config, key, val);\n      }\n\n      this.all = config;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return dotProp.has(this.all, key);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var config = this.all;\n      dotProp.delete(config, key);\n      this.all = config;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.all = {};\n    }\n  }, {\n    key: \"all\",\n    get: function get() {\n      try {\n        return JSON.parse(fs.readFileSync(this.path, 'utf8'));\n      } catch (err) {\n        // Create dir if it doesn't exist\n        if (err.code === 'ENOENT') {\n          makeDir.sync(path.dirname(this.path), makeDirOptions);\n          return {};\n        } // Improve the message of permission errors\n\n\n        if (err.code === 'EACCES') {\n          err.message = \"\".concat(err.message, \"\\n\").concat(permissionError, \"\\n\");\n        } // Empty the file if it encounters invalid JSON\n\n\n        if (err.name === 'SyntaxError') {\n          writeFileAtomic.sync(this.path, '', writeFileOptions);\n          return {};\n        }\n\n        throw err;\n      }\n    },\n    set: function set(val) {\n      try {\n        // Make sure the folder exists as it could have been deleted in the meantime\n        makeDir.sync(path.dirname(this.path), makeDirOptions);\n        writeFileAtomic.sync(this.path, JSON.stringify(val, null, '\\t'), writeFileOptions);\n      } catch (err) {\n        // Improve the message of permission errors\n        if (err.code === 'EACCES') {\n          err.message = \"\".concat(err.message, \"\\n\").concat(permissionError, \"\\n\");\n        }\n\n        throw err;\n      }\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return Object.keys(this.all || {}).length;\n    }\n  }]);\n\n  return Configstore;\n}();\n\nmodule.exports = Configstore;","map":null,"metadata":{},"sourceType":"script"}