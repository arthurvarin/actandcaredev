{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert = require(\"assert\");\n/**\n * An auto-resizing pool that distributes concurrent operations over multiple\n * clients of type `T`.\n *\n * ClientPool is used within Firestore to manage a pool of GAPIC clients and\n * automatically initializes multiple clients if we issue more than 100\n * concurrent operations.\n *\n * @private\n */\n\n\nvar ClientPool =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param concurrentOperationLimit The number of operations that each client\n   * can handle.\n   * @param clientFactory A factory function called as needed when new clients\n   * are required.\n   */\n  function ClientPool(concurrentOperationLimit, clientFactory) {\n    _classCallCheck(this, ClientPool);\n\n    this.concurrentOperationLimit = concurrentOperationLimit;\n    this.clientFactory = clientFactory;\n    /** Stores each active clients and how many operations it has outstanding. */\n\n    this.activeClients = new Map();\n  }\n  /**\n   * Returns an already existing client if it has less than the maximum number\n   * of concurrent operations or initializes and returns a new client.\n   */\n\n\n  _createClass(ClientPool, [{\n    key: \"acquire\",\n    value: function acquire() {\n      var _this = this;\n\n      var selectedClient = null;\n      var selectedRequestCount = 0;\n      this.activeClients.forEach(function (requestCount, client) {\n        if (!selectedClient && requestCount < _this.concurrentOperationLimit) {\n          selectedClient = client;\n          selectedRequestCount = requestCount;\n        }\n      });\n\n      if (!selectedClient) {\n        selectedClient = this.clientFactory();\n        assert(!this.activeClients.has(selectedClient), 'The provided client factory returned an existing instance');\n      }\n\n      this.activeClients.set(selectedClient, selectedRequestCount + 1);\n      return selectedClient;\n    }\n    /**\n     * Reduces the number of operations for the provided client, potentially\n     * removing it from the pool of active clients.\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(client) {\n      var requestCount = this.activeClients.get(client) || 0;\n      assert(requestCount > 0, 'No active request');\n      requestCount = requestCount - 1;\n      this.activeClients.set(client, requestCount);\n\n      if (requestCount === 0) {\n        this.garbageCollect();\n      }\n    }\n    /**\n     * The number of currently registered clients.\n     *\n     * @return Number of currently registered clients.\n     */\n    // Visible for testing.\n\n  }, {\n    key: \"run\",\n\n    /**\n     * Runs the provided operation in this pool. This function may create an\n     * additional client if all existing clients already operate at the concurrent\n     * operation limit.\n     *\n     * @param op A callback function that returns a Promise. The client T will\n     * be returned to the pool when callback finishes.\n     * @return A Promise that resolves with the result of `op`.\n     */\n    value: function run(op) {\n      var _this2 = this;\n\n      var client = this.acquire();\n      return op(client).catch(function (err) {\n        _this2.release(client);\n\n        return Promise.reject(err);\n      }).then(function (res) {\n        _this2.release(client);\n\n        return res;\n      });\n    }\n    /**\n     * Deletes clients that are no longer executing operations. Keeps up to one\n     * idle client to reduce future initialization costs.\n     */\n\n  }, {\n    key: \"garbageCollect\",\n    value: function garbageCollect() {\n      var _this3 = this;\n\n      var idleClients = 0;\n      this.activeClients.forEach(function (requestCount, client) {\n        if (requestCount === 0) {\n          ++idleClients;\n\n          if (idleClients > 1) {\n            _this3.activeClients.delete(client);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.activeClients.size;\n    }\n  }]);\n\n  return ClientPool;\n}();\n\nexports.ClientPool = ClientPool;","map":null,"metadata":{},"sourceType":"script"}