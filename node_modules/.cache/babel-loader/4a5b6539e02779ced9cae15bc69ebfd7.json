{"ast":null,"code":"/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*!\n * @module common/service-object\n */\n'use strict';\n\nvar arrify = require('arrify');\n\nvar exec = require('methmeth');\n\nvar extend = require('extend');\n\nvar is = require('is');\n/**\n * @type {module:common/util}\n * @private\n */\n\n\nvar util = require('./util.js');\n/**\n * ServiceObject is a base class, meant to be inherited from by a \"service\n * object,\" like a BigQuery dataset or Storage bucket.\n *\n * Most of the time, these objects share common functionality; they can be\n * created or deleted, and you can get or set their metadata.\n *\n * By inheriting from this class, a service object will be extended with these\n * shared behaviors. Note that any method can be overridden when the service\n * object requires specific behavior.\n *\n * @constructor\n * @alias module:common/service-object\n *\n * @private\n *\n * @param {object} config - Configuration object.\n * @param {string} config.baseUrl - The base URL to make API requests to.\n * @param {string} config.createMethod - The method which creates this object.\n * @param {string=} config.id - The identifier of the object. For example, the\n *     name of a Storage bucket or Pub/Sub topic.\n * @param {object=} config.methods - A map of each method name that should be\n *     inherited.\n * @param {object} config.methods[].reqOpts - Default request options for this\n *     particular method. A common use case is when `setMetadata` requires a\n *     `PUT` method to override the default `PATCH`.\n * @param {object} config.parent - The parent service instance. For example, an\n *     instance of Storage if the object is Bucket.\n */\n\n\nfunction ServiceObject(config) {\n  var self = this;\n  util.privatize(this, 'metadata', {});\n  util.privatize(this, 'baseUrl', config.baseUrl);\n  util.privatize(this, 'parent', config.parent); // Parent class.\n\n  util.privatize(this, 'id', config.id); // Name or ID (e.g. dataset ID, bucket name, etc.)\n\n  util.privatize(this, 'createMethod', config.createMethod);\n  util.privatize(this, 'methods', config.methods || {});\n  util.privatize(this, 'interceptors', []);\n  util.privatize(this, 'Promise', this.parent.Promise);\n\n  if (config.methods) {\n    var allMethodNames = Object.keys(ServiceObject.prototype);\n    allMethodNames.filter(function (methodName) {\n      return (// All ServiceObjects need `request`.\n        !/^request/.test(methodName) && // The ServiceObject didn't redefine the method.\n        self[methodName] === ServiceObject.prototype[methodName] && // This method isn't wanted.\n        !config.methods[methodName]\n      );\n    }).forEach(function (methodName) {\n      self[methodName] = undefined;\n    });\n  }\n}\n/**\n * Create the object.\n *\n * @param {object=} options - Configuration object.\n * @param {function} callback - The callback function.\n * @param {?error} callback.err - An error returned while making this request.\n * @param {object} callback.instance - The instance.\n * @param {object} callback.apiResponse - The full API response.\n */\n\n\nServiceObject.prototype.create = function (options, callback) {\n  var self = this;\n  var args = [this.id];\n\n  if (is.fn(options)) {\n    callback = options;\n  }\n\n  if (is.object(options)) {\n    args.push(options);\n  } // Wrap the callback to return *this* instance of the object, not the newly-\n  // created one.\n\n\n  function onCreate(err, instance) {\n    var args = [].slice.call(arguments);\n\n    if (!err) {\n      self.metadata = instance.metadata;\n      args[1] = self; // replace the created `instance` with this one.\n    }\n\n    callback.apply(null, args);\n  }\n\n  args.push(onCreate);\n  this.createMethod.apply(null, args);\n};\n/**\n * Delete the object.\n *\n * @param {function=} callback - The callback function.\n * @param {?error} callback.err - An error returned while making this request.\n * @param {object} callback.apiResponse - The full API response.\n */\n\n\nServiceObject.prototype.delete = function (callback) {\n  var methodConfig = this.methods.delete || {};\n  callback = callback || util.noop;\n  var reqOpts = extend({\n    method: 'DELETE',\n    uri: ''\n  }, methodConfig.reqOpts); // The `request` method may have been overridden to hold any special behavior.\n  // Ensure we call the original `request` method.\n\n  ServiceObject.prototype.request.call(this, reqOpts, function (err, resp) {\n    callback(err, resp);\n  });\n};\n/**\n * Check if the object exists.\n *\n * @param {function} callback - The callback function.\n * @param {?error} callback.err - An error returned while making this request.\n * @param {boolean} callback.exists - Whether the object exists or not.\n */\n\n\nServiceObject.prototype.exists = function (callback) {\n  this.get(function (err) {\n    if (err) {\n      if (err.code === 404) {\n        callback(null, false);\n      } else {\n        callback(err);\n      }\n\n      return;\n    }\n\n    callback(null, true);\n  });\n};\n/**\n * Get the object if it exists. Optionally have the object created if an options\n * object is provided with `autoCreate: true`.\n *\n * @param {object=} config - The configuration object that will be used to\n *     create the object if necessary.\n * @param {boolean} config.autoCreate - Create the object if it doesn't already\n *     exist.\n * @param {function} callback - The callback function.\n * @param {?error} callback.err - An error returned while making this request.\n * @param {object} callback.instance - The instance.\n * @param {object} callback.apiResponse - The full API response.\n */\n\n\nServiceObject.prototype.get = function (config, callback) {\n  var self = this;\n\n  if (is.fn(config)) {\n    callback = config;\n    config = {};\n  }\n\n  config = config || {};\n  var autoCreate = config.autoCreate && is.fn(this.create);\n  delete config.autoCreate;\n\n  function onCreate(err, instance, apiResponse) {\n    if (err) {\n      if (err.code === 409) {\n        self.get(config, callback);\n        return;\n      }\n\n      callback(err, null, apiResponse);\n      return;\n    }\n\n    callback(null, instance, apiResponse);\n  }\n\n  this.getMetadata(function (err, metadata) {\n    if (err) {\n      if (err.code === 404 && autoCreate) {\n        var args = [];\n\n        if (!is.empty(config)) {\n          args.push(config);\n        }\n\n        args.push(onCreate);\n        self.create.apply(self, args);\n        return;\n      }\n\n      callback(err, null, metadata);\n      return;\n    }\n\n    callback(null, self, metadata);\n  });\n};\n/**\n * Get the metadata of this object.\n *\n * @param {function} callback - The callback function.\n * @param {?error} callback.err - An error returned while making this request.\n * @param {object} callback.metadata - The metadata for this object.\n * @param {object} callback.apiResponse - The full API response.\n */\n\n\nServiceObject.prototype.getMetadata = function (callback) {\n  var self = this;\n  var methodConfig = this.methods.getMetadata || {};\n  var reqOpts = extend({\n    uri: ''\n  }, methodConfig.reqOpts); // The `request` method may have been overridden to hold any special behavior.\n  // Ensure we call the original `request` method.\n\n  ServiceObject.prototype.request.call(this, reqOpts, function (err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    self.metadata = resp;\n    callback(null, self.metadata, resp);\n  });\n};\n/**\n * Set the metadata for this object.\n *\n * @param {object} metadata - The metadata to set on this object.\n * @param {function=} callback - The callback function.\n * @param {?error} callback.err - An error returned while making this request.\n * @param {object} callback.instance - The instance.\n * @param {object} callback.apiResponse - The full API response.\n */\n\n\nServiceObject.prototype.setMetadata = function (metadata, callback) {\n  var self = this;\n  callback = callback || util.noop;\n  var methodConfig = this.methods.setMetadata || {};\n  var reqOpts = extend(true, {\n    method: 'PATCH',\n    uri: '',\n    json: metadata\n  }, methodConfig.reqOpts); // The `request` method may have been overridden to hold any special behavior.\n  // Ensure we call the original `request` method.\n\n  ServiceObject.prototype.request.call(this, reqOpts, function (err, resp) {\n    if (err) {\n      callback(err, resp);\n      return;\n    }\n\n    self.metadata = resp;\n    callback(null, resp);\n  });\n};\n/**\n * Make an authenticated API request.\n *\n * @private\n *\n * @param {object} reqOpts - Request options that are passed to `request`.\n * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n * @param {function} callback - The callback function passed to `request`.\n */\n\n\nServiceObject.prototype.request_ = function (reqOpts, callback) {\n  reqOpts = extend(true, {}, reqOpts);\n  var isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n  var uriComponents = [this.baseUrl, this.id || '', reqOpts.uri];\n\n  if (isAbsoluteUrl) {\n    uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n  }\n\n  reqOpts.uri = uriComponents.filter(exec('trim')) // Limit to non-empty strings.\n  .map(function (uriComponent) {\n    var trimSlashesRegex = /^\\/*|\\/*$/g;\n    return uriComponent.replace(trimSlashesRegex, '');\n  }).join('/');\n  var childInterceptors = arrify(reqOpts.interceptors_);\n  var localInterceptors = [].slice.call(this.interceptors);\n  reqOpts.interceptors_ = childInterceptors.concat(localInterceptors);\n\n  if (!callback) {\n    return this.parent.requestStream(reqOpts);\n  }\n\n  this.parent.request(reqOpts, callback);\n};\n/**\n * Make an authenticated API request.\n *\n * @private\n *\n * @param {object} reqOpts - Request options that are passed to `request`.\n * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n * @param {function} callback - The callback function passed to `request`.\n */\n\n\nServiceObject.prototype.request = function (reqOpts, callback) {\n  ServiceObject.prototype.request_.call(this, reqOpts, callback);\n};\n/**\n * Make an authenticated API request.\n *\n * @private\n *\n * @param {object} reqOpts - Request options that are passed to `request`.\n * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n */\n\n\nServiceObject.prototype.requestStream = function (reqOpts) {\n  return ServiceObject.prototype.request_.call(this, reqOpts);\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\n\nutil.promisifyAll(ServiceObject);\nmodule.exports = ServiceObject;","map":null,"metadata":{},"sourceType":"script"}