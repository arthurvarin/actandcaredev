{"ast":null,"code":"var util = require('util');\n\nvar LogDriver = function LogDriver(options) {\n  options = options || {};\n  var logger = this;\n\n  if (options.format) {\n    this.format = options.format;\n  }\n\n  this.levels = options.levels || ['error', 'warn', 'info', 'debug', 'trace'];\n\n  if (options.level === false) {\n    this.level = false; // don't log anything\n  } else {\n    this.level = options.level || this.levels[this.levels.length - 1];\n\n    if (this.levels.indexOf(this.level) === -1) {\n      throw new Error(\"Log level '\" + this.level + \"' does not exist in level list '\" + JSON.stringify() + \"'\");\n    }\n  }\n\n  this.levels.forEach(function (level) {\n    if (logLevelShouldOutput(level, logger.level, logger.levels)) {\n      logger[level] = function () {\n        var args = Array.prototype.slice.call(arguments);\n        args.unshift(level); // log level is added as the first parameter\n\n        console.log(logger.format.apply(logger, args));\n      };\n    } else {\n      logger[level] = function () {\n        /* no-op, because this log level is ignored */\n      };\n    }\n  });\n};\n\nvar logLevelShouldOutput = function logLevelShouldOutput(logLevel, configuredLevel, levels) {\n  if (configuredLevel === false) {\n    return false;\n  }\n\n  return levels.indexOf(logLevel) <= levels.indexOf(configuredLevel);\n};\n\nLogDriver.prototype.format = function () {\n  var args = Array.prototype.slice.call(arguments, [1]); // change arguments to an array, but\n  // drop the first item (log level)\n\n  var out = \"[\" + arguments[0] + \"] \" + JSON.stringify(new Date()) + \" \";\n  args.forEach(function (arg) {\n    out += \" \" + util.inspect(arg);\n  });\n  return out;\n};\n\nvar defaultLogger = null;\n\nvar factory = function factory(options) {\n  defaultLogger = new LogDriver(options);\n  factory.logger = defaultLogger;\n  return defaultLogger;\n};\n\nfactory();\nmodule.exports = factory;","map":null,"metadata":{},"sourceType":"script"}