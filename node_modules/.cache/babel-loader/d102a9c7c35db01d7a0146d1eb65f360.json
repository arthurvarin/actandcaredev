{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _AttributedString = require('../models/AttributedString');\n\nvar _AttributedString2 = _interopRequireDefault(_AttributedString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar wrapWords = function wrapWords(engines) {\n  return function (attributedString) {\n    var syllables = [];\n    var fragments = [];\n\n    for (var _iterator = attributedString.runs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var run = _ref;\n      var string = '';\n      var tokens = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n\n      for (var _iterator2 = tokens, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var token = _ref2;\n        var parts = engines.wordHyphenation.hyphenateWord(token);\n        syllables.push.apply(syllables, parts);\n        string += parts.join('');\n      }\n\n      fragments.push({\n        string: string,\n        attributes: run.attributes\n      });\n    }\n\n    return {\n      attributedString: _AttributedString2.default.fromFragments(fragments),\n      syllables: syllables\n    };\n  };\n};\n\nexports.default = wrapWords;","map":null,"metadata":{},"sourceType":"script"}