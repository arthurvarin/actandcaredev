{"ast":null,"code":"'use strict';\n\nvar isObj = require('is-obj');\n\nfunction getPathSegments(path) {\n  var pathArr = path.split('.');\n  var parts = [];\n\n  for (var i = 0; i < pathArr.length; i++) {\n    var p = pathArr[i];\n\n    while (p[p.length - 1] === '\\\\' && pathArr[i + 1] !== undefined) {\n      p = p.slice(0, -1) + '.';\n      p += pathArr[++i];\n    }\n\n    parts.push(p);\n  }\n\n  return parts;\n}\n\nmodule.exports = {\n  get: function get(obj, path, value) {\n    if (!isObj(obj) || typeof path !== 'string') {\n      return value === undefined ? obj : value;\n    }\n\n    var pathArr = getPathSegments(path);\n\n    for (var i = 0; i < pathArr.length; i++) {\n      if (!Object.prototype.propertyIsEnumerable.call(obj, pathArr[i])) {\n        return value;\n      }\n\n      obj = obj[pathArr[i]];\n\n      if (obj === undefined || obj === null) {\n        // `obj` is either `undefined` or `null` so we want to stop the loop, and\n        // if this is not the last bit of the path, and\n        // if it did't return `undefined`\n        // it would return `null` if `obj` is `null`\n        // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`\n        if (i !== pathArr.length - 1) {\n          return value;\n        }\n\n        break;\n      }\n    }\n\n    return obj;\n  },\n  set: function set(obj, path, value) {\n    if (!isObj(obj) || typeof path !== 'string') {\n      return obj;\n    }\n\n    var root = obj;\n    var pathArr = getPathSegments(path);\n\n    for (var i = 0; i < pathArr.length; i++) {\n      var p = pathArr[i];\n\n      if (!isObj(obj[p])) {\n        obj[p] = {};\n      }\n\n      if (i === pathArr.length - 1) {\n        obj[p] = value;\n      }\n\n      obj = obj[p];\n    }\n\n    return root;\n  },\n  delete: function _delete(obj, path) {\n    if (!isObj(obj) || typeof path !== 'string') {\n      return;\n    }\n\n    var pathArr = getPathSegments(path);\n\n    for (var i = 0; i < pathArr.length; i++) {\n      var p = pathArr[i];\n\n      if (i === pathArr.length - 1) {\n        delete obj[p];\n        return;\n      }\n\n      obj = obj[p];\n\n      if (!isObj(obj)) {\n        return;\n      }\n    }\n  },\n  has: function has(obj, path) {\n    if (!isObj(obj) || typeof path !== 'string') {\n      return false;\n    }\n\n    var pathArr = getPathSegments(path);\n\n    for (var i = 0; i < pathArr.length; i++) {\n      if (isObj(obj)) {\n        if (!(pathArr[i] in obj)) {\n          return false;\n        }\n\n        obj = obj[pathArr[i]];\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}