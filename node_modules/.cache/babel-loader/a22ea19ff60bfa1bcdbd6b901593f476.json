{"ast":null,"code":"/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\n\nvar client = require('./client');\n\nvar common = require('./common');\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\n\n\nexports.deserializeCls = function deserializeCls(cls, options) {\n  var conversion_options = {\n    defaults: true,\n    bytes: options.binaryAsBase64 ? String : Buffer,\n    longs: options.longsAsStrings ? String : null,\n    enums: options.enumsAsStrings ? String : null,\n    oneofs: true\n  };\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n\n  return function deserialize(arg_buf) {\n    return cls.toObject(cls.decode(arg_buf), conversion_options);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\n\nexports.serializeCls = function serializeCls(cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.ReflectionObject} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\n\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  var name = value.name;\n  var parent_fqn = fullyQualifiedName(value.parent);\n\n  if (parent_fqn !== '') {\n    name = parent_fqn + '.' + name;\n  }\n\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\n\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service, options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  service.resolveAll();\n  return common.zipObject(service.methodsArray.map(function (method) {\n    return camelCase(method.name);\n  }), service.methodsArray.map(function (method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: !!method.requestStream,\n      responseStream: !!method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType),\n      requestDeserialize: deserializeCls(method.resolvedRequestType, options),\n      responseSerialize: serializeCls(method.resolvedResponseType),\n      responseDeserialize: deserializeCls(method.resolvedResponseType, options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n\n  if (!value) {\n    return value;\n  }\n\n  if (value.hasOwnProperty('methods')) {\n    // It's a service object\n    var service_attrs = getProtobufServiceAttrs(value, options);\n    return client.makeClientConstructor(service_attrs);\n  }\n\n  if (value.hasOwnProperty('nested')) {\n    // It's a namespace or root object\n    if (value.nested !== null && value.nested !== undefined) {\n      var values = Object.keys(value.nested).map(function (key) {\n        return value.nested[key];\n      });\n      values.forEach(function (nested) {\n        result[nested.name] = loadObject(nested, options);\n      });\n    }\n\n    return result;\n  } // Otherwise, it's not something we need to change\n\n\n  return value;\n};\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 6\n *   ReflectionObject\n */\n\n\nexports.isProbablyProtobufJs6 = function isProbablyProtobufJs6(obj) {\n  return typeof obj.root === 'object' && typeof obj.resolve === 'function';\n};","map":null,"metadata":{},"sourceType":"script"}