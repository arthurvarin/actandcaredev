{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\n\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\n\n\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n  }\n\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n  }\n\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function () {});\n}\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\n\n\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n\n  var message;\n\n  try {\n    message = serialize(value);\n  } catch (e) {\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n\n  status.metadata = statusMetadata._getCoreRepresentation();\n\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function () {});\n}\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\n\n\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code: constants.status.OK,\n    details: 'OK',\n    metadata: new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n\n  function sendStatus() {\n    var batch = {};\n\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    }\n\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function () {});\n  }\n\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n\n    stream.status = {\n      code: code,\n      details: details,\n      metadata: metadata\n    };\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n\n\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n\n  stream.end = function (metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n\n    Writable.prototype.end.call(this);\n  };\n}\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\n\n\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n\n  stream.terminate = function () {\n    stream.finished = true;\n    stream.on('data', function () {});\n  };\n\n  stream.on('cancelled', function () {\n    stream.terminate();\n  });\n}\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\n\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n\n  this.request = undefined;\n}\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\n\nutil.inherits(ServerWritableStream, Writable);\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\n\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n\n  this.request = undefined;\n}\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\n\n\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function (err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n\n    callback();\n  });\n}\n\nServerWritableStream.prototype._write = _write;\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\n\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n\n  this.metadata = metadata;\n}\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\n\n\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n\n    var data = event.read;\n    var deserialized;\n\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\n\nServerReadableStream.prototype._read = _read;\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\n\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n\n  this.metadata = metadata;\n}\n\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\n\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] = responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function (err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\n\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\n\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\n\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function (err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\n\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function (error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n\n    if (emitter.cancelled) {\n      return;\n    }\n\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\n\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n\n    handler.func(stream);\n  });\n}\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\n\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function (error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function (err, value, trailer, flags) {\n    stream.terminate();\n\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\n\n\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize, handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\n\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\n\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n/**\n * Start the server and begin handling requests\n */\n\n\nServer.prototype.start = function () {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n\n  var self = this;\n  this.started = true;\n\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n\n\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n\n    if (method === null) {\n      return;\n    }\n\n    self._server.requestCall(handleNewCall);\n\n    var handler;\n\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: {}\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function () {});\n      return;\n    }\n\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n\n  this._server.requestCall(handleNewCall);\n};\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\n\n\nServer.prototype.register = function (name, handler, serialize, deserialize, type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\n\n\nServer.prototype.tryShutdown = function (callback) {\n  this._server.tryShutdown(callback);\n};\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\n\n\nServer.prototype.forceShutdown = function () {\n  this._server.forceShutdown();\n};\n\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\nvar defaultHandler = {\n  unary: function unary(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function client_stream(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function server_stream(call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function bidi(call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\n\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\n\n\nServer.prototype.addService = function (service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n\n  var self = this;\n  Object.keys(service).forEach(function (name) {\n    var attrs = service[name];\n    var method_type;\n\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n\n    var impl;\n\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name + ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize, deserialize, method_type);\n\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path + ' already provided.');\n    }\n  });\n};\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\n\n\nServer.prototype.addProtoService = util.deprecate(function (service, implementation) {\n  var options;\n\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_5_common.getProtobufServiceAttrs(service, options), implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_6_common.getProtobufServiceAttrs(service, options), implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\n\nServer.prototype.bind = function (port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n\n  return this._server.addHttp2Port(port, creds);\n};\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\n\n\nServer.prototype.bindAsync = function (port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  var result = this.bind(port, creds);\n\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n};\n\nexports.Server = Server;","map":null,"metadata":{},"sourceType":"script"}