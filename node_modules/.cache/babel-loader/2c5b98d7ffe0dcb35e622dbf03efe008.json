{"ast":null,"code":"'use strict'; // detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\n\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  var result = 0;\n  var maxUsed = 0;\n  var maxWeight = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = indents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var entry = _step.value;\n      // TODO: use destructuring when targeting Node.js 6\n      var key = entry[0];\n      var val = entry[1];\n      var u = val[0];\n      var w = val[1];\n\n      if (u > maxUsed || u === maxUsed && w > maxWeight) {\n        maxUsed = u;\n        maxWeight = w;\n        result = Number(key);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  } // used to see if tabs or spaces are the most used\n\n\n  var tabs = 0;\n  var spaces = 0; // remember the size of previous line's indentation\n\n  var prev = 0; // remember how many indents/unindents as occurred for a given size\n  // and how much lines follow a given indentation\n  //\n  // indents = {\n  //    3: [1, 0],\n  //    4: [1, 5],\n  //    5: [1, 0],\n  //   12: [1, 0],\n  // }\n\n  var indents = new Map(); // pointer to the array of last used indent\n\n  var current; // whether the last action was an indent (opposed to an unindent)\n\n  var isIndent;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = str.split(/\\n/g)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var line = _step2.value;\n\n      if (!line) {\n        // ignore empty lines\n        continue;\n      }\n\n      var _indent = void 0;\n\n      var matches = line.match(INDENT_RE);\n\n      if (matches) {\n        _indent = matches[0].length;\n\n        if (matches[1]) {\n          spaces++;\n        } else {\n          tabs++;\n        }\n      } else {\n        _indent = 0;\n      }\n\n      var diff = _indent - prev;\n      prev = _indent;\n\n      if (diff) {\n        // an indent or unindent has been detected\n        isIndent = diff > 0;\n        current = indents.get(isIndent ? diff : -diff);\n\n        if (current) {\n          current[0]++;\n        } else {\n          current = [1, 0];\n          indents.set(diff, current);\n        }\n      } else if (current) {\n        // if the last action was an indent, increment the weight\n        current[1] += Number(isIndent);\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var amount = getMostUsed(indents);\n  var type;\n  var indent;\n\n  if (!amount) {\n    type = null;\n    indent = '';\n  } else if (spaces >= tabs) {\n    type = 'space';\n    indent = ' '.repeat(amount);\n  } else {\n    type = 'tab';\n    indent = '\\t'.repeat(amount);\n  }\n\n  return {\n    amount: amount,\n    type: type,\n    indent: indent\n  };\n};","map":null,"metadata":{},"sourceType":"script"}