{"ast":null,"code":"\"use strict\";\n\nmodule.exports = OneOf; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(\"./field\"),\n    util = require(\"./util\");\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\n\n\nfunction OneOf(name, fieldNames, options, comment) {\n  if (!Array.isArray(fieldNames)) {\n    options = fieldNames;\n    fieldNames = undefined;\n  }\n\n  ReflectionObject.call(this, name, options);\n  /* istanbul ignore if */\n\n  if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError(\"fieldNames must be an Array\");\n  /**\r\n   * Field names that belong to this oneof.\r\n   * @type {string[]}\r\n   */\n\n  this.oneof = fieldNames || []; // toJSON, marker\n\n  /**\r\n   * Fields that belong to this oneof as an array for iteration.\r\n   * @type {Field[]}\r\n   * @readonly\r\n   */\n\n  this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n  /**\r\n   * Comment for this field.\r\n   * @type {string|null}\r\n   */\n\n  this.comment = comment;\n}\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\n\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\n\nOneOf.fromJSON = function fromJSON(name, json) {\n  return new OneOf(name, json.oneof, json.options, json.comment);\n};\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\n\n\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"oneof\", this.oneof, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\n\n\nfunction addFieldsToParent(oneof) {\n  if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) {\n    if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);\n  }\n}\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\n\n\nOneOf.prototype.add = function add(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  if (field.parent && field.parent !== this.parent) field.parent.remove(field);\n  this.oneof.push(field.name);\n  this.fieldsArray.push(field);\n  field.partOf = this; // field.parent remains null\n\n  addFieldsToParent(this);\n  return this;\n};\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\n\n\nOneOf.prototype.remove = function remove(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  var index = this.fieldsArray.indexOf(field);\n  /* istanbul ignore if */\n\n  if (index < 0) throw Error(field + \" is not a member of \" + this);\n  this.fieldsArray.splice(index, 1);\n  index = this.oneof.indexOf(field.name);\n  /* istanbul ignore else */\n\n  if (index > -1) // theoretical\n    this.oneof.splice(index, 1);\n  field.partOf = null;\n  return this;\n};\n/**\r\n * @override\r\n */\n\n\nOneOf.prototype.onAdd = function onAdd(parent) {\n  ReflectionObject.prototype.onAdd.call(this, parent);\n  var self = this; // Collect present fields\n\n  for (var i = 0; i < this.oneof.length; ++i) {\n    var field = parent.get(this.oneof[i]);\n\n    if (field && !field.partOf) {\n      field.partOf = self;\n      self.fieldsArray.push(field);\n    }\n  } // Add not yet present fields\n\n\n  addFieldsToParent(this);\n};\n/**\r\n * @override\r\n */\n\n\nOneOf.prototype.onRemove = function onRemove(parent) {\n  for (var i = 0, field; i < this.fieldsArray.length; ++i) {\n    if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);\n  }\n\n  ReflectionObject.prototype.onRemove.call(this, parent);\n};\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\n\n\nOneOf.d = function decorateOneOf() {\n  var fieldNames = new Array(arguments.length),\n      index = 0;\n\n  while (index < arguments.length) {\n    fieldNames[index] = arguments[index++];\n  }\n\n  return function oneOfDecorator(prototype, oneofName) {\n    util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));\n    Object.defineProperty(prototype, oneofName, {\n      get: util.oneOfGetter(fieldNames),\n      set: util.oneOfSetter(fieldNames)\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}