{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar utils = require(\"../utils\");\n\nvar error_1 = require(\"../utils/error\");\n/**\n * Parses a time stamp string or number and returns the corresponding date if valid.\n *\n * @param {any} time The unix timestamp string or number in milliseconds.\n * @return {string} The corresponding date as a UTC string, if valid.\n */\n\n\nfunction parseDate(time) {\n  try {\n    var date = new Date(parseInt(time, 10));\n\n    if (!isNaN(date.getTime())) {\n      return date.toUTCString();\n    }\n  } catch (e) {// Do nothing. null will be returned.\n  }\n\n  return null;\n}\n/**\n * User metadata class that provides metadata information like user account creation\n * and last sign in time.\n *\n * @param {object} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\n\nvar UserMetadata =\n/** @class */\nfunction () {\n  function UserMetadata(response) {\n    // Creation date should always be available but due to some backend bugs there\n    // were cases in the past where users did not have creation date properly set.\n    // This included legacy Firebase migrating project users and some anonymous users.\n    // These bugs have already been addressed since then.\n    utils.addReadonlyGetter(this, 'creationTime', parseDate(response.createdAt));\n    utils.addReadonlyGetter(this, 'lastSignInTime', parseDate(response.lastLoginAt));\n  }\n  /** @return {object} The plain object representation of the user's metadata. */\n\n\n  UserMetadata.prototype.toJSON = function () {\n    return {\n      lastSignInTime: this.lastSignInTime,\n      creationTime: this.creationTime\n    };\n  };\n\n  return UserMetadata;\n}();\n\nexports.UserMetadata = UserMetadata;\n/**\n * User info class that provides provider user information for different\n * Firebase providers like google.com, facebook.com, password, etc.\n *\n * @param {object} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserInfo =\n/** @class */\nfunction () {\n  function UserInfo(response) {\n    // Provider user id and provider id are required.\n    if (!response.rawId || !response.providerId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user info response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.rawId);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName);\n    utils.addReadonlyGetter(this, 'email', response.email);\n    utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n    utils.addReadonlyGetter(this, 'providerId', response.providerId);\n    utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n  }\n  /** @return {object} The plain object representation of the current provider data. */\n\n\n  UserInfo.prototype.toJSON = function () {\n    return {\n      uid: this.uid,\n      displayName: this.displayName,\n      email: this.email,\n      photoURL: this.photoURL,\n      providerId: this.providerId,\n      phoneNumber: this.phoneNumber\n    };\n  };\n\n  return UserInfo;\n}();\n\nexports.UserInfo = UserInfo;\n/**\n * User record class that defines the Firebase user object populated from\n * the Firebase Auth getAccountInfo response.\n *\n * @param {any} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserRecord =\n/** @class */\nfunction () {\n  function UserRecord(response) {\n    // The Firebase user id is required.\n    if (!response.localId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.localId);\n    utils.addReadonlyGetter(this, 'email', response.email);\n    utils.addReadonlyGetter(this, 'emailVerified', !!response.emailVerified);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName);\n    utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n    utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber); // If disabled is not provided, the account is enabled by default.\n\n    utils.addReadonlyGetter(this, 'disabled', response.disabled || false);\n    utils.addReadonlyGetter(this, 'metadata', new UserMetadata(response));\n    var providerData = [];\n\n    for (var _i = 0, _a = response.providerUserInfo || []; _i < _a.length; _i++) {\n      var entry = _a[_i];\n      providerData.push(new UserInfo(entry));\n    }\n\n    utils.addReadonlyGetter(this, 'providerData', providerData);\n    utils.addReadonlyGetter(this, 'passwordHash', response.passwordHash);\n    utils.addReadonlyGetter(this, 'passwordSalt', response.salt);\n\n    try {\n      utils.addReadonlyGetter(this, 'customClaims', JSON.parse(response.customAttributes));\n    } catch (e) {\n      // Ignore error.\n      utils.addReadonlyGetter(this, 'customClaims', undefined);\n    }\n\n    var validAfterTime = null; // Convert validSince first to UTC milliseconds and then to UTC date string.\n\n    if (typeof response.validSince !== 'undefined') {\n      validAfterTime = parseDate(response.validSince * 1000);\n    }\n\n    utils.addReadonlyGetter(this, 'tokensValidAfterTime', validAfterTime || undefined);\n  }\n  /** @return {object} The plain object representation of the user record. */\n\n\n  UserRecord.prototype.toJSON = function () {\n    var json = {\n      uid: this.uid,\n      email: this.email,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName,\n      photoURL: this.photoURL,\n      phoneNumber: this.phoneNumber,\n      disabled: this.disabled,\n      // Convert metadata to json.\n      metadata: this.metadata.toJSON(),\n      passwordHash: this.passwordHash,\n      passwordSalt: this.passwordSalt,\n      customClaims: deep_copy_1.deepCopy(this.customClaims),\n      tokensValidAfterTime: this.tokensValidAfterTime\n    };\n    json.providerData = [];\n\n    for (var _i = 0, _a = this.providerData; _i < _a.length; _i++) {\n      var entry = _a[_i]; // Convert each provider data to json.\n\n      json.providerData.push(entry.toJSON());\n    }\n\n    return json;\n  };\n\n  return UserRecord;\n}();\n\nexports.UserRecord = UserRecord;","map":null,"metadata":{},"sourceType":"script"}