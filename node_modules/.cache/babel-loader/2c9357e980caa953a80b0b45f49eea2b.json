{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _possibleConstructorReturn = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar deepEqual = require('deep-equal');\n\nvar validate_1 = require(\"./validate\");\n\nvar validate = validate_1.createValidator();\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class\n */\n\nvar FieldValue =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @private\n   * @hideconstructor\n   */\n  function FieldValue() {\n    _classCallCheck(this, FieldValue);\n  }\n  /**\n   * Returns a sentinel for use with update() or set() with {merge:true} to mark\n   * a field for deletion.\n   *\n   * @returns {FieldValue} The sentinel value to use in your objects.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   * let data = { a: 'b', c: 'd' };\n   *\n   * documentRef.set(data).then(() => {\n   *   return documentRef.update({a: Firestore.FieldValue.delete()});\n   * }).then(() => {\n   *   // Document now only contains { c: 'd' }\n   * });\n   */\n\n\n  _createClass(FieldValue, [{\n    key: \"isEqual\",\n\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     */\n    value: function isEqual(other) {\n      return this === other;\n    }\n  }], [{\n    key: \"delete\",\n    value: function _delete() {\n      return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     */\n\n  }, {\n    key: \"serverTimestamp\",\n    value: function serverTimestamp() {\n      return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     */\n\n  }, {\n    key: \"arrayUnion\",\n    value: function arrayUnion() {\n      for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n        elements[_key] = arguments[_key];\n      }\n\n      validate.minNumberOfArguments('FieldValue.arrayUnion', arguments, 1);\n      return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     */\n\n  }, {\n    key: \"arrayRemove\",\n    value: function arrayRemove() {\n      for (var _len2 = arguments.length, elements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        elements[_key2] = arguments[_key2];\n      }\n\n      validate.minNumberOfArguments('FieldValue.arrayRemove', arguments, 1);\n      return new ArrayRemoveTransform(elements);\n    }\n  }]);\n\n  return FieldValue;\n}();\n\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @abstract\n */\n\nvar FieldTransform =\n/*#__PURE__*/\nfunction (_FieldValue) {\n  _inherits(FieldTransform, _FieldValue);\n\n  function FieldTransform() {\n    _classCallCheck(this, FieldTransform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FieldTransform).apply(this, arguments));\n  }\n\n  return FieldTransform;\n}(FieldValue);\n\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n */\n\nvar DeleteTransform =\n/*#__PURE__*/\nfunction (_FieldTransform) {\n  _inherits(DeleteTransform, _FieldTransform);\n\n  function DeleteTransform() {\n    _classCallCheck(this, DeleteTransform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeleteTransform).call(this));\n  }\n  /**\n   * Deletes are included in document masks.\n   */\n\n\n  _createClass(DeleteTransform, [{\n    key: \"validate\",\n    value: function validate() {\n      return true;\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.delete';\n    }\n  }]);\n\n  return DeleteTransform;\n}(FieldTransform);\n/**\n * Sentinel value for a field delete.\n */\n\n\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\nexports.DeleteTransform = DeleteTransform;\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n */\n\nvar ServerTimestampTransform =\n/*#__PURE__*/\nfunction (_FieldTransform2) {\n  _inherits(ServerTimestampTransform, _FieldTransform2);\n\n  function ServerTimestampTransform() {\n    _classCallCheck(this, ServerTimestampTransform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ServerTimestampTransform).call(this));\n  }\n  /**\n   * Server timestamps are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  _createClass(ServerTimestampTransform, [{\n    key: \"validate\",\n    value: function validate() {\n      return true;\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      return {\n        fieldPath: fieldPath.formattedName,\n        setToServerValue: 'REQUEST_TIME'\n      };\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.serverTimestamp';\n    }\n  }]);\n\n  return ServerTimestampTransform;\n}(FieldTransform);\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n */\n\n\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n */\n\nvar ArrayUnionTransform =\n/*#__PURE__*/\nfunction (_FieldTransform3) {\n  _inherits(ArrayUnionTransform, _FieldTransform3);\n\n  function ArrayUnionTransform(elements) {\n    var _this;\n\n    _classCallCheck(this, ArrayUnionTransform);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayUnionTransform).call(this));\n    _this.elements = elements;\n    return _this;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   */\n\n\n  _createClass(ArrayUnionTransform, [{\n    key: \"validate\",\n    value: function validate(validator) {\n      var valid = true;\n\n      for (var i = 0; valid && i < this.elements.length; ++i) {\n        valid = validator.isArrayElement(i, this.elements[i], {\n          allowDeletes: 'none',\n          allowTransforms: false\n        });\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      var encodedElements = serializer.encodeValue(this.elements).arrayValue;\n      return {\n        fieldPath: fieldPath.formattedName,\n        appendMissingElements: encodedElements\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof ArrayUnionTransform && deepEqual(this.elements, other.elements, {\n        strict: true\n      });\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.arrayUnion';\n    }\n  }]);\n\n  return ArrayUnionTransform;\n}(FieldTransform);\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n */\n\n\nvar ArrayRemoveTransform =\n/*#__PURE__*/\nfunction (_FieldTransform4) {\n  _inherits(ArrayRemoveTransform, _FieldTransform4);\n\n  function ArrayRemoveTransform(elements) {\n    var _this2;\n\n    _classCallCheck(this, ArrayRemoveTransform);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ArrayRemoveTransform).call(this));\n    _this2.elements = elements;\n    return _this2;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   */\n\n\n  _createClass(ArrayRemoveTransform, [{\n    key: \"validate\",\n    value: function validate(validator) {\n      var valid = true;\n\n      for (var i = 0; valid && i < this.elements.length; ++i) {\n        valid = validator.isArrayElement(i, this.elements[i], {\n          allowDeletes: 'none',\n          allowTransforms: false\n        });\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      var encodedElements = serializer.encodeValue(this.elements).arrayValue;\n      return {\n        fieldPath: fieldPath.formattedName,\n        removeAllFromArray: encodedElements\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof ArrayRemoveTransform && deepEqual(this.elements, other.elements, {\n        strict: true\n      });\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.arrayRemove';\n    }\n  }]);\n\n  return ArrayRemoveTransform;\n}(FieldTransform);","map":null,"metadata":{},"sourceType":"script"}