{"ast":null,"code":"var _fs;\n\ntry {\n  _fs = require('graceful-fs');\n} catch (_) {\n  _fs = require('fs');\n}\n\nvar universalify = require('universalify');\n\nfunction readFileWithCallback(file, options, callback) {\n  if (callback == null) {\n    callback = options;\n    options = {};\n  }\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  options = options || {};\n  var fs = options.fs || _fs;\n  var shouldThrow = true;\n\n  if ('throws' in options) {\n    shouldThrow = options.throws;\n  }\n\n  fs.readFile(file, options, function (err, data) {\n    if (err) return callback(err);\n    data = stripBom(data);\n    var obj;\n\n    try {\n      obj = JSON.parse(data, options ? options.reviver : null);\n    } catch (err2) {\n      if (shouldThrow) {\n        err2.message = \"\".concat(file, \": \").concat(err2.message);\n        return callback(err2);\n      } else {\n        return callback(null, null);\n      }\n    }\n\n    callback(null, obj);\n  });\n}\n\nvar readFile = universalify.fromCallback(readFileWithCallback);\n\nfunction readFileSync(file, options) {\n  options = options || {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  var fs = options.fs || _fs;\n  var shouldThrow = true;\n\n  if ('throws' in options) {\n    shouldThrow = options.throws;\n  }\n\n  try {\n    var content = fs.readFileSync(file, options);\n    content = stripBom(content);\n    return JSON.parse(content, options.reviver);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = \"\".concat(file, \": \").concat(err.message);\n      throw err;\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction stringify(obj, options) {\n  var spaces;\n  var EOL = '\\n';\n\n  if (typeof options === 'object' && options !== null) {\n    if (options.spaces) {\n      spaces = options.spaces;\n    }\n\n    if (options.EOL) {\n      EOL = options.EOL;\n    }\n  }\n\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces);\n  return str.replace(/\\n/g, EOL) + EOL;\n}\n\nfunction writeFileWithCallback(file, obj, options, callback) {\n  if (callback == null) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var fs = options.fs || _fs;\n  var str = '';\n\n  try {\n    str = stringify(obj, options);\n  } catch (err) {\n    return callback(err, null);\n  }\n\n  fs.writeFile(file, str, options, callback);\n}\n\nvar writeFile = universalify.fromCallback(writeFileWithCallback);\n\nfunction writeFileSync(file, obj, options) {\n  options = options || {};\n  var fs = options.fs || _fs;\n  var str = stringify(obj, options); // not sure if fs.writeFileSync returns anything, but just in case\n\n  return fs.writeFileSync(file, str, options);\n}\n\nfunction stripBom(content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8');\n  content = content.replace(/^\\uFEFF/, '');\n  return content;\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n};\nmodule.exports = jsonfile;","map":null,"metadata":{},"sourceType":"script"}