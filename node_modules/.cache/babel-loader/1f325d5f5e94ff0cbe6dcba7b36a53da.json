{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar pify = require('pify');\n\nvar defaults = {\n  mode: 511 & ~process.umask(),\n  fs: fs\n}; // https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\n\nvar checkPath = function checkPath(pth) {\n  if (process.platform === 'win32') {\n    var pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n    if (pathHasInvalidWinCharacters) {\n      var err = new Error(\"Path contains invalid characters: \".concat(pth));\n      err.code = 'EINVAL';\n      throw err;\n    }\n  }\n};\n\nmodule.exports = function (input, opts) {\n  return Promise.resolve().then(function () {\n    checkPath(input);\n    opts = Object.assign({}, defaults, opts);\n    var mkdir = pify(opts.fs.mkdir);\n    var stat = pify(opts.fs.stat);\n\n    var make = function make(pth) {\n      return mkdir(pth, opts.mode).then(function () {\n        return pth;\n      }).catch(function (err) {\n        if (err.code === 'ENOENT') {\n          if (err.message.includes('null bytes') || path.dirname(pth) === pth) {\n            throw err;\n          }\n\n          return make(path.dirname(pth)).then(function () {\n            return make(pth);\n          });\n        }\n\n        return stat(pth).then(function (stats) {\n          return stats.isDirectory() ? pth : Promise.reject();\n        }).catch(function () {\n          throw err;\n        });\n      });\n    };\n\n    return make(path.resolve(input));\n  });\n};\n\nmodule.exports.sync = function (input, opts) {\n  checkPath(input);\n  opts = Object.assign({}, defaults, opts);\n\n  var make = function make(pth) {\n    try {\n      opts.fs.mkdirSync(pth, opts.mode);\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        if (err.message.includes('null bytes') || path.dirname(pth) === pth) {\n          throw err;\n        }\n\n        make(path.dirname(pth));\n        return make(pth);\n      }\n\n      try {\n        if (!opts.fs.statSync(pth).isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch (_) {\n        throw err;\n      }\n    }\n\n    return pth;\n  };\n\n  return make(path.resolve(input));\n};","map":null,"metadata":{},"sourceType":"script"}