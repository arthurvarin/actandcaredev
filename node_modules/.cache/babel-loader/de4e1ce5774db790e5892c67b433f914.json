{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validator = require(\"../utils/validator\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar user_import_builder_1 = require(\"./user-import-builder\");\n\nvar utils = require(\"../utils/index\");\n\nvar action_code_settings_builder_1 = require(\"./action-code-settings-builder\");\n/** Firebase Auth backend host. */\n\n\nvar FIREBASE_AUTH_HOST = 'www.googleapis.com';\n/** Firebase Auth backend port number. */\n\nvar FIREBASE_AUTH_PORT = 443;\n/** Firebase Auth backend path. */\n\nvar FIREBASE_AUTH_PATH = '/identitytoolkit/v3/relyingparty/';\n/** Firebase Auth request header. */\n\nvar FIREBASE_AUTH_HEADER = {\n  'X-Client-Version': 'Node/Admin/6.5.0'\n};\n/** Firebase Auth request timeout duration in milliseconds. */\n\nvar FIREBASE_AUTH_TIMEOUT = 25000;\n/** List of reserved claims which cannot be provided when creating a custom token. */\n\nexports.RESERVED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce', 'sub', 'firebase'];\n/** List of supported email action request types. */\n\nexports.EMAIL_ACTION_REQUEST_TYPES = ['PASSWORD_RESET', 'VERIFY_EMAIL', 'EMAIL_SIGNIN'];\n/** Maximum allowed number of characters in the custom claims payload. */\n\nvar MAX_CLAIMS_PAYLOAD_SIZE = 1000;\n/** Maximum allowed number of users to batch download at one time. */\n\nvar MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE = 1000;\n/** Maximum allowed number of users to batch upload at one time. */\n\nvar MAX_UPLOAD_ACCOUNT_BATCH_SIZE = 1000;\n/** Minimum allowed session cookie duration in seconds (5 minutes). */\n\nvar MIN_SESSION_COOKIE_DURATION_SECS = 5 * 60;\n/** Maximum allowed session cookie duration in seconds (2 weeks). */\n\nvar MAX_SESSION_COOKIE_DURATION_SECS = 14 * 24 * 60 * 60;\n/** The Firebase Auth backend URL format. */\n\nvar FIREBASE_AUTH_BASE_URL_FORMAT = 'https://identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** Defines a base utility to help with resource URL construction. */\n\nvar AuthResourceUrlBuilder =\n/** @class */\nfunction () {\n  /**\n   * The resource URL builder constructor.\n   *\n   * @param {string} projectId The resource project ID.\n   * @param {string} version The endpoint API version.\n   * @constructor\n   */\n  function AuthResourceUrlBuilder(projectId, version) {\n    if (version === void 0) {\n      version = 'v1';\n    }\n\n    this.projectId = projectId;\n    this.version = version;\n    this.urlFormat = FIREBASE_AUTH_BASE_URL_FORMAT;\n  }\n  /**\n   * Returns the resource URL corresponding to the provided parameters.\n   *\n   * @param {string=} api The backend API name.\n   * @param {object=} params The optional additional parameters to substitute in the\n   *     URL path.\n   * @return {string} The corresponding resource URL.\n   */\n\n\n  AuthResourceUrlBuilder.prototype.getUrl = function (api, params) {\n    var baseParams = {\n      version: this.version,\n      projectId: this.projectId,\n      api: api || ''\n    };\n    var baseUrl = utils.formatString(this.urlFormat, baseParams); // Substitute additional api related parameters.\n\n    return utils.formatString(baseUrl, params || {});\n  };\n\n  return AuthResourceUrlBuilder;\n}();\n/**\n * Validates a providerUserInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param {any} request The providerUserInfo request object.\n */\n\n\nfunction validateProviderUserInfo(request) {\n  var validKeys = {\n    rawId: true,\n    providerId: true,\n    email: true,\n    displayName: true,\n    photoUrl: true\n  }; // Remove invalid keys from original request.\n\n  for (var key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  }\n\n  if (!validator.isNonEmptyString(request.providerId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n  }\n\n  if (typeof request.displayName !== 'undefined' && typeof request.displayName !== 'string') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, \"The provider \\\"displayName\\\" for \\\"\" + request.providerId + \"\\\" must be a valid string.\");\n  }\n\n  if (!validator.isNonEmptyString(request.rawId)) {\n    // This is called localId on the backend but the developer specifies this as\n    // uid externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, \"The provider \\\"uid\\\" for \\\"\" + request.providerId + \"\\\" must be a valid non-empty string.\");\n  } // email should be a string and a valid email.\n\n\n  if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL, \"The provider \\\"email\\\" for \\\"\" + request.providerId + \"\\\" must be a valid email string.\");\n  } // photoUrl should be a URL.\n\n\n  if (typeof request.photoUrl !== 'undefined' && !validator.isURL(request.photoUrl)) {\n    // This is called photoUrl on the backend but the developer specifies this as\n    // photoURL externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL, \"The provider \\\"photoURL\\\" for \\\"\" + request.providerId + \"\\\" must be a valid URL string.\");\n  }\n}\n/**\n * Validates a create/edit request object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param {any} request The create/edit request object.\n * @param {boolean=} uploadAccountRequest Whether to validate as an uploadAccount request.\n */\n\n\nfunction validateCreateEditRequest(request, uploadAccountRequest) {\n  if (uploadAccountRequest === void 0) {\n    uploadAccountRequest = false;\n  } // Hash set of whitelisted parameters.\n\n\n  var validKeys = {\n    displayName: true,\n    localId: true,\n    email: true,\n    password: true,\n    rawPassword: true,\n    emailVerified: true,\n    photoUrl: true,\n    disabled: true,\n    disableUser: true,\n    deleteAttribute: true,\n    deleteProvider: true,\n    sanityCheck: true,\n    phoneNumber: true,\n    customAttributes: true,\n    validSince: true,\n    passwordHash: uploadAccountRequest,\n    salt: uploadAccountRequest,\n    createdAt: uploadAccountRequest,\n    lastLoginAt: uploadAccountRequest,\n    providerUserInfo: uploadAccountRequest\n  }; // Remove invalid keys from original request.\n\n  for (var key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  } // For any invalid parameter, use the external key name in the error description.\n  // displayName should be a string.\n\n\n  if (typeof request.displayName !== 'undefined' && !validator.isString(request.displayName)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME);\n  }\n\n  if ((typeof request.localId !== 'undefined' || uploadAccountRequest) && !validator.isUid(request.localId)) {\n    // This is called localId on the backend but the developer specifies this as\n    // uid externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n  } // email should be a string and a valid email.\n\n\n  if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n  } // phoneNumber should be a string and a valid phone number.\n\n\n  if (typeof request.phoneNumber !== 'undefined' && !validator.isPhoneNumber(request.phoneNumber)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n  } // password should be a string and a minimum of 6 chars.\n\n\n  if (typeof request.password !== 'undefined' && !validator.isPassword(request.password)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n  } // rawPassword should be a string and a minimum of 6 chars.\n\n\n  if (typeof request.rawPassword !== 'undefined' && !validator.isPassword(request.rawPassword)) {\n    // This is called rawPassword on the backend but the developer specifies this as\n    // password externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n  } // emailVerified should be a boolean.\n\n\n  if (typeof request.emailVerified !== 'undefined' && typeof request.emailVerified !== 'boolean') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL_VERIFIED);\n  } // photoUrl should be a URL.\n\n\n  if (typeof request.photoUrl !== 'undefined' && !validator.isURL(request.photoUrl)) {\n    // This is called photoUrl on the backend but the developer specifies this as\n    // photoURL externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL);\n  } // disabled should be a boolean.\n\n\n  if (typeof request.disabled !== 'undefined' && typeof request.disabled !== 'boolean') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n  } // validSince should be a number.\n\n\n  if (typeof request.validSince !== 'undefined' && !validator.isNumber(request.validSince)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME);\n  } // createdAt should be a number.\n\n\n  if (typeof request.createdAt !== 'undefined' && !validator.isNumber(request.createdAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREATION_TIME);\n  } // lastSignInAt should be a number.\n\n\n  if (typeof request.lastLoginAt !== 'undefined' && !validator.isNumber(request.lastLoginAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME);\n  } // disableUser should be a boolean.\n\n\n  if (typeof request.disableUser !== 'undefined' && typeof request.disableUser !== 'boolean') {\n    // This is called disableUser on the backend but the developer specifies this as\n    // disabled externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n  } // customAttributes should be stringified JSON with no blacklisted claims.\n  // The payload should not exceed 1KB.\n\n\n  if (typeof request.customAttributes !== 'undefined') {\n    var developerClaims_1;\n\n    try {\n      developerClaims_1 = JSON.parse(request.customAttributes);\n    } catch (error) {\n      // JSON parsing error. This should never happen as we stringify the claims internally.\n      // However, we still need to check since setAccountInfo via edit requests could pass\n      // this field.\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CLAIMS, error.message);\n    }\n\n    var invalidClaims_1 = []; // Check for any invalid claims.\n\n    exports.RESERVED_CLAIMS.forEach(function (blacklistedClaim) {\n      if (developerClaims_1.hasOwnProperty(blacklistedClaim)) {\n        invalidClaims_1.push(blacklistedClaim);\n      }\n    }); // Throw an error if an invalid claim is detected.\n\n    if (invalidClaims_1.length > 0) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.FORBIDDEN_CLAIM, invalidClaims_1.length > 1 ? \"Developer claims \\\"\" + invalidClaims_1.join('\", \"') + \"\\\" are reserved and cannot be specified.\" : \"Developer claim \\\"\" + invalidClaims_1[0] + \"\\\" is reserved and cannot be specified.\");\n    } // Check claims payload does not exceed maxmimum size.\n\n\n    if (request.customAttributes.length > MAX_CLAIMS_PAYLOAD_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.CLAIMS_TOO_LARGE, \"Developer claims payload should not exceed \" + MAX_CLAIMS_PAYLOAD_SIZE + \" characters.\");\n    }\n  } // passwordHash has to be a base64 encoded string.\n\n\n  if (typeof request.passwordHash !== 'undefined' && !validator.isString(request.passwordHash)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n  } // salt has to be a base64 encoded string.\n\n\n  if (typeof request.salt !== 'undefined' && !validator.isString(request.salt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n  } // providerUserInfo has to be an array of valid UserInfo requests.\n\n\n  if (typeof request.providerUserInfo !== 'undefined' && !validator.isArray(request.providerUserInfo)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_DATA);\n  } else if (validator.isArray(request.providerUserInfo)) {\n    request.providerUserInfo.forEach(function (providerUserInfoEntry) {\n      validateProviderUserInfo(providerUserInfoEntry);\n    });\n  }\n}\n/** Instantiates the createSessionCookie endpoint settings. */\n\n\nexports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = new api_request_1.ApiSettings(':createSessionCookie', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate the ID token is a non-empty string.\n  if (!validator.isNonEmptyString(request.idToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN);\n  } // Validate the custom session cookie duration.\n\n\n  if (!validator.isNumber(request.validDuration) || request.validDuration < MIN_SESSION_COOKIE_DURATION_SECS || request.validDuration > MAX_SESSION_COOKIE_DURATION_SECS) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION);\n  }\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the session cookie.\n  if (!validator.isNonEmptyString(response.sessionCookie)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR);\n  }\n});\n/** Instantiates the uploadAccount endpoint settings. */\n\nexports.FIREBASE_AUTH_UPLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchCreate', 'POST');\n/** Instantiates the downloadAccount endpoint settings. */\n\nexports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchGet', 'GET') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate next page token.\n  if (typeof request.nextPageToken !== 'undefined' && !validator.isNonEmptyString(request.nextPageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  } // Validate max results.\n\n\n  if (!validator.isNumber(request.maxResults) || request.maxResults <= 0 || request.maxResults > MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive non-zero number that does not exceed \" + (\"the allowed \" + MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE + \".\"));\n  }\n});\n/** Instantiates the getAccountInfo endpoint settings. */\n\nexports.FIREBASE_AUTH_GET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!request.localId && !request.email && !request.phoneNumber) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  if (!response.users) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n  }\n});\n/** Instantiates the deleteAccount endpoint settings. */\n\nexports.FIREBASE_AUTH_DELETE_ACCOUNT = new api_request_1.ApiSettings('/accounts:delete', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!request.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n});\n/** Instantiates the setAccountInfo endpoint settings for updating existing accounts. */\n\nexports.FIREBASE_AUTH_SET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:update', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  // localId is a required parameter.\n  if (typeof request.localId === 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n\n  validateCreateEditRequest(request);\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // If the localId is not returned, then the request failed.\n  if (!response.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n  }\n});\n/**\n * Instantiates the signupNewUser endpoint settings for creating a new user with or without\n * uid being specified. The backend will create a new one if not provided and return it.\n */\n\nexports.FIREBASE_AUTH_SIGN_UP_NEW_USER = new api_request_1.ApiSettings('/accounts', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  // signupNewUser does not support customAttributes.\n  if (typeof request.customAttributes !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"customAttributes\\\" cannot be set when creating a new user.\");\n  } // signupNewUser does not support validSince.\n\n\n  if (typeof request.validSince !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"validSince\\\" cannot be set when creating a new user.\");\n  }\n\n  validateCreateEditRequest(request);\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // If the localId is not returned, then the request failed.\n  if (!response.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new user');\n  }\n});\nvar FIREBASE_AUTH_GET_OOB_CODE = new api_request_1.ApiSettings('/accounts:sendOobCode', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n  }\n\n  if (exports.EMAIL_ACTION_REQUEST_TYPES.indexOf(request.requestType) === -1) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + request.requestType + \"\\\" is not a supported email action request type.\");\n  }\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // If the oobLink is not returned, then the request failed.\n  if (!response.oobLink) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create the email action link');\n  }\n});\n/**\n * Class that provides the mechanism to send requests to the Firebase Auth backend endpoints.\n */\n\nvar FirebaseAuthRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  function FirebaseAuthRequestHandler(app) {\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    this.authUrlBuilder = new AuthResourceUrlBuilder(utils.getProjectId(app), 'v1');\n  }\n  /**\n   * @param {any} response The response to check for errors.\n   * @return {string|null} The error code if present; null otherwise.\n   */\n\n\n  FirebaseAuthRequestHandler.getErrorCode = function (response) {\n    return validator.isNonNullObject(response) && response.error && response.error.message || null;\n  };\n  /**\n   * Creates a new Firebase session cookie with the specified duration that can be used for\n   * session management (set as a server side session cookie with custom cookie policy).\n   * The session cookie JWT will have the same payload claims as the provided ID token.\n   *\n   * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n   * @param {number} expiresIn The session cookie duration in milliseconds.\n   *\n   * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.createSessionCookie = function (idToken, expiresIn) {\n    var request = {\n      idToken: idToken,\n      // Convert to seconds.\n      validDuration: expiresIn / 1000\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE, request).then(function (response) {\n      return response.sessionCookie;\n    });\n  };\n  /**\n   * Looks up a user by uid.\n   *\n   * @param {string} uid The uid of the user to lookup.\n   * @return {Promise<object>} A promise that resolves with the user information.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.getAccountInfoByUid = function (uid) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n\n    var request = {\n      localId: [uid]\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  };\n  /**\n   * Looks up a user by email.\n   *\n   * @param {string} email The email of the user to lookup.\n   * @return {Promise<object>} A promise that resolves with the user information.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.getAccountInfoByEmail = function (email) {\n    if (!validator.isEmail(email)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL));\n    }\n\n    var request = {\n      email: [email]\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  };\n  /**\n   * Looks up a user by phone number.\n   *\n   * @param {string} phoneNumber The phone number of the user to lookup.\n   * @return {Promise<object>} A promise that resolves with the user information.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.getAccountInfoByPhoneNumber = function (phoneNumber) {\n    if (!validator.isPhoneNumber(phoneNumber)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER));\n    }\n\n    var request = {\n      phoneNumber: [phoneNumber]\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  };\n  /**\n   * Exports the users (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param {string=} pageToken The next page token. If not specified, returns users starting\n   *     without any offset. Users are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n   *     users and the next page token if available. For the last page, an empty list of users\n   *     and no page token are returned.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.downloadAccount = function (maxResults, pageToken) {\n    if (maxResults === void 0) {\n      maxResults = MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE;\n    } // Construct request.\n\n\n    var request = {\n      maxResults: maxResults,\n      nextPageToken: pageToken\n    }; // Remove next page token if not provided.\n\n    if (typeof request.nextPageToken === 'undefined') {\n      delete request.nextPageToken;\n    }\n\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT, request).then(function (response) {\n      // No more users available.\n      if (!response.users) {\n        response.users = [];\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Imports the list of users provided to Firebase Auth. This is useful when\n   * migrating from an external authentication system without having to use the Firebase CLI SDK.\n   * At most, 1000 users are allowed to be imported one at a time.\n   * When importing a list of password users, UserImportOptions are required to be specified.\n   *\n   * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n   * @param {UserImportOptions=} options The user import options, required when the users provided\n   *     include password credentials.\n   * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n   *     with the result of the import. This includes the number of successful imports, the number\n   *     of failed uploads and their corresponding errors.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.uploadAccount = function (users, options) {\n    // This will throw if any error is detected in the hash options.\n    // For errors in the list of users, this will not throw and will report the errors and the\n    // corresponding user index in the user import generated response below.\n    // No need to validate raw request or raw response as this is done in UserImportBuilder.\n    var userImportBuilder = new user_import_builder_1.UserImportBuilder(users, options, function (userRequest) {\n      // Pass true to validate the uploadAccount specific fields.\n      validateCreateEditRequest(userRequest, true);\n    });\n    var request = userImportBuilder.buildRequest(); // Fail quickly if more users than allowed are to be imported.\n\n    if (validator.isArray(users) && users.length > MAX_UPLOAD_ACCOUNT_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, \"A maximum of \" + MAX_UPLOAD_ACCOUNT_BATCH_SIZE + \" users can be imported at once.\");\n    } // If no remaining user in request after client side processing, there is no need\n    // to send the request to the server.\n\n\n    if (request.users.length === 0) {\n      return Promise.resolve(userImportBuilder.buildResponse([]));\n    }\n\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_UPLOAD_ACCOUNT, request).then(function (response) {\n      // No error object is returned if no error encountered.\n      var failedUploads = response.error || []; // Rewrite response as UserImportResult and re-insert client previously detected errors.\n\n      return userImportBuilder.buildResponse(failedUploads);\n    });\n  };\n  /**\n   * Deletes an account identified by a uid.\n   *\n   * @param {string} uid The uid of the user to delete.\n   * @return {Promise<object>} A promise that resolves when the user is deleted.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.deleteAccount = function (uid) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n\n    var request = {\n      localId: uid\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_DELETE_ACCOUNT, request);\n  };\n  /**\n   * Sets additional developer claims on an existing user identified by provided UID.\n   *\n   * @param {string} uid The user to edit.\n   * @param {object} customUserClaims The developer claims to set.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     with the user id that was edited.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.setCustomUserClaims = function (uid, customUserClaims) {\n    // Validate user UID.\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    } else if (!validator.isObject(customUserClaims)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'CustomUserClaims argument must be an object or null.'));\n    } // Delete operation. Replace null with an empty object.\n\n\n    if (customUserClaims === null) {\n      customUserClaims = {};\n    } // Construct custom user attribute editting request.\n\n\n    var request = {\n      localId: uid,\n      customAttributes: JSON.stringify(customUserClaims)\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(function (response) {\n      return response.localId;\n    });\n  };\n  /**\n   * Edits an existing user.\n   *\n   * @param {string} uid The user to edit.\n   * @param {object} properties The properties to set on the user.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     with the user id that was edited.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.updateExistingAccount = function (uid, properties) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    } else if (!validator.isNonNullObject(properties)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n    } // Build the setAccountInfo request.\n\n\n    var request = deep_copy_1.deepCopy(properties);\n    request.localId = uid; // For deleting displayName or photoURL, these values must be passed as null.\n    // They will be removed from the backend request and an additional parameter\n    // deleteAttribute: ['PHOTO_URL', 'DISPLAY_NAME']\n    // with an array of the parameter names to delete will be passed.\n    // Parameters that are deletable and their deleteAttribute names.\n    // Use client facing names, photoURL instead of photoUrl.\n\n    var deletableParams = {\n      displayName: 'DISPLAY_NAME',\n      photoURL: 'PHOTO_URL'\n    }; // Properties to delete if available.\n\n    request.deleteAttribute = [];\n\n    for (var key in deletableParams) {\n      if (request[key] === null) {\n        // Add property identifier to list of attributes to delete.\n        request.deleteAttribute.push(deletableParams[key]); // Remove property from request.\n\n        delete request[key];\n      }\n    }\n\n    if (request.deleteAttribute.length === 0) {\n      delete request.deleteAttribute;\n    } // For deleting phoneNumber, this value must be passed as null.\n    // It will be removed from the backend request and an additional parameter\n    // deleteProvider: ['phone'] with an array of providerIds (phone in this case),\n    // will be passed.\n    // Currently this applies to phone provider only.\n\n\n    if (request.phoneNumber === null) {\n      request.deleteProvider = ['phone'];\n      delete request.phoneNumber;\n    } else {\n      // Doesn't apply to other providers in admin SDK.\n      delete request.deleteProvider;\n    } // Rewrite photoURL to photoUrl.\n\n\n    if (typeof request.photoURL !== 'undefined') {\n      request.photoUrl = request.photoURL;\n      delete request.photoURL;\n    } // Rewrite disabled to disableUser.\n\n\n    if (typeof request.disabled !== 'undefined') {\n      request.disableUser = request.disabled;\n      delete request.disabled;\n    }\n\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(function (response) {\n      return response.localId;\n    });\n  };\n  /**\n   * Revokes all refresh tokens for the specified user identified by the uid provided.\n   * In addition to revoking all refresh tokens for a user, all ID tokens issued\n   * before revocation will also be revoked on the Auth backend. Any request with an\n   * ID token generated before revocation will be rejected with a token expired error.\n   * Note that due to the fact that the timestamp is stored in seconds, any tokens minted in\n   * the same second as the revocation will still be valid. If there is a chance that a token\n   * was minted in the last second, delay for 1 second before revoking.\n   *\n   * @param {string} uid The user whose tokens are to be revoked.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     successfully with the user id of the corresponding user.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.revokeRefreshTokens = function (uid) {\n    // Validate user UID.\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n\n    var request = {\n      localId: uid,\n      // validSince is in UTC seconds.\n      validSince: Math.ceil(new Date().getTime() / 1000)\n    };\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(function (response) {\n      return response.localId;\n    });\n  };\n  /**\n   * Create a new user with the properties supplied.\n   *\n   * @param {object} properties The properties to set on the user.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     with the user id that was created.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.createNewAccount = function (properties) {\n    if (!validator.isNonNullObject(properties)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n    } // Build the signupNewUser request.\n\n\n    var request = deep_copy_1.deepCopy(properties); // Rewrite photoURL to photoUrl.\n\n    if (typeof request.photoURL !== 'undefined') {\n      request.photoUrl = request.photoURL;\n      delete request.photoURL;\n    } // Rewrite uid to localId if it exists.\n\n\n    if (typeof request.uid !== 'undefined') {\n      request.localId = request.uid;\n      delete request.uid;\n    }\n\n    return this.invokeRequestHandler(this.authUrlBuilder, exports.FIREBASE_AUTH_SIGN_UP_NEW_USER, request).then(function (response) {\n      // Return the user id.\n      return response.localId;\n    });\n  };\n  /**\n   * Generates the out of band email action link for the email specified using the action code settings provided.\n   * Returns a promise that resolves with the generated link.\n   *\n   * @param {string} requestType The request type. This could be either used for password reset,\n   *     email verification, email link sign-in.\n   * @param {string} email The email of the user the link is being sent to.\n   * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n   *     the link is to be handled by a mobile app and the additional state information to be passed in the\n   *     deep link, etc.\n   * @return {Promise<string>} A promise that resolves with the email action link.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.getEmailActionLink = function (requestType, email, actionCodeSettings) {\n    var request = {\n      requestType: requestType,\n      email: email,\n      returnOobLink: true\n    }; // ActionCodeSettings required for email link sign-in to determine the url where the sign-in will\n    // be completed.\n\n    if (typeof actionCodeSettings !== 'undefined' || requestType === 'EMAIL_SIGNIN') {\n      try {\n        var builder = new action_code_settings_builder_1.ActionCodeSettingsBuilder(actionCodeSettings);\n        request = deep_copy_1.deepExtend(request, builder.buildRequest());\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n\n    return this.invokeRequestHandler(this.authUrlBuilder, FIREBASE_AUTH_GET_OOB_CODE, request).then(function (response) {\n      // Return the link.\n      return response.oobLink;\n    });\n  };\n  /**\n   * Invokes the request handler based on the API settings object passed.\n   *\n   * @param {AuthResourceUrlBuilder} urlBuilder The URL builder for Auth endpoints.\n   * @param {ApiSettings} apiSettings The API endpoint settings to apply to request and response.\n   * @param {object} requestData The request data.\n   * @param {object=} additionalResourceParams Additional resource related params if needed.\n   * @return {Promise<object>} A promise that resolves with the response.\n   */\n\n\n  FirebaseAuthRequestHandler.prototype.invokeRequestHandler = function (urlBuilder, apiSettings, requestData, additionalResourceParams) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      // Validate request.\n      var requestValidator = apiSettings.getRequestValidator();\n      requestValidator(requestData); // Process request.\n\n      var req = {\n        method: apiSettings.getHttpMethod(),\n        url: urlBuilder.getUrl(apiSettings.getEndpoint(), additionalResourceParams),\n        headers: FIREBASE_AUTH_HEADER,\n        data: requestData,\n        timeout: FIREBASE_AUTH_TIMEOUT\n      };\n      return _this.httpClient.send(req);\n    }).then(function (response) {\n      // Validate response.\n      var responseValidator = apiSettings.getResponseValidator();\n      responseValidator(response.data); // Return entire response.\n\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var error = err.response.data;\n        var errorCode = FirebaseAuthRequestHandler.getErrorCode(error);\n        throw error_1.FirebaseAuthError.fromServerError(errorCode,\n        /* message */\n        undefined, error);\n      }\n\n      throw err;\n    });\n  };\n\n  return FirebaseAuthRequestHandler;\n}();\n\nexports.FirebaseAuthRequestHandler = FirebaseAuthRequestHandler;","map":null,"metadata":{},"sourceType":"script"}