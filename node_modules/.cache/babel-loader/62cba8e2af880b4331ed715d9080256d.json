{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Service; // extends Namespace\n\nvar Namespace = require(\"./namespace\");\n\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util = require(\"./util\"),\n    rpc = require(\"./rpc\");\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\n\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n  /**\r\n   * Service methods.\r\n   * @type {Object.<string,Method>}\r\n   */\n\n  this.methods = {}; // toJSON, marker\n\n  /**\r\n   * Cached methods as an array.\r\n   * @type {Method[]|null}\r\n   * @private\r\n   */\n\n  this._methodsArray = null;\n}\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\n\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\n\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) {\n    service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  }\n  if (json.nested) service.addJSON(json.nested);\n  service.comment = json.comment;\n  return service;\n};\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\n\n\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) ||\n  /* istanbul ignore next */\n  {}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\n\n\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function get() {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\n\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n/**\r\n * @override\r\n */\n\n\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n/**\r\n * @override\r\n */\n\n\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n\n  for (var i = 0; i < methods.length; ++i) {\n    methods[i].resolve();\n  }\n\n  return Namespace.prototype.resolve.call(this);\n};\n/**\r\n * @override\r\n */\n\n\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n\n  return Namespace.prototype.add.call(this, object);\n};\n/**\r\n * @override\r\n */\n\n\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n\n  return Namespace.prototype.remove.call(this, object);\n};\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\n\n\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n\n  for (var i = 0, method; i <\n  /* initializes */\n  this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n\n  return rpcService;\n};","map":null,"metadata":{},"sourceType":"script"}