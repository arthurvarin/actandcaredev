{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar android_app_1 = require(\"./android-app\");\n\nvar ios_app_1 = require(\"./ios-app\");\n\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\n/**\n * Internals of a Project Management instance.\n */\n\n\nvar ProjectManagementInternals =\n/** @class */\nfunction () {\n  function ProjectManagementInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<void>} An empty Promise that will be resolved when the service is deleted.\n   */\n\n\n  ProjectManagementInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return ProjectManagementInternals;\n}();\n/**\n * ProjectManagement service bound to the provided app.\n */\n\n\nvar ProjectManagement =\n/** @class */\nfunction () {\n  /**\n   * @param {object} app The app for this ProjectManagement service.\n   * @constructor\n   */\n  function ProjectManagement(app) {\n    this.app = app;\n    this.INTERNAL = new ProjectManagementInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app ' + 'instance.');\n    } // Assert that a specific project ID was provided within the app.\n\n\n    this.projectId = utils.getProjectId(app);\n\n    if (!validator.isNonEmptyString(this.projectId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n    }\n\n    this.resourceName = \"projects/\" + this.projectId;\n    this.requestHandler = new project_management_api_request_1.ProjectManagementRequestHandler(app);\n  }\n  /**\n   * Lists up to 100 Firebase Android apps associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listAndroidApps = function () {\n    return this.listPlatformApps('android', 'listAndroidApps()');\n  };\n  /**\n   * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listIosApps = function () {\n    return this.listPlatformApps('ios', 'listIosApps()');\n  };\n  /**\n   * Returns an AndroidApp object for the given appId. No RPC is made.\n   */\n\n\n  ProjectManagement.prototype.androidApp = function (appId) {\n    return new android_app_1.AndroidApp(appId, this.requestHandler);\n  };\n  /**\n   * Returns an IosApp object for the given appId. No RPC is made.\n   */\n\n\n  ProjectManagement.prototype.iosApp = function (appId) {\n    return new ios_app_1.IosApp(appId, this.requestHandler);\n  };\n  /**\n   * Returns a ShaCertificate object for the given shaHash. No RPC is made.\n   */\n\n\n  ProjectManagement.prototype.shaCertificate = function (shaHash) {\n    return new android_app_1.ShaCertificate(shaHash);\n  };\n  /**\n   * Creates a new Firebase Android app, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n    var _this = this;\n\n    return this.requestHandler.createAndroidApp(this.resourceName, packageName, displayName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, \"\\\"responseData.appId\\\" field must be present in createAndroidApp()'s response data.\");\n      return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Creates a new Firebase iOS app, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n    var _this = this;\n\n    return this.requestHandler.createIosApp(this.resourceName, bundleId, displayName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, \"\\\"responseData.appId\\\" field must be present in createIosApp()'s response data.\");\n      return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n    var _this = this;\n\n    var listPromise = platform === 'android' ? this.requestHandler.listAndroidApps(this.resourceName) : this.requestHandler.listIosApps(this.resourceName);\n    return listPromise.then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n\n      if (!responseData.apps) {\n        return [];\n      }\n\n      project_management_api_request_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n      return responseData.apps.map(function (appJson) {\n        project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n\n        if (platform === 'android') {\n          return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n        } else {\n          return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n        }\n      });\n    });\n  };\n\n  return ProjectManagement;\n}();\n\nexports.ProjectManagement = ProjectManagement;","map":null,"metadata":{},"sourceType":"script"}