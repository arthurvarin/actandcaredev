{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar Protobuf = require(\"protobufjs\");\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar _ = require(\"lodash\");\n\nfunction joinName(baseName, name) {\n  if (baseName === '') {\n    return name;\n  } else {\n    return baseName + '.' + name;\n  }\n}\n\nfunction getAllServices(obj, parentName) {\n  var objName = joinName(parentName, obj.name);\n\n  if (obj.hasOwnProperty('methods')) {\n    return [[objName, obj]];\n  } else {\n    return obj.nestedArray.map(function (child) {\n      if (child.hasOwnProperty('nested')) {\n        return getAllServices(child, objName);\n      } else {\n        return [];\n      }\n    }).reduce(function (accumulator, currentValue) {\n      return accumulator.concat(currentValue);\n    }, []);\n  }\n}\n\nfunction createDeserializer(cls, options) {\n  return function deserialize(argBuf) {\n    return cls.toObject(cls.decode(argBuf), options);\n  };\n}\n\nfunction createSerializer(cls) {\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n}\n\nfunction createMethodDefinition(method, serviceName, options) {\n  return {\n    path: '/' + serviceName + '/' + method.name,\n    requestStream: !!method.requestStream,\n    responseStream: !!method.responseStream,\n    requestSerialize: createSerializer(method.resolvedRequestType),\n    requestDeserialize: createDeserializer(method.resolvedRequestType, options),\n    responseSerialize: createSerializer(method.resolvedResponseType),\n    responseDeserialize: createDeserializer(method.resolvedResponseType, options),\n    // TODO(murgatroid99): Find a better way to handle this\n    originalName: _.camelCase(method.name)\n  };\n}\n\nfunction createServiceDefinition(service, name, options) {\n  var def = {};\n\n  for (var _i = 0, _a = service.methodsArray; _i < _a.length; _i++) {\n    var method = _a[_i];\n    def[method.name] = createMethodDefinition(method, name, options);\n  }\n\n  return def;\n}\n\nfunction createPackageDefinition(root, options) {\n  var def = {};\n\n  for (var _i = 0, _a = getAllServices(root, ''); _i < _a.length; _i++) {\n    var _b = _a[_i],\n        name = _b[0],\n        service = _b[1];\n    def[name] = createServiceDefinition(service, name, options);\n  }\n\n  return def;\n}\n\nfunction addIncludePathResolver(root, includePaths) {\n  root.resolvePath = function (origin, target) {\n    for (var _i = 0, includePaths_1 = includePaths; _i < includePaths_1.length; _i++) {\n      var directory = includePaths_1[_i];\n      var fullPath = path.join(directory, target);\n\n      try {\n        fs.accessSync(fullPath, fs.constants.R_OK);\n        return fullPath;\n      } catch (err) {\n        continue;\n      }\n    }\n\n    return null;\n  };\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename The file path to load. Can be an absolute path or relative to\n *     an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\n\n\nfunction load(filename, options) {\n  var root = new Protobuf.Root();\n  options = options || {};\n\n  if (!!options.includeDirs) {\n    if (!(options.includeDirs instanceof Array)) {\n      return Promise.reject(new Error('The includeDirs option must be an array'));\n    }\n\n    addIncludePathResolver(root, options.includeDirs);\n  }\n\n  return root.load(filename, options).then(function (loadedRoot) {\n    loadedRoot.resolveAll();\n    return createPackageDefinition(root, options);\n  });\n}\n\nexports.load = load;\n\nfunction loadSync(filename, options) {\n  var root = new Protobuf.Root();\n  options = options || {};\n\n  if (!!options.includeDirs) {\n    if (!(options.includeDirs instanceof Array)) {\n      throw new Error('The include option must be an array');\n    }\n\n    addIncludePathResolver(root, options.includeDirs);\n  }\n\n  var loadedRoot = root.loadSync(filename, options);\n  loadedRoot.resolveAll();\n  return createPackageDefinition(root, options);\n}\n\nexports.loadSync = loadSync;","map":null,"metadata":{},"sourceType":"script"}