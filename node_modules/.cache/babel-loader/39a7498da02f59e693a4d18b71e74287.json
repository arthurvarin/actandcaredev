{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\n\nvar _defineProperty = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar constants = require('./constants');\n/**\n * Wrap a function to pass null-like values through without calling it. If no\n * function is given, just uses the identity.\n * @private\n * @param {?function} func The function to wrap\n * @return {function} The wrapped function\n */\n\n\nexports.wrapIgnoreNull = function wrapIgnoreNull(func) {\n  if (!func) {\n    return function (x) {\n      return x;\n    };\n  }\n\n  return function (arg) {\n    if (arg === null || arg === undefined) {\n      return null;\n    }\n\n    return func(arg);\n  };\n};\n/**\n * The logger object for the gRPC module. Defaults to console.\n * @private\n */\n\n\nexports.logger = console;\n/**\n * The current logging verbosity. 0 corresponds to logging everything\n * @private\n */\n\nexports.logVerbosity = 0;\n/**\n * Log a message if the severity is at least as high as the current verbosity\n * @private\n * @param {Number} severity A value of the grpc.logVerbosity map\n * @param {String} message The message to log\n */\n\nexports.log = function log(severity, message) {\n  if (severity >= exports.logVerbosity) {\n    exports.logger.error(message);\n  }\n};\n/**\n * Default options for loading proto files into gRPC\n * @alias grpc~defaultLoadOptions\n */\n\n\nexports.defaultGrpcOptions = {\n  convertFieldsToCamelCase: false,\n  binaryAsBase64: false,\n  longsAsStrings: true,\n  enumsAsStrings: true,\n  deprecatedArgumentOrder: false\n};\n/**\n * Create an Error object from a status object\n * @param {grpc~StatusObject} status The status object\n * @return {Error} The resulting Error\n */\n\nexports.createStatusError = function (status) {\n  var inverted = Object.keys(constants.status).reduce(function (acc, key) {\n    acc[constants.status[key]] = key;\n    return acc;\n  }, {});\n  var statusName = inverted[status.code];\n  var message = \"\".concat(status.code, \" \").concat(statusName, \": \").concat(status.details);\n  var error = new Error(message);\n  error.code = status.code;\n  error.metadata = status.metadata;\n  error.details = status.details;\n  return error;\n};\n/**\n * Get a method's type from its definition\n * @param {grpc~MethodDefinition} method_definition\n * @return {number}\n */\n\n\nexports.getMethodType = function (method_definition) {\n  if (method_definition.requestStream) {\n    if (method_definition.responseStream) {\n      return constants.methodTypes.BIDI_STREAMING;\n    } else {\n      return constants.methodTypes.CLIENT_STREAMING;\n    }\n  } else {\n    if (method_definition.responseStream) {\n      return constants.methodTypes.SERVER_STREAMING;\n    } else {\n      return constants.methodTypes.UNARY;\n    }\n  }\n};\n/**\n * Iterate over a collection of items, and run the given handler.\n * Return the results as a flattened array of values.\n *\n * @private\n *\n * @param {Array} collection Array of items to process\n * @param {Function} handler The function to call on each element in the array\n * @return {Array} A flattened array of results.\n */\n\n\nexports.flatMap = function (collection, handler) {\n  var mapped = collection.map(handler);\n  return mapped.reduce(function (acc, curr) {\n    return acc.concat(curr);\n  }, []);\n};\n/**\n * Given an array of property names and an array of values,\n * combine the two into an object map.\n * Equivalent to _.zipObject.\n *\n * @private\n *\n * @param props {Array<String>} Array of property names\n * @param values {Array} Array of property values\n * @return {Object} An object with the combined values\n */\n\n\nexports.zipObject = function (props, values) {\n  return props.reduce(function (acc, curr, idx) {\n    return Object.assign(acc, _defineProperty({}, curr, values[idx]));\n  }, {});\n}; // JSDoc definitions that are used in multiple other modules\n\n/**\n * Represents the status of a completed request. If `code` is\n * {@link grpc.status}.OK, then the request has completed successfully.\n * Otherwise, the request has failed, `details` will contain a description of\n * the error. Either way, `metadata` contains the trailing response metadata\n * sent by the server when it finishes processing the call.\n * @typedef {object} grpc~StatusObject\n * @property {number} code The error code, a key of {@link grpc.status}\n * @property {string} details Human-readable description of the status\n * @property {grpc.Metadata} metadata Trailing metadata sent with the status,\n *     if applicable\n */\n\n/**\n * Describes how a request has failed. The member `message` will be the same as\n * `details` in {@link grpc~StatusObject}, and `code` and `metadata` are the\n * same as in that object.\n * @typedef {Error} grpc~ServiceError\n * @property {number} code The error code, a key of {@link grpc.status} that is\n *     not `grpc.status.OK`\n * @property {grpc.Metadata} metadata Trailing metadata sent with the status,\n *     if applicable\n */\n\n/**\n * The EventEmitter class in the event standard module\n * @external EventEmitter\n * @see https://nodejs.org/api/events.html#events_class_eventemitter\n */\n\n/**\n * The Readable class in the stream standard module\n * @external Readable\n * @see https://nodejs.org/api/stream.html#stream_readable_streams\n */\n\n/**\n * The Writable class in the stream standard module\n * @external Writable\n * @see https://nodejs.org/api/stream.html#stream_writable_streams\n */\n\n/**\n * The Duplex class in the stream standard module\n * @external Duplex\n * @see https://nodejs.org/api/stream.html#stream_class_stream_duplex\n */\n\n/**\n * A serialization function\n * @callback grpc~serialize\n * @param {*} value The value to serialize\n * @return {Buffer} The value serialized as a byte sequence\n */\n\n/**\n * A deserialization function\n * @callback grpc~deserialize\n * @param {Buffer} data The byte sequence to deserialize\n * @return {*} The data deserialized as a value\n */\n\n/**\n * The deadline of an operation. If it is a date, the deadline is reached at\n * the date and time specified. If it is a finite number, it is treated as\n * a number of milliseconds since the Unix Epoch. If it is Infinity, the\n * deadline will never be reached. If it is -Infinity, the deadline has already\n * passed.\n * @typedef {(number|Date)} grpc~Deadline\n */\n\n/**\n * An object that completely defines a service method signature.\n * @typedef {Object} grpc~MethodDefinition\n * @property {string} path The method's URL path\n * @property {boolean} requestStream Indicates whether the method accepts\n *     a stream of requests\n * @property {boolean} responseStream Indicates whether the method returns\n *     a stream of responses\n * @property {grpc~serialize} requestSerialize Serialization\n *     function for request values\n * @property {grpc~serialize} responseSerialize Serialization\n *     function for response values\n * @property {grpc~deserialize} requestDeserialize Deserialization\n *     function for request data\n * @property {grpc~deserialize} responseDeserialize Deserialization\n *     function for repsonse data\n */\n\n/**\n * @function MetadataListener\n * @param {grpc.Metadata} metadata The response metadata.\n * @param {function} next Passes metadata to the next interceptor.\n */\n\n/**\n * @function MessageListener\n * @param {jspb.Message} message The response message.\n * @param {function} next Passes a message to the next interceptor.\n */\n\n/**\n * @function StatusListener\n * @param {grpc~StatusObject} status The response status.\n * @param {function} next Passes a status to the next interceptor.\n */\n\n/**\n * A set of interceptor functions triggered by responses\n * @typedef {object} grpc~Listener\n * @property {MetadataListener=} onReceiveMetadata A function triggered by\n *     response metadata.\n * @property {MessageListener=} onReceiveMessage A function triggered by a\n *     response message.\n * @property {StatusListener=} onReceiveStatus A function triggered by a\n *     response status.\n */\n\n/**\n * @function MetadataRequester\n * @param {grpc.Metadata} metadata The request metadata.\n * @param {grpc~Listener} listener A listener wired to the previous layers\n *     in the interceptor stack.\n * @param {function} next Passes metadata and a listener to the next\n *      interceptor.\n */\n\n/**\n * @function MessageRequester\n * @param {jspb.Message} message The request message.\n * @param {function} next Passes a message to the next interceptor.\n */\n\n/**\n * @function CloseRequester\n * @param {function} next Calls the next interceptor.\n */\n\n/**\n * @function CancelRequester\n * @param {function} next Calls the next interceptor.\n */\n\n/**\n * @function GetPeerRequester\n * @param {function} next Calls the next interceptor.\n * @return {string}\n */\n\n/**\n * @typedef {object} grpc~Requester\n * @param {MetadataRequester=} start A function triggered when the call begins.\n * @param {MessageRequester=} sendMessage A function triggered by the request\n *     message.\n * @param {CloseRequester=} halfClose A function triggered when the client\n *     closes the call.\n * @param {CancelRequester=} cancel A function triggered when the call is\n *     cancelled.\n * @param {GetPeerRequester=} getPeer A function triggered when the endpoint is\n *     requested.\n */\n\n/**\n * An object that completely defines a service.\n * @typedef {Object.<string, grpc~MethodDefinition>} grpc~ServiceDefinition\n */\n\n/**\n * An object that defines a protobuf type\n * @typedef {object} grpc~ProtobufTypeDefinition\n * @param {string} format The format of the type definition object\n * @param {*} type The type definition object\n * @param {Buffer[]} fileDescriptorProtos Binary protobuf file\n *     descriptors for all files loaded to construct this type\n */\n\n/**\n * An object that defines a package hierarchy with multiple services\n * @typedef {Object.<string, grpc~ServiceDefinition|grpc~ProtobufTypeDefinition>} grpc~PackageDefinition\n */\n\n/**\n * A function for dynamically assigning an interceptor to a call.\n * @function InterceptorProvider\n * @param {grpc~MethodDefinition} method_definition The method to provide\n *     an interceptor for.\n * @return {Interceptor|null} The interceptor to provide or nothing\n */\n\n/**\n * A function which can modify call options and produce methods to intercept\n * RPC operations.\n * @function Interceptor\n * @param {object} options The grpc call options\n * @param {NextCall} nextCall\n * @return {InterceptingCall}\n */\n\n/**\n * A function which produces the next InterceptingCall.\n * @function NextCall\n * @param {object} options The grpc call options\n * @return {InterceptingCall|null}\n */","map":null,"metadata":{},"sourceType":"script"}