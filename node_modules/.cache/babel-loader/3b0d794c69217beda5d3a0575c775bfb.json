{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar instance_id_request_1 = require(\"./instance-id-request\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * Internals of an InstanceId service instance.\n */\n\n\nvar InstanceIdInternals =\n/** @class */\nfunction () {\n  function InstanceIdInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  InstanceIdInternals.prototype.delete = function () {\n    // There are no resources to clean up\n    return Promise.resolve(undefined);\n  };\n\n  return InstanceIdInternals;\n}();\n\nvar InstanceId =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this InstanceId service.\n   * @constructor\n   */\n  function InstanceId(app) {\n    this.INTERNAL = new InstanceIdInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.instanceId() must be a valid Firebase app instance.');\n    }\n\n    var projectId = utils.getProjectId(app);\n\n    if (!validator.isNonEmptyString(projectId)) {\n      // Assert for an explicit projct ID (either via AppOptions or the cert itself).\n      throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for InstanceId. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n    }\n\n    this.app_ = app;\n    this.requestHandler = new instance_id_request_1.FirebaseInstanceIdRequestHandler(app, projectId);\n  }\n  /**\n   * Deletes the specified instance ID from Firebase. This can be used to delete an instance ID\n   * and associated user data from a Firebase project, pursuant to the General Data Protection\n   * Regulation (GDPR).\n   *\n   * @param {string} instanceId The instance ID to be deleted\n   * @return {Promise<void>} A promise that resolves when the instance ID is successfully deleted.\n   */\n\n\n  InstanceId.prototype.deleteInstanceId = function (instanceId) {\n    return this.requestHandler.deleteInstanceId(instanceId).then(function (result) {// Return nothing on success\n    });\n  };\n\n  Object.defineProperty(InstanceId.prototype, \"app\", {\n    /**\n     * Returns the app associated with this InstanceId instance.\n     *\n     * @return {FirebaseApp} The app associated with this InstanceId instance.\n     */\n    get: function get() {\n      return this.app_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return InstanceId;\n}();\n\nexports.InstanceId = InstanceId;","map":null,"metadata":{},"sourceType":"script"}