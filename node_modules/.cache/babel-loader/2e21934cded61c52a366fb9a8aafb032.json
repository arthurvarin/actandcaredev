{"ast":null,"code":"var assert = require('assert'); // The Connection class\n// ====================\n// The Connection class manages HTTP/2 connections. Each instance corresponds to one transport\n// stream (TCP stream). It operates by sending and receiving frames and is implemented as a\n// [Flow](flow.html) subclass.\n\n\nvar Flow = require('./flow').Flow;\n\nexports.Connection = Connection; // Public API\n// ----------\n// * **new Connection(log, firstStreamId, settings)**: create a new Connection\n//\n// * **Event: 'error' (type)**: signals a connection level error made by the other end\n//\n// * **Event: 'peerError' (type)**: signals the receipt of a GOAWAY frame that contains an error\n//   code other than NO_ERROR\n//\n// * **Event: 'stream' (stream)**: signals that there's an incoming stream\n//\n// * **createStream(): stream**: initiate a new stream\n//\n// * **set(settings, callback)**: change the value of one or more settings according to the\n//   key-value pairs of `settings`. The callback is called after the peer acknowledged the changes.\n//\n// * **ping([callback])**: send a ping and call callback when the answer arrives\n//\n// * **close([error])**: close the stream with an error code\n// Constructor\n// -----------\n// The main aspects of managing the connection are:\n\nfunction Connection(log, firstStreamId, settings) {\n  // * initializing the base class\n  Flow.call(this, 0); // * logging: every method uses the common logger object\n\n  this._log = log.child({\n    component: 'connection'\n  }); // * stream management\n\n  this._initializeStreamManagement(firstStreamId); // * lifecycle management\n\n\n  this._initializeLifecycleManagement(); // * flow control\n\n\n  this._initializeFlowControl(); // * settings management\n\n\n  this._initializeSettingsManagement(settings); // * multiplexing\n\n\n  this._initializeMultiplexing();\n}\n\nConnection.prototype = Object.create(Flow.prototype, {\n  constructor: {\n    value: Connection\n  }\n}); // Overview\n// --------\n//              |    ^             |    ^\n//              v    |             v    |\n//         +--------------+   +--------------+\n//     +---|   stream1    |---|   stream2    |----      ....      ---+\n//     |   | +----------+ |   | +----------+ |                       |\n//     |   | | stream1. | |   | | stream2. | |                       |\n//     |   +-| upstream |-+   +-| upstream |-+                       |\n//     |     +----------+       +----------+                         |\n//     |       |     ^             |     ^                           |\n//     |       v     |             v     |                           |\n//     |       +-----+-------------+-----+--------      ....         |\n//     |       ^     |             |     |                           |\n//     |       |     v             |     |                           |\n//     |   +--------------+        |     |                           |\n//     |   |   stream0    |        |     |                           |\n//     |   |  connection  |        |     |                           |\n//     |   |  management  |     multiplexing                         |\n//     |   +--------------+     flow control                         |\n//     |                           |     ^                           |\n//     |                   _read() |     | _write()                  |\n//     |                           v     |                           |\n//     |                +------------+ +-----------+                 |\n//     |                |output queue| |input queue|                 |\n//     +----------------+------------+-+-----------+-----------------+\n//                                 |     ^\n//                          read() |     | write()\n//                                 v     |\n// Stream management\n// -----------------\n\nvar Stream = require('./stream').Stream; // Initialization:\n\n\nConnection.prototype._initializeStreamManagement = function _initializeStreamManagement(firstStreamId) {\n  // * streams are stored in two data structures:\n  //   * `_streamIds` is an id -> stream map of the streams that are allowed to receive frames.\n  //   * `_streamPriorities` is a priority -> [stream] map of stream that allowed to send frames.\n  this._streamIds = [];\n  this._streamPriorities = []; // * The next outbound stream ID and the last inbound stream id\n\n  this._nextStreamId = firstStreamId;\n  this._lastIncomingStream = 0; // * Calling `_writeControlFrame` when there's an incoming stream with 0 as stream ID\n\n  this._streamIds[0] = {\n    upstream: {\n      write: this._writeControlFrame.bind(this)\n    }\n  }; // * By default, the number of concurrent outbound streams is not limited. The `_streamLimit` can\n  //   be set by the SETTINGS_MAX_CONCURRENT_STREAMS setting.\n\n  this._streamSlotsFree = Infinity;\n  this._streamLimit = Infinity;\n  this.on('RECEIVING_SETTINGS_MAX_CONCURRENT_STREAMS', this._updateStreamLimit);\n}; // `_writeControlFrame` is called when there's an incoming frame in the `_control` stream. It\n// broadcasts the message by creating an event on it.\n\n\nConnection.prototype._writeControlFrame = function _writeControlFrame(frame) {\n  if (frame.type === 'SETTINGS' || frame.type === 'PING' || frame.type === 'GOAWAY' || frame.type === 'WINDOW_UPDATE' || frame.type === 'ALTSVC') {\n    this._log.debug({\n      frame: frame\n    }, 'Receiving connection level frame');\n\n    this.emit(frame.type, frame);\n  } else {\n    this._log.error({\n      frame: frame\n    }, 'Invalid connection level frame');\n\n    this.emit('error', 'PROTOCOL_ERROR');\n  }\n}; // Methods to manage the stream slot pool:\n\n\nConnection.prototype._updateStreamLimit = function _updateStreamLimit(newStreamLimit) {\n  var wakeup = this._streamSlotsFree === 0 && newStreamLimit > this._streamLimit;\n  this._streamSlotsFree += newStreamLimit - this._streamLimit;\n  this._streamLimit = newStreamLimit;\n\n  if (wakeup) {\n    this.emit('wakeup');\n  }\n};\n\nConnection.prototype._changeStreamCount = function _changeStreamCount(change) {\n  if (change) {\n    this._log.trace({\n      free: this._streamSlotsFree,\n      change: change\n    }, 'Changing active stream count.');\n\n    var wakeup = this._streamSlotsFree === 0 && change < 0;\n    this._streamSlotsFree -= change;\n\n    if (wakeup) {\n      this.emit('wakeup');\n    }\n  }\n}; // Creating a new *inbound or outbound* stream with the given `id` (which is undefined in case of\n// an outbound stream) consists of three steps:\n//\n// 1. var stream = new Stream(this._log, this);\n// 2. this._allocateId(stream, id);\n// 2. this._allocatePriority(stream);\n// Allocating an ID to a stream\n\n\nConnection.prototype._allocateId = function _allocateId(stream, id) {\n  // * initiated stream without definite ID\n  if (id === undefined) {\n    id = this._nextStreamId;\n    this._nextStreamId += 2;\n  } // * incoming stream with a legitim ID (larger than any previous and different parity than ours)\n  else if (id > this._lastIncomingStream && (id - this._nextStreamId) % 2 !== 0) {\n      this._lastIncomingStream = id;\n    } // * incoming stream with invalid ID\n    else {\n        this._log.error({\n          stream_id: id,\n          lastIncomingStream: this._lastIncomingStream\n        }, 'Invalid incoming stream ID.');\n\n        this.emit('error', 'PROTOCOL_ERROR');\n        return undefined;\n      }\n\n  assert(!(id in this._streamIds)); // * adding to `this._streamIds`\n\n  this._log.trace({\n    s: stream,\n    stream_id: id\n  }, 'Allocating ID for stream.');\n\n  this._streamIds[id] = stream;\n  stream.id = id;\n  this.emit('new_stream', stream, id); // * forwarding connection errors from streams\n\n  stream.on('connectionError', this.emit.bind(this, 'error'));\n  return id;\n}; // Allocating a priority to a stream, and managing priority changes\n\n\nConnection.prototype._allocatePriority = function _allocatePriority(stream) {\n  this._log.trace({\n    s: stream\n  }, 'Allocating priority for stream.');\n\n  this._insert(stream, stream._priority);\n\n  stream.on('priority', this._reprioritize.bind(this, stream));\n  stream.upstream.on('readable', this.emit.bind(this, 'wakeup'));\n  this.emit('wakeup');\n};\n\nConnection.prototype._insert = function _insert(stream, priority) {\n  if (priority in this._streamPriorities) {\n    this._streamPriorities[priority].push(stream);\n  } else {\n    this._streamPriorities[priority] = [stream];\n  }\n};\n\nConnection.prototype._reprioritize = function _reprioritize(stream, priority) {\n  var bucket = this._streamPriorities[stream._priority];\n  var index = bucket.indexOf(stream);\n  assert(index !== -1);\n  bucket.splice(index, 1);\n\n  if (bucket.length === 0) {\n    delete this._streamPriorities[stream._priority];\n  }\n\n  this._insert(stream, priority);\n}; // Creating an *inbound* stream with the given ID. It is called when there's an incoming frame to\n// a previously nonexistent stream.\n\n\nConnection.prototype._createIncomingStream = function _createIncomingStream(id) {\n  this._log.debug({\n    stream_id: id\n  }, 'New incoming stream.');\n\n  var stream = new Stream(this._log, this);\n\n  this._allocateId(stream, id);\n\n  this._allocatePriority(stream);\n\n  this.emit('stream', stream, id);\n  return stream;\n}; // Creating an *outbound* stream\n\n\nConnection.prototype.createStream = function createStream() {\n  this._log.trace('Creating new outbound stream.'); // * Receiving is enabled immediately, and an ID gets assigned to the stream\n\n\n  var stream = new Stream(this._log, this);\n\n  this._allocatePriority(stream);\n\n  return stream;\n}; // Multiplexing\n// ------------\n\n\nConnection.prototype._initializeMultiplexing = function _initializeMultiplexing() {\n  this.on('window_update', this.emit.bind(this, 'wakeup'));\n  this._sendScheduled = false;\n  this._firstFrameReceived = false;\n}; // The `_send` method is a virtual method of the [Flow class](flow.html) that has to be implemented\n// by child classes. It reads frames from streams and pushes them to the output buffer.\n\n\nConnection.prototype._send = function _send(immediate) {\n  // * Do not do anything if the connection is already closed\n  if (this._closed) {\n    return;\n  } // * Collapsing multiple calls in a turn into a single deferred call\n\n\n  if (immediate) {\n    this._sendScheduled = false;\n  } else {\n    if (!this._sendScheduled) {\n      this._sendScheduled = true;\n      setImmediate(this._send.bind(this, true));\n    }\n\n    return;\n  }\n\n  this._log.trace('Starting forwarding frames from streams.'); // * Looping through priority `bucket`s in priority order.\n\n\n  priority_loop: for (var priority in this._streamPriorities) {\n    var bucket = this._streamPriorities[priority];\n    var nextBucket = []; // * Forwarding frames from buckets with round-robin scheduling.\n    //   1. pulling out frame\n    //   2. if there's no frame, skip this stream\n    //   3. if forwarding this frame would make `streamCount` greater than `streamLimit`, skip\n    //      this stream\n    //   4. adding stream to the bucket of the next round\n    //   5. assigning an ID to the frame (allocating an ID to the stream if there isn't already)\n    //   6. if forwarding a PUSH_PROMISE, allocate ID to the promised stream\n    //   7. forwarding the frame, changing `streamCount` as appropriate\n    //   8. stepping to the next stream if there's still more frame needed in the output buffer\n    //   9. switching to the bucket of the next round\n\n    while (bucket.length > 0) {\n      for (var index = 0; index < bucket.length; index++) {\n        var stream = bucket[index];\n        var frame = stream.upstream.read(this._window > 0 ? this._window : -1);\n\n        if (!frame) {\n          continue;\n        } else if (frame.count_change > this._streamSlotsFree) {\n          stream.upstream.unshift(frame);\n          continue;\n        }\n\n        nextBucket.push(stream);\n\n        if (frame.stream === undefined) {\n          frame.stream = stream.id || this._allocateId(stream);\n        }\n\n        if (frame.type === 'PUSH_PROMISE') {\n          this._allocatePriority(frame.promised_stream);\n\n          frame.promised_stream = this._allocateId(frame.promised_stream);\n        }\n\n        this._log.trace({\n          s: stream,\n          frame: frame\n        }, 'Forwarding outgoing frame');\n\n        var moreNeeded = this.push(frame);\n\n        this._changeStreamCount(frame.count_change);\n\n        assert(moreNeeded !== null); // The frame shouldn't be unforwarded\n\n        if (moreNeeded === false) {\n          break priority_loop;\n        }\n      }\n\n      bucket = nextBucket;\n      nextBucket = [];\n    }\n  } // * if we couldn't forward any frame, then sleep until window update, or some other wakeup event\n\n\n  if (moreNeeded === undefined) {\n    this.once('wakeup', this._send.bind(this));\n  }\n\n  this._log.trace({\n    moreNeeded: moreNeeded\n  }, 'Stopping forwarding frames from streams.');\n}; // The `_receive` method is another virtual method of the [Flow class](flow.html) that has to be\n// implemented by child classes. It forwards the given frame to the appropriate stream:\n\n\nConnection.prototype._receive = function _receive(frame, done) {\n  this._log.trace({\n    frame: frame\n  }, 'Forwarding incoming frame'); // * first frame needs to be checked by the `_onFirstFrameReceived` method\n\n\n  if (!this._firstFrameReceived) {\n    this._firstFrameReceived = true;\n\n    this._onFirstFrameReceived(frame);\n  } // Do some sanity checking here before we create a stream\n\n\n  if ((frame.type == 'SETTINGS' || frame.type == 'PING' || frame.type == 'GOAWAY') && frame.stream != 0) {\n    // Got connection-level frame on a stream - EEP!\n    this.close('PROTOCOL_ERROR');\n    return;\n  } else if ((frame.type == 'DATA' || frame.type == 'HEADERS' || frame.type == 'PRIORITY' || frame.type == 'RST_STREAM' || frame.type == 'PUSH_PROMISE' || frame.type == 'CONTINUATION') && frame.stream == 0) {\n    // Got stream-level frame on connection - EEP!\n    this.close('PROTOCOL_ERROR');\n    return;\n  } // WINDOW_UPDATE can be on either stream or connection\n  // * gets the appropriate stream from the stream registry\n\n\n  var stream = this._streamIds[frame.stream]; // * or creates one if it's not in `this.streams`\n\n  if (!stream) {\n    stream = this._createIncomingStream(frame.stream);\n  } // * in case of PUSH_PROMISE, replaces the promised stream id with a new incoming stream\n\n\n  if (frame.type === 'PUSH_PROMISE') {\n    frame.promised_stream = this._createIncomingStream(frame.promised_stream);\n  }\n\n  frame.count_change = this._changeStreamCount.bind(this); // * and writes it to the `stream`'s `upstream`\n\n  stream.upstream.write(frame);\n  done();\n}; // Settings management\n// -------------------\n\n\nvar defaultSettings = {}; // Settings management initialization:\n\nConnection.prototype._initializeSettingsManagement = function _initializeSettingsManagement(settings) {\n  // * Setting up the callback queue for setting acknowledgements\n  this._settingsAckCallbacks = []; // * Sending the initial settings.\n\n  this._log.debug({\n    settings: settings\n  }, 'Sending the first SETTINGS frame as part of the connection header.');\n\n  this.set(settings || defaultSettings); // * Forwarding SETTINGS frames to the `_receiveSettings` method\n\n  this.on('SETTINGS', this._receiveSettings);\n  this.on('RECEIVING_SETTINGS_MAX_FRAME_SIZE', this._sanityCheckMaxFrameSize);\n}; // * Checking that the first frame the other endpoint sends is SETTINGS\n\n\nConnection.prototype._onFirstFrameReceived = function _onFirstFrameReceived(frame) {\n  if (frame.stream === 0 && frame.type === 'SETTINGS') {\n    this._log.debug('Receiving the first SETTINGS frame as part of the connection header.');\n  } else {\n    this._log.fatal({\n      frame: frame\n    }, 'Invalid connection header: first frame is not SETTINGS.');\n\n    this.emit('error', 'PROTOCOL_ERROR');\n  }\n}; // Handling of incoming SETTINGS frames.\n\n\nConnection.prototype._receiveSettings = function _receiveSettings(frame) {\n  // * If it's an ACK, call the appropriate callback\n  if (frame.flags.ACK) {\n    var callback = this._settingsAckCallbacks.shift();\n\n    if (callback) {\n      callback();\n    }\n  } // * If it's a setting change request, then send an ACK and change the appropriate settings\n  else {\n      if (!this._closed) {\n        this.push({\n          type: 'SETTINGS',\n          flags: {\n            ACK: true\n          },\n          stream: 0,\n          settings: {}\n        });\n      }\n\n      for (var name in frame.settings) {\n        this.emit('RECEIVING_' + name, frame.settings[name]);\n      }\n    }\n};\n\nConnection.prototype._sanityCheckMaxFrameSize = function _sanityCheckMaxFrameSize(value) {\n  if (value < 0x4000 || value >= 0x01000000) {\n    this._log.fatal('Received invalid value for max frame size: ' + value);\n\n    this.emit('error');\n  }\n}; // Changing one or more settings value and sending out a SETTINGS frame\n\n\nConnection.prototype.set = function set(settings, callback) {\n  // * Calling the callback and emitting event when the change is acknowledges\n  var self = this;\n\n  this._settingsAckCallbacks.push(function () {\n    for (var name in settings) {\n      self.emit('ACKNOWLEDGED_' + name, settings[name]);\n    }\n\n    if (callback) {\n      callback();\n    }\n  }); // * Sending out the SETTINGS frame\n\n\n  this.push({\n    type: 'SETTINGS',\n    flags: {\n      ACK: false\n    },\n    stream: 0,\n    settings: settings\n  });\n\n  for (var name in settings) {\n    this.emit('SENDING_' + name, settings[name]);\n  }\n}; // Lifecycle management\n// --------------------\n// The main responsibilities of lifecycle management code:\n//\n// * keeping the connection alive by\n//   * sending PINGs when the connection is idle\n//   * answering PINGs\n// * ending the connection\n\n\nConnection.prototype._initializeLifecycleManagement = function _initializeLifecycleManagement() {\n  this._pings = {};\n  this.on('PING', this._receivePing);\n  this.on('GOAWAY', this._receiveGoaway);\n  this._closed = false;\n}; // Generating a string of length 16 with random hexadecimal digits\n\n\nConnection.prototype._generatePingId = function _generatePingId() {\n  do {\n    var id = '';\n\n    for (var i = 0; i < 16; i++) {\n      id += Math.floor(Math.random() * 16).toString(16);\n    }\n  } while (id in this._pings);\n\n  return id;\n}; // Sending a ping and calling `callback` when the answer arrives\n\n\nConnection.prototype.ping = function ping(callback) {\n  var id = this._generatePingId();\n\n  var data = new Buffer(id, 'hex');\n  this._pings[id] = callback;\n\n  this._log.debug({\n    data: data\n  }, 'Sending PING.');\n\n  this.push({\n    type: 'PING',\n    flags: {\n      ACK: false\n    },\n    stream: 0,\n    data: data\n  });\n}; // Answering pings\n\n\nConnection.prototype._receivePing = function _receivePing(frame) {\n  if (frame.flags.ACK) {\n    var id = frame.data.toString('hex');\n\n    if (id in this._pings) {\n      this._log.debug({\n        data: frame.data\n      }, 'Receiving answer for a PING.');\n\n      var callback = this._pings[id];\n\n      if (callback) {\n        callback();\n      }\n\n      delete this._pings[id];\n    } else {\n      this._log.warn({\n        data: frame.data\n      }, 'Unsolicited PING answer.');\n    }\n  } else {\n    this._log.debug({\n      data: frame.data\n    }, 'Answering PING.');\n\n    this.push({\n      type: 'PING',\n      flags: {\n        ACK: true\n      },\n      stream: 0,\n      data: frame.data\n    });\n  }\n}; // Terminating the connection\n\n\nConnection.prototype.close = function close(error) {\n  if (this._closed) {\n    this._log.warn('Trying to close an already closed connection');\n\n    return;\n  }\n\n  this._log.debug({\n    error: error\n  }, 'Closing the connection');\n\n  this.push({\n    type: 'GOAWAY',\n    flags: {},\n    stream: 0,\n    last_stream: this._lastIncomingStream,\n    error: error || 'NO_ERROR'\n  });\n  this.push(null);\n  this._closed = true;\n};\n\nConnection.prototype._receiveGoaway = function _receiveGoaway(frame) {\n  this._log.debug({\n    error: frame.error\n  }, 'Other end closed the connection');\n\n  this.push(null);\n  this._closed = true;\n\n  if (frame.error !== 'NO_ERROR') {\n    this.emit('peerError', frame.error);\n  }\n}; // Flow control\n// ------------\n\n\nConnection.prototype._initializeFlowControl = function _initializeFlowControl() {\n  // Handling of initial window size of individual streams.\n  this._initialStreamWindowSize = INITIAL_STREAM_WINDOW_SIZE;\n  this.on('new_stream', function (stream) {\n    stream.upstream.setInitialWindow(this._initialStreamWindowSize);\n  });\n  this.on('RECEIVING_SETTINGS_INITIAL_WINDOW_SIZE', this._setInitialStreamWindowSize);\n\n  this._streamIds[0].upstream.setInitialWindow = function noop() {};\n}; // The initial connection flow control window is 65535 bytes.\n\n\nvar INITIAL_STREAM_WINDOW_SIZE = 65535; // A SETTINGS frame can alter the initial flow control window size for all current streams. When the\n// value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust the window size of all\n// stream by calling the `setInitialStreamWindowSize` method. The window size has to be modified by\n// the difference between the new value and the old value.\n\nConnection.prototype._setInitialStreamWindowSize = function _setInitialStreamWindowSize(size) {\n  if (this._initialStreamWindowSize === Infinity && size !== Infinity) {\n    this._log.error('Trying to manipulate initial flow control window size after flow control was turned off.');\n\n    this.emit('error', 'FLOW_CONTROL_ERROR');\n  } else {\n    this._log.debug({\n      size: size\n    }, 'Changing stream initial window size.');\n\n    this._initialStreamWindowSize = size;\n\n    this._streamIds.forEach(function (stream) {\n      stream.upstream.setInitialWindow(size);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}