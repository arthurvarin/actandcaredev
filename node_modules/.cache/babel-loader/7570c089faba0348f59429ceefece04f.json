{"ast":null,"code":"/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar common = require('@google-cloud/common');\n\nvar is = require('is');\n\nvar util = require('util');\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * @see [Cloud Pub/Sub Notifications for Google Cloud Storage]{@link https://cloud.google.com/storage/docs/pubsub-notifications}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n */\n\n\nfunction Notification(bucket, id) {\n  var methods = {\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     *     subscription publishes. If the project ID is omitted, the current\n     *     project ID will be used.\n     *\n     *     Acceptable formats are:\n     *     - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     *     - `my-topic`\n     * @param {CreateNotificationRequest} [options] Metadata to set for\n     *     the notification.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.create(function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.create().then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    create: true,\n\n    /**\n     * @typedef {array} NotificationExistsResponse\n     * @property {boolean} 0 Whether the notification exists or not.\n     */\n\n    /**\n     * @callback NotificationExistsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {boolean} exists Whether the notification exists or not.\n     */\n\n    /**\n     * Check if the notification exists.\n     *\n     * @param {NotificationExistsCallback} [callback] Callback function.\n     * @returns {Promise<NotificationExistsResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.exists(function(err, exists) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.exists().then(function(data) {\n     *   const exists = data[0];\n     * });\n     */\n    exists: true\n  };\n  common.ServiceObject.call(this, {\n    parent: bucket,\n    baseUrl: '/notificationConfigs',\n    id: id.toString(),\n    createMethod: bucket.createNotification.bind(bucket),\n    methods: methods\n  });\n}\n\nutil.inherits(Notification, common.ServiceObject);\n/**\n * @typedef {array} DeleteNotificationResponse\n * @property {object} 0 The full API response.\n */\n\n/**\n * @callback DeleteNotificationCallback\n * @param {?Error} err Request error, if any.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Permanently deletes a notification subscription.\n *\n * @see [Notifications: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete}\n *\n * @param {object} [options] Configuration options.\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {DeleteNotificationCallback} [callback] Callback function.\n * @returns {Promise<DeleteNotificationResponse>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const notification = myBucket.notification('1');\n *\n * notification.delete(function(err, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * notification.delete().then(function(data) {\n *   const apiResponse = data[0];\n * });\n *\n * @example <caption>include:samples/notifications.js</caption>\n * region_tag:storage_delete_notification\n * Another example:\n */\n\nNotification.prototype.delete = function (options, callback) {\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.request({\n    method: 'DELETE',\n    uri: '',\n    qs: options\n  }, callback || common.util.noop);\n};\n/**\n * @typedef {array} GetNotificationResponse\n * @property {Notification} 0 The {@link Notification}\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback GetNotificationCallback\n * @param {?Error} err Request error, if any.\n * @param {Notification} notification The {@link Notification}.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Get a notification and its metadata if it exists.\n *\n * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n *\n * @param {object} [options] Configuration options.\n *     See {@link Bucket#createNotification} for create options.\n * @param {boolean} [options.autoCreate] Automatically create the object if\n *     it does not exist. Default: `false`.\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {GetNotificationCallback} [callback] Callback function.\n * @return {Promise<GetNotificationCallback>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const notification = myBucket.notification('1');\n *\n * notification.get(function(err, notification, apiResponse) {\n *   // `notification.metadata` has been populated.\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * notification.get().then(function(data) {\n *   const notification = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\n\nNotification.prototype.get = function (options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var autoCreate = options.autoCreate;\n  delete options.autoCreate;\n\n  function onCreate(err, notification, apiResponse) {\n    if (err) {\n      if (err.code === 409) {\n        self.get(options, callback);\n        return;\n      }\n\n      callback(err, null, apiResponse);\n      return;\n    }\n\n    callback(null, notification, apiResponse);\n  }\n\n  this.getMetadata(options, function (err, metadata) {\n    if (err) {\n      if (err.code === 404 && autoCreate) {\n        var args = [];\n\n        if (!is.empty(options)) {\n          args.push(options);\n        }\n\n        args.push(onCreate);\n        self.create.apply(self, args);\n        return;\n      }\n\n      callback(err, null, metadata);\n      return;\n    }\n\n    callback(null, self, metadata);\n  });\n};\n/**\n * @typedef {array} GetNotificationMetadataResponse\n * @property {object} 0 The notification metadata.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback GetNotificationMetadataCallback\n * @param {?Error} err Request error, if any.\n * @param {object} files The notification metadata.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Get the notification's metadata.\n *\n * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n *\n * @param {object} [options] Configuration options.\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {GetNotificationMetadataCallback} [callback] Callback function.\n * @returns {Promise<GetNotificationMetadataResponse>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const notification = myBucket.notification('1');\n *\n * notification.getMetadata(function(err, metadata, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * notification.getMetadata().then(function(data) {\n *   const metadata = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * @example <caption>include:samples/notifications.js</caption>\n * region_tag:storage_notifications_get_metadata\n * Another example:\n */\n\n\nNotification.prototype.getMetadata = function (options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.request({\n    uri: '',\n    qs: options\n  }, function (err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    self.metadata = resp;\n    callback(null, self.metadata, resp);\n  });\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\n\ncommon.util.promisifyAll(Notification);\n/**\n * Reference to the {@link Notification} class.\n * @name module:@google-cloud/storage.Notification\n * @see Notification\n */\n\nmodule.exports = Notification;","map":null,"metadata":{},"sourceType":"script"}