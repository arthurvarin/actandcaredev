{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_1 = require(\"../auth/credential\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * Internals of a Storage instance.\n */\n\n\nvar StorageInternals =\n/** @class */\nfunction () {\n  function StorageInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  StorageInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return StorageInternals;\n}();\n/**\n * Storage service bound to the provided app.\n */\n\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this Storage service.\n   * @constructor\n   */\n  function Storage(app) {\n    this.INTERNAL = new StorageInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-argument',\n        message: 'First argument passed to admin.storage() must be a valid Firebase app instance.'\n      });\n    }\n\n    var storage;\n\n    try {\n      storage = require('@google-cloud/storage');\n    } catch (err) {\n      throw new error_1.FirebaseError({\n        code: 'storage/missing-dependencies',\n        message: 'Failed to import the Cloud Storage client library for Node.js. ' + 'Make sure to install the \"@google-cloud/storage\" npm package. ' + (\"Original error: \" + err)\n      });\n    }\n\n    var cert = app.options.credential.getCertificate();\n\n    if (cert != null) {\n      // cert is available when the SDK has been initialized with a service account JSON file,\n      // or by setting the GOOGLE_APPLICATION_CREDENTIALS envrionment variable.\n      this.storageClient = new storage({\n        projectId: cert.projectId,\n        credentials: {\n          private_key: cert.privateKey,\n          client_email: cert.clientEmail\n        }\n      });\n    } else if (app.options.credential instanceof credential_1.ApplicationDefaultCredential) {\n      // Try to use the Google application default credentials.\n      this.storageClient = new storage();\n    } else {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-credential',\n        message: 'Failed to initialize Google Cloud Storage client with the available credential. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Storage API.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n  /**\n   * Returns a reference to a Google Cloud Storage bucket. Returned reference can be used to upload\n   * and download content from Google Cloud Storage.\n   *\n   * @param {string=} name Optional name of the bucket to be retrieved. If name is not specified,\n   *   retrieves a reference to the default bucket.\n   * @return {Bucket} A Bucket object from the @google-cloud/storage library.\n   */\n\n\n  Storage.prototype.bucket = function (name) {\n    var bucketName = typeof name !== 'undefined' ? name : this.appInternal.options.storageBucket;\n\n    if (validator.isNonEmptyString(bucketName)) {\n      return this.storageClient.bucket(bucketName);\n    }\n\n    throw new error_1.FirebaseError({\n      code: 'storage/invalid-argument',\n      message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the getBucket() method.'\n    });\n  };\n\n  Object.defineProperty(Storage.prototype, \"app\", {\n    /**\n     * Returns the app associated with this Storage instance.\n     *\n     * @return {FirebaseApp} The app associated with this Storage instance.\n     */\n    get: function get() {\n      return this.appInternal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Storage;\n}();\n\nexports.Storage = Storage;","map":null,"metadata":{},"sourceType":"script"}