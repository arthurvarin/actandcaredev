{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2012 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar options_1 = require(\"./options\"); // tslint:disable-next-line no-var-requires\n\n\nvar pkg = require('../../package.json');\n\nvar PRODUCT_NAME = 'google-api-nodejs-client';\n/**\n * Axios will use XHR if it is available. In the case of Electron,\n * since XHR is there it will try to use that. This leads to OPTIONS\n * preflight requests which googleapis DOES NOT like. This line of\n * code pins the adapter to ensure it uses node.\n * https://github.com/google/google-api-nodejs-client/issues/1083\n */\n\naxios_1.default.defaults.adapter = require('axios/lib/adapters/http');\n\nvar DefaultTransporter =\n/** @class */\nfunction () {\n  function DefaultTransporter() {}\n  /**\n   * Configures request options before making a request.\n   * @param opts AxiosRequestConfig options.\n   * @return Configured options.\n   */\n\n\n  DefaultTransporter.prototype.configure = function (opts) {\n    if (opts === void 0) {\n      opts = {};\n    } // set transporter user agent\n\n\n    opts.headers = opts.headers || {};\n    var uaValue = opts.headers['User-Agent'];\n\n    if (!uaValue) {\n      opts.headers['User-Agent'] = DefaultTransporter.USER_AGENT;\n    } else if (!uaValue.includes(PRODUCT_NAME + \"/\")) {\n      opts.headers['User-Agent'] = uaValue + \" \" + DefaultTransporter.USER_AGENT;\n    }\n\n    return opts;\n  };\n\n  DefaultTransporter.prototype.request = function (opts, callback) {\n    var _this = this; // ensure the user isn't passing in request-style options\n\n\n    opts = this.configure(opts);\n\n    try {\n      options_1.validate(opts);\n    } catch (e) {\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (callback) {\n      axios_1.default(opts).then(function (r) {\n        callback(null, r);\n      }).catch(function (e) {\n        callback(_this.processError(e));\n      });\n    } else {\n      return axios_1.default(opts).catch(function (e) {\n        throw _this.processError(e);\n      });\n    }\n  };\n  /**\n   * Changes the error to include details from the body.\n   */\n\n\n  DefaultTransporter.prototype.processError = function (e) {\n    var res = e.response;\n    var err = e;\n    var body = res ? res.data : null;\n\n    if (res && body && body.error && res.status !== 200) {\n      if (typeof body.error === 'string') {\n        err.message = body.error;\n        err.code = res.status.toString();\n      } else if (Array.isArray(body.error.errors)) {\n        err.message = body.error.errors.map(function (err2) {\n          return err2.message;\n        }).join('\\n');\n        err.code = body.error.code;\n        err.errors = body.error.errors;\n      } else {\n        err.message = body.error.message;\n        err.code = body.error.code || res.status;\n      }\n    } else if (res && res.status >= 400) {\n      // Consider all 4xx and 5xx responses errors.\n      err.message = body;\n      err.code = res.status.toString();\n    }\n\n    return err;\n  };\n  /**\n   * Default user agent.\n   */\n\n\n  DefaultTransporter.USER_AGENT = PRODUCT_NAME + \"/\" + pkg.version;\n  return DefaultTransporter;\n}();\n\nexports.DefaultTransporter = DefaultTransporter;","map":null,"metadata":{},"sourceType":"script"}