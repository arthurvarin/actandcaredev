{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tls_1 = require(\"tls\");\n\nvar call_credentials_1 = require(\"./call-credentials\"); // tslint:disable-next-line:no-any\n\n\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n  if (obj && !(obj instanceof Buffer)) {\n    throw new TypeError(\"\".concat(friendlyName, \", if provided, must be a Buffer.\"));\n  }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\n\n\nvar ChannelCredentials =\n/*#__PURE__*/\nfunction () {\n  function ChannelCredentials(callCredentials) {\n    _classCallCheck(this, ChannelCredentials);\n\n    this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n  }\n  /**\n   * Gets the set of per-call credentials associated with this instance.\n   */\n\n\n  _createClass(ChannelCredentials, [{\n    key: \"_getCallCredentials\",\n    value: function _getCallCredentials() {\n      return this.callCredentials;\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     */\n\n  }], [{\n    key: \"createSsl\",\n    value: function createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n      verifyIsBufferOrNull(rootCerts, 'Root certificate');\n      verifyIsBufferOrNull(privateKey, 'Private key');\n      verifyIsBufferOrNull(certChain, 'Certificate chain');\n\n      if (privateKey && !certChain) {\n        throw new Error('Private key must be given with accompanying certificate chain');\n      }\n\n      if (!privateKey && certChain) {\n        throw new Error('Certificate chain must be given with accompanying private key');\n      }\n\n      var secureContext = tls_1.createSecureContext({\n        ca: rootCerts || undefined,\n        key: privateKey || undefined,\n        cert: certChain || undefined\n      });\n      var connectionOptions = {\n        secureContext: secureContext\n      };\n\n      if (verifyOptions && verifyOptions.checkServerIdentity) {\n        connectionOptions.checkServerIdentity = function (host, cert) {\n          return verifyOptions.checkServerIdentity(host, {\n            raw: cert.raw\n          });\n        };\n      }\n\n      return new SecureChannelCredentialsImpl(connectionOptions);\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */\n\n  }, {\n    key: \"createInsecure\",\n    value: function createInsecure() {\n      return new InsecureChannelCredentialsImpl();\n    }\n  }]);\n\n  return ChannelCredentials;\n}();\n\nexports.ChannelCredentials = ChannelCredentials;\n\nvar InsecureChannelCredentialsImpl =\n/*#__PURE__*/\nfunction (_ChannelCredentials) {\n  _inherits(InsecureChannelCredentialsImpl, _ChannelCredentials);\n\n  function InsecureChannelCredentialsImpl(callCredentials) {\n    _classCallCheck(this, InsecureChannelCredentialsImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InsecureChannelCredentialsImpl).call(this, callCredentials));\n  }\n\n  _createClass(InsecureChannelCredentialsImpl, [{\n    key: \"compose\",\n    value: function compose(callCredentials) {\n      throw new Error('Cannot compose insecure credentials');\n    }\n  }, {\n    key: \"_getConnectionOptions\",\n    value: function _getConnectionOptions() {\n      return null;\n    }\n  }, {\n    key: \"_isSecure\",\n    value: function _isSecure() {\n      return false;\n    }\n  }]);\n\n  return InsecureChannelCredentialsImpl;\n}(ChannelCredentials);\n\nvar SecureChannelCredentialsImpl =\n/*#__PURE__*/\nfunction (_ChannelCredentials2) {\n  _inherits(SecureChannelCredentialsImpl, _ChannelCredentials2);\n\n  function SecureChannelCredentialsImpl(connectionOptions, callCredentials) {\n    var _this;\n\n    _classCallCheck(this, SecureChannelCredentialsImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SecureChannelCredentialsImpl).call(this, callCredentials));\n    _this.connectionOptions = connectionOptions;\n    return _this;\n  }\n\n  _createClass(SecureChannelCredentialsImpl, [{\n    key: \"compose\",\n    value: function compose(callCredentials) {\n      var combinedCallCredentials = this.callCredentials.compose(callCredentials);\n      return new SecureChannelCredentialsImpl(this.connectionOptions, combinedCallCredentials);\n    }\n  }, {\n    key: \"_getConnectionOptions\",\n    value: function _getConnectionOptions() {\n      return this.connectionOptions;\n    }\n  }, {\n    key: \"_isSecure\",\n    value: function _isSecure() {\n      return true;\n    }\n  }]);\n\n  return SecureChannelCredentialsImpl;\n}(ChannelCredentials);","map":null,"metadata":{},"sourceType":"script"}