{"ast":null,"code":"'use strict';\n\nvar captureStackTrace = require('capture-stack-trace');\n\nfunction inherits(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nmodule.exports = function createErrorClass(className, setup) {\n  if (typeof className !== 'string') {\n    throw new TypeError('Expected className to be a string');\n  }\n\n  if (/[^0-9a-zA-Z_$]/.test(className)) {\n    throw new Error('className contains invalid characters');\n  }\n\n  setup = setup || function (message) {\n    this.message = message;\n  };\n\n  var ErrorClass = function ErrorClass() {\n    Object.defineProperty(this, 'name', {\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    captureStackTrace(this, this.constructor);\n    setup.apply(this, arguments);\n  };\n\n  inherits(ErrorClass, Error);\n  return ErrorClass;\n};","map":null,"metadata":{},"sourceType":"script"}