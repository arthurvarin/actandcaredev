{"ast":null,"code":"var stream = require(\"readable-stream\");\n\nvar BunWrapper = function BunWrapper(options) {\n  options = options || {};\n\n  if (Array.isArray(options)) {\n    options = {\n      streams: options\n    };\n  }\n\n  options.objectMode = true;\n  stream.Duplex.call(this, options);\n  var self = this; // grab a copy of the streams array\n\n  this._streams = (options.streams || []).slice(); // we need at least one stream to do things\n\n  if (this._streams.length === 0) {\n    this._streams.push(new stream.PassThrough({\n      objectMode: true\n    }));\n  } // default: true\n\n\n  this._bubbleErrors = typeof options.bubbleErrors === \"undefined\" || !!options.bubbleErrors; // error bubbling! yay!\n\n  if (this._bubbleErrors) {\n    for (var i = 0; i < this._streams.length; ++i) {\n      this._streams[i].on(\"error\", function (e) {\n        return self.emit(\"error\", e);\n      });\n    }\n  } // 0 -> 1, 1 -> 2, ..., n-1 -> n\n\n\n  for (var i = 0; i < this._streams.length - 1; ++i) {\n    this._streams[i].pipe(this._streams[i + 1]);\n  } // these might actually be the same. that's ok.\n\n\n  this._first = this._streams[0];\n  this._last = this._streams[this._streams.length - 1]; // .on(\"data\") is supported again in 0.11 and has always worked in 0.10\n\n  this._last.on(\"data\", function (e) {\n    if (!self.push(e)) {\n      self._last.pause();\n    }\n  }); // this is the readable side of our pipe ending\n\n\n  this._last.on(\"end\", function () {\n    self.push(null);\n  }); // and here's the writable side finishing\n\n\n  this._first.on(\"finish\", function () {\n    self.end();\n  }); // proxy through the .end() action\n\n\n  this.on(\"finish\", function () {\n    self._first.end();\n  });\n};\n\nBunWrapper.prototype = Object.create(stream.Duplex.prototype, {\n  constructor: {\n    value: BunWrapper\n  }\n});\n\nBunWrapper.prototype._write = function _write(input, encoding, done) {\n  this._first.write(input, done);\n};\n\nBunWrapper.prototype._read = function _read(n) {\n  this._last.resume();\n}; // factory function\n\n\nvar bun = module.exports = function bun(options, streams) {\n  if (Array.isArray(options)) {\n    var tmp = streams;\n    streams = options;\n    options = tmp;\n  }\n\n  options = options || {};\n  options.streams = options.streams || streams;\n  return new BunWrapper(options);\n};\n\nbun.BunWrapper = BunWrapper;","map":null,"metadata":{},"sourceType":"script"}