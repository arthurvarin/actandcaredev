{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Method; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(\"./util\");\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\n\n\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\n  /* istanbul ignore next */\n  if (util.isObject(requestStream)) {\n    options = requestStream;\n    requestStream = responseStream = undefined;\n  } else if (util.isObject(responseStream)) {\n    options = responseStream;\n    responseStream = undefined;\n  }\n  /* istanbul ignore if */\n\n\n  if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n  /* istanbul ignore if */\n\n  if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n  /* istanbul ignore if */\n\n  if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n  ReflectionObject.call(this, name, options);\n  /**\r\n   * Method type.\r\n   * @type {string}\r\n   */\n\n  this.type = type || \"rpc\"; // toJSON\n\n  /**\r\n   * Request type.\r\n   * @type {string}\r\n   */\n\n  this.requestType = requestType; // toJSON, marker\n\n  /**\r\n   * Whether requests are streamed or not.\r\n   * @type {boolean|undefined}\r\n   */\n\n  this.requestStream = requestStream ? true : undefined; // toJSON\n\n  /**\r\n   * Response type.\r\n   * @type {string}\r\n   */\n\n  this.responseType = responseType; // toJSON\n\n  /**\r\n   * Whether responses are streamed or not.\r\n   * @type {boolean|undefined}\r\n   */\n\n  this.responseStream = responseStream ? true : undefined; // toJSON\n\n  /**\r\n   * Resolved request type.\r\n   * @type {Type|null}\r\n   */\n\n  this.resolvedRequestType = null;\n  /**\r\n   * Resolved response type.\r\n   * @type {Type|null}\r\n   */\n\n  this.resolvedResponseType = null;\n  /**\r\n   * Comment for this method\r\n   * @type {string|null}\r\n   */\n\n  this.comment = comment;\n}\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\n\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\n\nMethod.fromJSON = function fromJSON(name, json) {\n  return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\n};\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\n\n\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"type\", this.type !== \"rpc\" &&\n  /* istanbul ignore next */\n  this.type || undefined, \"requestType\", this.requestType, \"requestStream\", this.requestStream, \"responseType\", this.responseType, \"responseStream\", this.responseStream, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\r\n * @override\r\n */\n\n\nMethod.prototype.resolve = function resolve() {\n  /* istanbul ignore if */\n  if (this.resolved) return this;\n  this.resolvedRequestType = this.parent.lookupType(this.requestType);\n  this.resolvedResponseType = this.parent.lookupType(this.responseType);\n  return ReflectionObject.prototype.resolve.call(this);\n};","map":null,"metadata":{},"sourceType":"script"}