{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _unicodeProperties = require('@react-pdf/unicode-properties');\n\nvar _unicodeProperties2 = _interopRequireDefault(_unicodeProperties);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ignoredScripts = ['Common', 'Inherited', 'Unknown'];\n/**\n * A ScriptItemizer is used by a GlyphGenerator to resolve\n * Unicode script runs in an AttributedString.\n */\n\nexports.default = function () {\n  return function (_ref) {\n    var Run = _ref.Run;\n    return function () {\n      function ScriptItemizer() {\n        (0, _classCallCheck3.default)(this, ScriptItemizer);\n      }\n\n      ScriptItemizer.prototype.getRuns = function getRuns(string) {\n        var lastIndex = 0;\n        var lastScript = 'Unknown';\n        var index = 0;\n        var runs = [];\n        if (!string) return [];\n\n        for (var _iterator = string, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var char = _ref2;\n          var codePoint = char.codePointAt();\n\n          var script = _unicodeProperties2.default.getScript(codePoint);\n\n          if (script !== lastScript && !ignoredScripts.includes(script)) {\n            if (lastScript !== 'Unknown') {\n              runs.push(new Run(lastIndex, index, {\n                script: lastScript\n              }));\n            }\n\n            lastIndex = index;\n            lastScript = script;\n          }\n\n          index += char.length;\n        }\n\n        if (lastIndex < string.length) {\n          runs.push(new Run(lastIndex, string.length, {\n            script: lastScript\n          }));\n        }\n\n        return runs;\n      };\n\n      return ScriptItemizer;\n    }();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}