{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"./error\");\n\nvar validator = require(\"./validator\");\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar url = require(\"url\");\n\nvar events_1 = require(\"events\");\n\nvar DefaultHttpResponse =\n/** @class */\nfunction () {\n  /**\n   * Constructs a new HttpResponse from the given LowLevelResponse.\n   */\n  function DefaultHttpResponse(resp) {\n    this.status = resp.status;\n    this.headers = resp.headers;\n    this.text = resp.data;\n\n    try {\n      this.parsedData = JSON.parse(resp.data);\n    } catch (err) {\n      this.parsedData = undefined;\n      this.parseError = err;\n    }\n\n    this.request = resp.config.method + \" \" + resp.config.url;\n  }\n\n  Object.defineProperty(DefaultHttpResponse.prototype, \"data\", {\n    get: function get() {\n      if (this.isJson()) {\n        return this.parsedData;\n      }\n\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, \"Error while parsing response data: \\\"\" + this.parseError.toString() + \"\\\". Raw server \" + (\"response: \\\"\" + this.text + \"\\\". Status code: \\\"\" + this.status + \"\\\". Outgoing \") + (\"request: \\\"\" + this.request + \".\\\"\"));\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DefaultHttpResponse.prototype.isJson = function () {\n    return typeof this.parsedData !== 'undefined';\n  };\n\n  return DefaultHttpResponse;\n}();\n\nvar HttpError =\n/** @class */\nfunction (_super) {\n  __extends(HttpError, _super);\n\n  function HttpError(response) {\n    var _this = _super.call(this, \"Server responded with status \" + response.status + \".\") || this;\n\n    _this.response = response; // Set the prototype so that instanceof checks will work correctly.\n    // See: https://github.com/Microsoft/TypeScript/issues/13965\n\n    Object.setPrototypeOf(_this, HttpError.prototype);\n    return _this;\n  }\n\n  return HttpError;\n}(Error);\n\nexports.HttpError = HttpError;\n\nvar HttpClient =\n/** @class */\nfunction () {\n  function HttpClient() {}\n  /**\n   * Sends an HTTP request to a remote server. If the server responds with a successful response (2xx), the returned\n   * promise resolves with an HttpResponse. If the server responds with an error (3xx, 4xx, 5xx), the promise rejects\n   * with an HttpError. In case of all other errors, the promise rejects with a FirebaseAppError. If a request fails\n   * due to a low-level network error, transparently retries the request once before rejecting the promise.\n   *\n   * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n   * content-type header will also be automatically set in this case. For all other payload types, the content-type\n   * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n   * and pass as a string or a Buffer along with the appropriate content-type header.\n   *\n   * @param {HttpRequest} request HTTP request to be sent.\n   * @return {Promise<HttpResponse>} A promise that resolves with the response details.\n   */\n\n\n  HttpClient.prototype.send = function (config) {\n    return this.sendWithRetry(config);\n  };\n  /**\n   * Sends an HTTP request, and retries it once in case of low-level network errors.\n   */\n\n\n  HttpClient.prototype.sendWithRetry = function (config, attempts) {\n    var _this = this;\n\n    if (attempts === void 0) {\n      attempts = 0;\n    }\n\n    return sendRequest(config).then(function (resp) {\n      return new DefaultHttpResponse(resp);\n    }).catch(function (err) {\n      var retryCodes = ['ECONNRESET', 'ETIMEDOUT'];\n\n      if (retryCodes.indexOf(err.code) !== -1 && attempts === 0) {\n        return _this.sendWithRetry(config, attempts + 1);\n      }\n\n      if (err.response) {\n        throw new HttpError(new DefaultHttpResponse(err.response));\n      }\n\n      if (err.code === 'ETIMEDOUT') {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, \"Error while making request: \" + err.message + \".\");\n      }\n\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, \"Error while making request: \" + err.message + \". Error code: \" + err.code);\n    });\n  };\n\n  return HttpClient;\n}();\n\nexports.HttpClient = HttpClient;\n/**\n * Sends an HTTP request based on the provided configuration. This is a wrapper around the http and https\n * packages of Node.js, providing content processing, timeouts and error handling.\n */\n\nfunction sendRequest(config) {\n  return new Promise(function (resolve, reject) {\n    var data;\n    var headers = Object.assign({}, config.headers);\n    var fullUrl = config.url;\n\n    if (config.data) {\n      // GET and HEAD do not support body in request.\n      if (config.method === 'GET' || config.method === 'HEAD') {\n        if (!validator.isObject(config.data)) {\n          return reject(createError(config.method + \" requests cannot have a body\", config));\n        } // Parse URL and append data to query string.\n\n\n        var parsedUrl = new url.URL(fullUrl);\n        var dataObj = config.data;\n\n        for (var key in dataObj) {\n          if (dataObj.hasOwnProperty(key)) {\n            parsedUrl.searchParams.append(key, dataObj[key]);\n          }\n        }\n\n        fullUrl = parsedUrl.toString();\n      } else if (validator.isObject(config.data)) {\n        data = Buffer.from(JSON.stringify(config.data), 'utf-8');\n\n        if (typeof headers['Content-Type'] === 'undefined') {\n          headers['Content-Type'] = 'application/json;charset=utf-8';\n        }\n      } else if (validator.isString(config.data)) {\n        data = Buffer.from(config.data, 'utf-8');\n      } else if (validator.isBuffer(config.data)) {\n        data = config.data;\n      } else {\n        return reject(createError('Request data must be a string, a Buffer or a json serializable object', config));\n      } // Add Content-Length header if data exists\n\n\n      if (data) {\n        headers['Content-Length'] = data.length.toString();\n      }\n    }\n\n    var parsed = url.parse(fullUrl);\n    var protocol = parsed.protocol || 'https:';\n    var isHttps = protocol === 'https:';\n    var port = parsed.port;\n\n    if (!port) {\n      port = isHttps ? '443' : '80';\n    }\n\n    var options = {\n      hostname: parsed.hostname,\n      port: port,\n      path: parsed.path,\n      method: config.method,\n      agent: config.httpAgent,\n      headers: headers\n    };\n    var transport = isHttps ? https : http;\n    var req = transport.request(options, function (res) {\n      if (req.aborted) {\n        return;\n      } // Uncompress the response body transparently if required.\n\n\n      var respStream = res;\n      var encodings = ['gzip', 'compress', 'deflate'];\n\n      if (encodings.indexOf(res.headers['content-encoding']) !== -1) {\n        // Add the unzipper to the body stream processing pipeline.\n        var zlib = require('zlib');\n\n        respStream = respStream.pipe(zlib.createUnzip()); // Remove the content-encoding in order to not confuse downstream operations.\n\n        delete res.headers['content-encoding'];\n      }\n\n      var response = {\n        status: res.statusCode,\n        headers: res.headers,\n        request: req,\n        data: undefined,\n        config: config\n      };\n      var responseBuffer = [];\n      respStream.on('data', function (chunk) {\n        responseBuffer.push(chunk);\n      });\n      respStream.on('error', function (err) {\n        if (req.aborted) {\n          return;\n        }\n\n        reject(enhanceError(err, config, null, req));\n      });\n      respStream.on('end', function () {\n        var responseData = Buffer.concat(responseBuffer).toString();\n        response.data = responseData;\n        finalizeRequest(resolve, reject, response);\n      });\n    }); // Handle errors\n\n    req.on('error', function (err) {\n      if (req.aborted) {\n        return;\n      }\n\n      reject(enhanceError(err, config, null, req));\n    });\n\n    if (config.timeout) {\n      // Listen to timeouts and throw an error.\n      req.setTimeout(config.timeout, function () {\n        req.abort();\n        reject(createError(\"timeout of \" + config.timeout + \"ms exceeded\", config, 'ETIMEDOUT', req));\n      });\n    } // Send the request\n\n\n    req.end(data);\n  });\n}\n/**\n * Creates a new error from the given message, and enhances it with other information available.\n */\n\n\nfunction createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n}\n/**\n * Enhances the given error by adding more information to it. Specifically, the HttpRequestConfig,\n * the underlying request and response will be attached to the error.\n */\n\n\nfunction enhanceError(error, config, code, request, response) {\n  error.config = config;\n\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  return error;\n}\n/**\n * Finalizes the current request in-flight by either resolving or rejecting the associated promise. In the event\n * of an error, adds additional useful information to the returned error.\n */\n\n\nfunction finalizeRequest(resolve, reject, response) {\n  if (response.status >= 200 && response.status < 300) {\n    resolve(response);\n  } else {\n    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));\n  }\n}\n\nvar AuthorizedHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(AuthorizedHttpClient, _super);\n\n  function AuthorizedHttpClient(app) {\n    var _this = _super.call(this) || this;\n\n    _this.app = app;\n    return _this;\n  }\n\n  AuthorizedHttpClient.prototype.send = function (request) {\n    var _this = this;\n\n    return this.app.INTERNAL.getToken().then(function (accessTokenObj) {\n      var requestCopy = Object.assign({}, request);\n      requestCopy.headers = Object.assign({}, request.headers);\n      var authHeader = 'Authorization';\n      requestCopy.headers[authHeader] = \"Bearer \" + accessTokenObj.accessToken;\n\n      if (!requestCopy.httpAgent && _this.app.options.httpAgent) {\n        requestCopy.httpAgent = _this.app.options.httpAgent;\n      }\n\n      return _super.prototype.send.call(_this, requestCopy);\n    });\n  };\n\n  return AuthorizedHttpClient;\n}(HttpClient);\n\nexports.AuthorizedHttpClient = AuthorizedHttpClient;\n/**\n * Class that defines all the settings for the backend API endpoint.\n *\n * @param {string} endpoint The Firebase Auth backend endpoint.\n * @param {HttpMethod} httpMethod The http method for that endpoint.\n * @constructor\n */\n\nvar ApiSettings =\n/** @class */\nfunction () {\n  function ApiSettings(endpoint, httpMethod) {\n    if (httpMethod === void 0) {\n      httpMethod = 'POST';\n    }\n\n    this.endpoint = endpoint;\n    this.httpMethod = httpMethod;\n    this.setRequestValidator(null).setResponseValidator(null);\n  }\n  /** @return {string} The backend API endpoint. */\n\n\n  ApiSettings.prototype.getEndpoint = function () {\n    return this.endpoint;\n  };\n  /** @return {HttpMethod} The request HTTP method. */\n\n\n  ApiSettings.prototype.getHttpMethod = function () {\n    return this.httpMethod;\n  };\n  /**\n   * @param {ApiCallbackFunction} requestValidator The request validator.\n   * @return {ApiSettings} The current API settings instance.\n   */\n\n\n  ApiSettings.prototype.setRequestValidator = function (requestValidator) {\n    var nullFunction = function nullFunction(_) {\n      return undefined;\n    };\n\n    this.requestValidator = requestValidator || nullFunction;\n    return this;\n  };\n  /** @return {ApiCallbackFunction} The request validator. */\n\n\n  ApiSettings.prototype.getRequestValidator = function () {\n    return this.requestValidator;\n  };\n  /**\n   * @param {ApiCallbackFunction} responseValidator The response validator.\n   * @return {ApiSettings} The current API settings instance.\n   */\n\n\n  ApiSettings.prototype.setResponseValidator = function (responseValidator) {\n    var nullFunction = function nullFunction(_) {\n      return undefined;\n    };\n\n    this.responseValidator = responseValidator || nullFunction;\n    return this;\n  };\n  /** @return {ApiCallbackFunction} The response validator. */\n\n\n  ApiSettings.prototype.getResponseValidator = function () {\n    return this.responseValidator;\n  };\n\n  return ApiSettings;\n}();\n\nexports.ApiSettings = ApiSettings;\n/**\n * Class used for polling an endpoint with exponential backoff.\n *\n * Example usage:\n * ```\n * const poller = new ExponentialBackoffPoller();\n * poller\n *     .poll(() => {\n *       return myRequestToPoll()\n *           .then((responseData: any) => {\n *             if (!isValid(responseData)) {\n *               // Continue polling.\n *               return null;\n *             }\n *\n *             // Polling complete. Resolve promise with final response data.\n *             return responseData;\n *           });\n *     })\n *     .then((responseData: any) => {\n *       console.log(`Final response: ${responseData}`);\n *     });\n * ```\n */\n\nvar ExponentialBackoffPoller =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialBackoffPoller, _super);\n\n  function ExponentialBackoffPoller(initialPollingDelayMillis, maxPollingDelayMillis, masterTimeoutMillis) {\n    if (initialPollingDelayMillis === void 0) {\n      initialPollingDelayMillis = 1000;\n    }\n\n    if (maxPollingDelayMillis === void 0) {\n      maxPollingDelayMillis = 10000;\n    }\n\n    if (masterTimeoutMillis === void 0) {\n      masterTimeoutMillis = 60000;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.initialPollingDelayMillis = initialPollingDelayMillis;\n    _this.maxPollingDelayMillis = maxPollingDelayMillis;\n    _this.masterTimeoutMillis = masterTimeoutMillis;\n    _this.numTries = 0;\n    _this.completed = false;\n    return _this;\n  }\n  /**\n   * Poll the provided callback with exponential backoff.\n   *\n   * @param {() => Promise<object>} callback The callback to be called for each poll. If the\n   *     callback resolves to a falsey value, polling will continue. Otherwise, the truthy\n   *     resolution will be used to resolve the promise returned by this method.\n   * @return {Promise<object>} A Promise which resolves to the truthy value returned by the provided\n   *     callback when polling is complete.\n   */\n\n\n  ExponentialBackoffPoller.prototype.poll = function (callback) {\n    var _this = this;\n\n    if (this.pollCallback) {\n      throw new Error('poll() can only be called once per instance of ExponentialBackoffPoller');\n    }\n\n    this.pollCallback = callback;\n    this.on('poll', this.repoll);\n    this.masterTimer = setTimeout(function () {\n      if (_this.completed) {\n        return;\n      }\n\n      _this.markCompleted();\n\n      _this.reject(new Error('ExponentialBackoffPoller deadline exceeded - Master timeout reached'));\n    }, this.masterTimeoutMillis);\n    return new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n\n      _this.repoll();\n    });\n  };\n\n  ExponentialBackoffPoller.prototype.repoll = function () {\n    var _this = this;\n\n    this.pollCallback().then(function (result) {\n      if (_this.completed) {\n        return;\n      }\n\n      if (!result) {\n        _this.repollTimer = setTimeout(function () {\n          return _this.emit('poll');\n        }, _this.getPollingDelayMillis());\n        _this.numTries++;\n        return;\n      }\n\n      _this.markCompleted();\n\n      _this.resolve(result);\n    }).catch(function (err) {\n      if (_this.completed) {\n        return;\n      }\n\n      _this.markCompleted();\n\n      _this.reject(err);\n    });\n  };\n\n  ExponentialBackoffPoller.prototype.getPollingDelayMillis = function () {\n    var increasedPollingDelay = Math.pow(2, this.numTries) * this.initialPollingDelayMillis;\n    return Math.min(increasedPollingDelay, this.maxPollingDelayMillis);\n  };\n\n  ExponentialBackoffPoller.prototype.markCompleted = function () {\n    this.completed = true;\n\n    if (this.masterTimer) {\n      clearTimeout(this.masterTimer);\n    }\n\n    if (this.repollTimer) {\n      clearTimeout(this.repollTimer);\n    }\n  };\n\n  return ExponentialBackoffPoller;\n}(events_1.EventEmitter);\n\nexports.ExponentialBackoffPoller = ExponentialBackoffPoller;","map":null,"metadata":{},"sourceType":"script"}