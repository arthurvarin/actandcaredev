{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\n\nvar clone = require('lodash.clone');\n\nvar grpc = require('./grpc_extension');\n/**\n * Class for storing metadata. Keys are normalized to lowercase ASCII.\n * @memberof grpc\n * @constructor\n * @example\n * var metadata = new metadata_module.Metadata();\n * metadata.set('key1', 'value1');\n * metadata.add('key1', 'value2');\n * metadata.get('key1') // returns ['value1', 'value2']\n */\n\n\nfunction Metadata() {\n  this._internal_repr = {};\n}\n\nfunction normalizeKey(key) {\n  key = key.toLowerCase();\n\n  if (grpc.metadataKeyIsLegal(key)) {\n    return key;\n  } else {\n    throw new Error('Metadata key\"' + key + '\" contains illegal characters');\n  }\n}\n\nfunction validate(key, value) {\n  if (grpc.metadataKeyIsBinary(key)) {\n    if (!(value instanceof Buffer)) {\n      throw new Error('keys that end with \\'-bin\\' must have Buffer values');\n    }\n  } else {\n    if (typeof value !== 'string') {\n      throw new Error('keys that don\\'t end with \\'-bin\\' must have String values');\n    }\n\n    if (!grpc.metadataNonbinValueIsLegal(value)) {\n      throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n    }\n  }\n}\n/**\n * Sets the given value for the given key, replacing any other values associated\n * with that key. Normalizes the key.\n * @param {String} key The key to set\n * @param {String|Buffer} value The value to set. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\n\n\nMetadata.prototype.set = function (key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  this._internal_repr[key] = [value];\n};\n/**\n * Adds the given value for the given key. Normalizes the key.\n * @param {String} key The key to add to.\n * @param {String|Buffer} value The value to add. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\n\n\nMetadata.prototype.add = function (key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n\n  if (!this._internal_repr[key]) {\n    this._internal_repr[key] = [];\n  }\n\n  this._internal_repr[key].push(value);\n};\n/**\n * Remove the given key and any associated values. Normalizes the key.\n * @param {String} key The key to remove\n */\n\n\nMetadata.prototype.remove = function (key) {\n  key = normalizeKey(key);\n\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    delete this._internal_repr[key];\n  }\n};\n/**\n * Gets a list of all values associated with the key. Normalizes the key.\n * @param {String} key The key to get\n * @return {Array.<String|Buffer>} The values associated with that key\n */\n\n\nMetadata.prototype.get = function (key) {\n  key = normalizeKey(key);\n\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    return this._internal_repr[key];\n  } else {\n    return [];\n  }\n};\n/**\n * Get a map of each key to a single associated value. This reflects the most\n * common way that people will want to see metadata.\n * @return {Object.<String,String|Buffer>} A key/value mapping of the metadata\n */\n\n\nMetadata.prototype.getMap = function () {\n  var _this = this;\n\n  var result = {};\n  Object.keys(this._internal_repr).forEach(function (key) {\n    var values = _this._internal_repr[key];\n\n    if (values.length > 0) {\n      result[key] = values[0];\n    }\n  });\n  return result;\n};\n/**\n * Clone the metadata object.\n * @return {grpc.Metadata} The new cloned object\n */\n\n\nMetadata.prototype.clone = function () {\n  var _this2 = this;\n\n  var copy = new Metadata();\n  Object.keys(this._internal_repr).forEach(function (key) {\n    var value = _this2._internal_repr[key];\n    copy._internal_repr[key] = clone(value);\n  });\n  return copy;\n};\n/**\n * Gets the metadata in the format used by interal code. Intended for internal\n * use only. API stability is not guaranteed.\n * @private\n * @return {Object.<String, Array.<String|Buffer>>} The metadata\n */\n\n\nMetadata.prototype._getCoreRepresentation = function () {\n  return this._internal_repr;\n};\n/**\n * Creates a Metadata object from a metadata map in the internal format.\n * Intended for internal use only. API stability is not guaranteed.\n * @private\n * @param {Object.<String, Array.<String|Buffer>>} The metadata\n * @return {Metadata} The new Metadata object\n */\n\n\nMetadata._fromCoreRepresentation = function (metadata) {\n  var newMetadata = new Metadata();\n\n  if (metadata) {\n    Object.keys(metadata).forEach(function (key) {\n      var value = metadata[key];\n      newMetadata._internal_repr[key] = clone(value);\n    });\n  }\n\n  return newMetadata;\n};\n\nmodule.exports = Metadata;","map":null,"metadata":{},"sourceType":"script"}