{"ast":null,"code":"\"use strict\";\n\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(\"./util\");\n\nvar Root; // cyclic\n\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\n\nfunction ReflectionObject(name, options) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n  /**\r\n   * Options.\r\n   * @type {Object.<string,*>|undefined}\r\n   */\n\n  this.options = options; // toJSON\n\n  /**\r\n   * Unique name within its namespace.\r\n   * @type {string}\r\n   */\n\n  this.name = name;\n  /**\r\n   * Parent namespace.\r\n   * @type {Namespace|null}\r\n   */\n\n  this.parent = null;\n  /**\r\n   * Whether already resolved or not.\r\n   * @type {boolean}\r\n   */\n\n  this.resolved = false;\n  /**\r\n   * Comment text, if any.\r\n   * @type {string|null}\r\n   */\n\n  this.comment = null;\n  /**\r\n   * Defining file name.\r\n   * @type {string|null}\r\n   */\n\n  this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n  /**\r\n   * Reference to the root namespace.\r\n   * @name ReflectionObject#root\r\n   * @type {Root}\r\n   * @readonly\r\n   */\n  root: {\n    get: function get() {\n      var ptr = this;\n\n      while (ptr.parent !== null) {\n        ptr = ptr.parent;\n      }\n\n      return ptr;\n    }\n  },\n\n  /**\r\n   * Full name including leading dot.\r\n   * @name ReflectionObject#fullName\r\n   * @type {string}\r\n   * @readonly\r\n   */\n  fullName: {\n    get: function get() {\n      var path = [this.name],\n          ptr = this.parent;\n\n      while (ptr) {\n        path.unshift(ptr.name);\n        ptr = ptr.parent;\n      }\n\n      return path.join(\".\");\n    }\n  }\n});\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\n\nReflectionObject.prototype.toJSON =\n/* istanbul ignore next */\nfunction toJSON() {\n  throw Error(); // not implemented, shouldn't happen\n};\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\n\n\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n  if (this.parent && this.parent !== parent) this.parent.remove(this);\n  this.parent = parent;\n  this.resolved = false;\n  var root = parent.root;\n  if (root instanceof Root) root._handleAdd(this);\n};\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\n\n\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n  var root = parent.root;\n  if (root instanceof Root) root._handleRemove(this);\n  this.parent = null;\n  this.resolved = false;\n};\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if (this.root instanceof Root) this.resolved = true; // only if part of a root\n\n  return this;\n};\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\n\n\nReflectionObject.prototype.getOption = function getOption(name) {\n  if (this.options) return this.options[name];\n  return undefined;\n};\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;\n  return this;\n};\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n  if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) {\n    this.setOption(keys[i], options[keys[i]], ifNotSet);\n  }\n  return this;\n};\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\n\n\nReflectionObject.prototype.toString = function toString() {\n  var className = this.constructor.className,\n      fullName = this.fullName;\n  if (fullName.length) return className + \" \" + fullName;\n  return className;\n}; // Sets up cyclic dependencies (called in index-light)\n\n\nReflectionObject._configure = function (Root_) {\n  Root = Root_;\n};","map":null,"metadata":{},"sourceType":"script"}