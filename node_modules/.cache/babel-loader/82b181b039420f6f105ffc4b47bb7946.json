{"ast":null,"code":"/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar arrify = require('arrify');\n\nvar common = require('@google-cloud/common');\n\nvar extend = require('extend');\n\nvar is = require('is');\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const storage = require('@google-cloud/storage')();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\n\n\nfunction Iam(bucket) {\n  this.request_ = bucket.request.bind(bucket);\n  this.resourceId_ = 'buckets/' + bucket.id;\n}\n/**\n * @typedef {object} GetPolicyRequest\n * @property {string} userProject The ID of the project which will be billed for\n *     the request.\n */\n\n/**\n * @typedef {array} GetPolicyResponse\n * @property {object} 0 The policy.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback GetPolicyCallback\n * @param {?Error} err Request error, if any.\n * @param {object} acl The policy.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Get the IAM policy.\n *\n * @param {GetPolicyRequest} [options] Request options.\n * @param {GetPolicyCallback} [callback] Callback function.\n * @returns {Promise<GetPolicyResponse>}\n *\n * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const bucket = storage.bucket('my-bucket');\n * bucket.iam.getPolicy(function(err, policy, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n */\n\n\nIam.prototype.getPolicy = function (options, callback) {\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.request_({\n    uri: '/iam',\n    qs: options\n  }, callback);\n};\n/**\n * @typedef {array} SetPolicyResponse\n * @property {object} 0 The policy.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback SetPolicyCallback\n * @param {?Error} err Request error, if any.\n * @param {object} acl The policy.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Set the IAM policy.\n *\n * @throws {Error} If no policy is provided.\n *\n * @param {object} policy The policy.\n * @param {array} policy.bindings Bindings associate members with roles.\n * @param {string} [policy.etag] Etags are used to perform a read-modify-write.\n * @param {object} [options] Configuration opbject.\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {SetPolicyCallback} callback Callback function.\n * @returns {Promise<SetPolicyResponse>}\n *\n * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const bucket = storage.bucket('my-bucket');\n *\n * const myPolicy = {\n *   bindings: [\n *     {\n *       role: 'roles/storage.admin',\n *       members: ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n *     }\n *   ]\n * };\n *\n * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.setPolicy(myPolicy).then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n\n\nIam.prototype.setPolicy = function (policy, options, callback) {\n  if (!is.object(policy)) {\n    throw new Error('A policy object is required.');\n  }\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.request_({\n    method: 'PUT',\n    uri: '/iam',\n    json: extend({\n      resourceId: this.resourceId_\n    }, policy),\n    qs: options\n  }, callback);\n};\n/**\n * @typedef {array} TestIamPermissionsResponse\n * @property {object[]} 0 A subset of permissions that the caller is allowed.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback TestIamPermissionsCallback\n * @param {?Error} err Request error, if any.\n * @param {object[]} acl A subset of permissions that the caller is allowed.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Test a set of permissions for a resource.\n *\n * @throws {Error} If permissions are not provided.\n *\n * @param {string|string[]} permissions The permission(s) to test for.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {TestIamPermissionsCallback} [callback] Callback function.\n * @returns {Promise<TestIamPermissionsResponse>}\n *\n * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const bucket = storage.bucket('my-bucket');\n *\n * //-\n * // Test a single permission.\n * //-\n * const test = 'storage.buckets.delete';\n *\n * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n *   console.log(permissions);\n *   // {\n *   //   \"storage.buckets.delete\": true\n *   // }\n * });\n *\n * //-\n * // Test several permissions at once.\n * //-\n * const tests = [\n *   'storage.buckets.delete',\n *   'storage.buckets.get'\n * ];\n *\n * bucket.iam.testPermissions(tests, function(err, permissions) {\n *   console.log(permissions);\n *   // {\n *   //   \"storage.buckets.delete\": false,\n *   //   \"storage.buckets.get\": true\n *   // }\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.testPermissions(test).then(function(data) {\n *   const permissions = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\n\nIam.prototype.testPermissions = function (permissions, options, callback) {\n  if (!is.array(permissions) && !is.string(permissions)) {\n    throw new Error('Permissions are required.');\n  }\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = extend({\n    permissions: arrify(permissions)\n  }, options);\n  this.request_({\n    uri: '/iam/testPermissions',\n    qs: options,\n    useQuerystring: true\n  }, function (err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var availablePermissions = arrify(resp.permissions);\n    var permissionsHash = permissions.reduce(function (acc, permission) {\n      acc[permission] = availablePermissions.indexOf(permission) > -1;\n      return acc;\n    }, {});\n    callback(null, permissionsHash, resp);\n  });\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\n\ncommon.util.promisifyAll(Iam);\nmodule.exports = Iam;","map":null,"metadata":{},"sourceType":"script"}