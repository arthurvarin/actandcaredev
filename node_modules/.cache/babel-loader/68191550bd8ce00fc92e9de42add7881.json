{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = require(\"./path\");\n\nvar serializer_1 = require(\"./serializer\");\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @returns {string} A unique 20-character wide identifier.\n */\n\n\nfunction autoId() {\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var autoId = '';\n\n  for (var i = 0; i < 20; i++) {\n    autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return autoId;\n}\n\nexports.autoId = autoId;\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @returns {string} A random 5-character wide identifier.\n */\n\nfunction requestTag() {\n  return autoId().substr(0, 5);\n}\n\nexports.requestTag = requestTag;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @param validator The argument validator to use.\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\n\nfunction parseGetAllArguments(validator, documentRefsOrReadOptions) {\n  var documents;\n  var readOptions = undefined; // In the original release of the SDK, getAll() was documented to accept\n  // either a varargs list of DocumentReferences or a single array of\n  // DocumentReferences. To support this usage in the TypeScript client, we have\n  // to manually verify the arguments to determine which input the user\n  // provided.\n\n  var usesDeprecatedArgumentStyle = Array.isArray(documentRefsOrReadOptions[0]);\n\n  if (usesDeprecatedArgumentStyle) {\n    documents = documentRefsOrReadOptions[0];\n    readOptions = documentRefsOrReadOptions[1];\n  } else {\n    if (documentRefsOrReadOptions.length > 0 && serializer_1.isPlainObject(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n      readOptions = documentRefsOrReadOptions.pop();\n      documents = documentRefsOrReadOptions;\n    } else {\n      documents = documentRefsOrReadOptions;\n    }\n  }\n\n  for (var i = 0; i < documents.length; ++i) {\n    validator.isDocumentReference(i, documents[i]);\n  }\n\n  validator.isOptionalReadOptions('options', readOptions);\n  var fieldMask = readOptions && readOptions.fieldMask ? readOptions.fieldMask.map(function (fieldPath) {\n    return path_1.FieldPath.fromArgument(fieldPath);\n  }) : null;\n  return {\n    fieldMask: fieldMask,\n    documents: documents\n  };\n}\n\nexports.parseGetAllArguments = parseGetAllArguments;","map":null,"metadata":{},"sourceType":"script"}