{"ast":null,"code":"/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar arrify = require('arrify');\n\nvar common = require('@google-cloud/common');\n\nvar extend = require('extend');\n\nvar is = require('is');\n\nvar util = require('util');\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against an\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\n * permission applies to (for example, a specific user or group of users).\n *\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\n * API expects.\n *\n * Refer to\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\n * for the most up-to-date values.\n *\n *   - `user-userId`\n *   - `user-email`\n *   - `group-groupId`\n *   - `group-email`\n *   - `domain-domain`\n *   - `project-team-projectId`\n *   - `allUsers`\n *   - `allAuthenticatedUsers`\n *\n * Examples:\n *\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\n *   - The group \"example@googlegroups.com\" would be\n *     `group-example@googlegroups.com`.\n *   - To refer to all members of the Google Apps for Business domain\n *     \"example.com\", the entity would be `domain-example.com`.\n *\n * For more detailed information, see\n * [About Access Control Lists](http://goo.gl/6qBBPO).\n *\n * @constructor Acl\n * @mixin\n * @param {object} options Configuration options.\n */\n\n\nfunction Acl(options) {\n  AclRoleAccessorMethods.call(this);\n  this.pathPrefix = options.pathPrefix;\n  this.request_ = options.request;\n}\n/**\n * An object of convenience methods to add or delete owner ACL permissions for a\n * given entity.\n *\n * The supported methods include:\n *\n *   - `myFile.acl.owners.addAllAuthenticatedUsers`\n *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\n *   - `myFile.acl.owners.addAllUsers`\n *   - `myFile.acl.owners.deleteAllUsers`\n *   - `myFile.acl.owners.addDomain`\n *   - `myFile.acl.owners.deleteDomain`\n *   - `myFile.acl.owners.addGroup`\n *   - `myFile.acl.owners.deleteGroup`\n *   - `myFile.acl.owners.addProject`\n *   - `myFile.acl.owners.deleteProject`\n *   - `myFile.acl.owners.addUser`\n *   - `myFile.acl.owners.deleteUser`\n *\n * @return {object}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * //-\n * // Add a user as an owner of a file.\n * //-\n * const myBucket = gcs.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n * myFile.acl.owners.addUser('email@example.com', function(err, aclObject) {});\n *\n * //-\n * // For reference, the above command is the same as running the following.\n * //-\n * myFile.acl.add({\n *   entity: 'user-email@example.com',\n *   role: gcs.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myFile.acl.owners.addUser('email@example.com').then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\n\nAcl.prototype.owners = {};\n/**\n * An object of convenience methods to add or delete reader ACL permissions for\n * a given entity.\n *\n * The supported methods include:\n *\n *   - `myFile.acl.readers.addAllAuthenticatedUsers`\n *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\n *   - `myFile.acl.readers.addAllUsers`\n *   - `myFile.acl.readers.deleteAllUsers`\n *   - `myFile.acl.readers.addDomain`\n *   - `myFile.acl.readers.deleteDomain`\n *   - `myFile.acl.readers.addGroup`\n *   - `myFile.acl.readers.deleteGroup`\n *   - `myFile.acl.readers.addProject`\n *   - `myFile.acl.readers.deleteProject`\n *   - `myFile.acl.readers.addUser`\n *   - `myFile.acl.readers.deleteUser`\n *\n * @return {object}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * //-\n * // Add a user as a reader of a file.\n * //-\n * myFile.acl.readers.addUser('email@example.com', function(err, aclObject) {});\n *\n * //-\n * // For reference, the above command is the same as running the following.\n * //-\n * myFile.acl.add({\n *   entity: 'user-email@example.com',\n *   role: gcs.acl.READER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myFile.acl.readers.addUser('email@example.com').then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\nAcl.prototype.readers = {};\n/**\n * An object of convenience methods to add or delete writer ACL permissions for\n * a given entity.\n *\n * The supported methods include:\n *\n *   - `myFile.acl.writers.addAllAuthenticatedUsers`\n *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\n *   - `myFile.acl.writers.addAllUsers`\n *   - `myFile.acl.writers.deleteAllUsers`\n *   - `myFile.acl.writers.addDomain`\n *   - `myFile.acl.writers.deleteDomain`\n *   - `myFile.acl.writers.addGroup`\n *   - `myFile.acl.writers.deleteGroup`\n *   - `myFile.acl.writers.addProject`\n *   - `myFile.acl.writers.deleteProject`\n *   - `myFile.acl.writers.addUser`\n *   - `myFile.acl.writers.deleteUser`\n *\n * @return {object}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * //-\n * // Add a user as a writer of a file.\n * //-\n * myFile.acl.writers.addUser('email@example.com', function(err, aclObject) {});\n *\n * //-\n * // For reference, the above command is the same as running the following.\n * //-\n * myFile.acl.add({\n *   entity: 'user-email@example.com',\n *   role: gcs.acl.WRITER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myFile.acl.writers.addUser('email@example.com').then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\nAcl.prototype.writers = {};\nutil.inherits(Acl, AclRoleAccessorMethods);\n/**\n * @typedef {array} AddAclResponse\n * @property {object} 0 The Acl Objects.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback AddAclCallback\n * @param {?Error} err Request error, if any.\n * @param {object} acl The Acl Objects.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Add access controls on a {@link Bucket} or {@link File}.\n *\n * @see [BucketAccessControls: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert}\n * @see [ObjectAccessControls: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert}\n *\n * @param {object} options Configuration options.\n * @param {string} options.entity Whose permissions will be added.\n * @param {string} options.role Permissions allowed for the defined entity.\n *     See {@link https://cloud.google.com/storage/docs/access-control Access Control}.\n * @param {number} [options.generation] **File Objects Only** Select a specific\n *     revision of this file (as opposed to the latest version, the default).\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {AddAclCallback} [callback] Callback function.\n * @returns {Promise<AddAclResponse>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * const options = {\n *   entity: 'user-useremail@example.com',\n *   role: gcs.acl.OWNER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\n *\n * //-\n * // For file ACL operations, you can also specify a `generation` property.\n * // Here is how you would grant ownership permissions to a user on a specific\n * // revision of a file.\n * //-\n * myFile.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: gcs.acl.OWNER_ROLE,\n *   generation: 1\n * }, function(err, aclObject, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_file_owner\n * Example of adding an owner to a file:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n */\n\nAcl.prototype.add = function (options, callback) {\n  var self = this;\n  var query = {};\n\n  if (options.generation) {\n    query.generation = options.generation;\n  }\n\n  if (options.userProject) {\n    query.userProject = options.userProject;\n  }\n\n  this.request({\n    method: 'POST',\n    uri: '',\n    qs: query,\n    json: {\n      entity: options.entity,\n      role: options.role.toUpperCase()\n    }\n  }, function (err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    callback(null, self.makeAclObject_(resp), resp);\n  });\n};\n/**\n * @typedef {array} RemoveAclResponse\n * @property {object} 0 The full API response.\n */\n\n/**\n * @callback RemoveAclCallback\n * @param {?Error} err Request error, if any.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Delete access controls on a {@link Bucket} or {@link File}.\n *\n * @see [BucketAccessControls: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete}\n * @see [ObjectAccessControls: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete}\n *\n * @param {object} options Configuration object.\n * @param {string} options.entity Whose permissions will be revoked.\n * @param {int} [options.generation] **File Objects Only** Select a specific\n *     revision of this file (as opposed to the latest version, the default).\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {RemoveAclCallback} callback The callback function.\n * @returns {Promise<RemoveAclResponse>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * myBucket.acl.delete({\n *   entity: 'user-useremail@example.com'\n * }, function(err, apiResponse) {});\n *\n * //-\n * // For file ACL operations, you can also specify a `generation` property.\n * //-\n * myFile.acl.delete({\n *   entity: 'user-useremail@example.com',\n *   generation: 1\n * }, function(err, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myFile.acl.delete().then(function(data) {\n *   const apiResponse = data[0];\n * });\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_file_owner\n * Example of removing an owner from a bucket:\n */\n\n\nAcl.prototype.delete = function (options, callback) {\n  var query = {};\n\n  if (options.generation) {\n    query.generation = options.generation;\n  }\n\n  if (options.userProject) {\n    query.userProject = options.userProject;\n  }\n\n  this.request({\n    method: 'DELETE',\n    uri: '/' + encodeURIComponent(options.entity),\n    qs: query\n  }, function (err, resp) {\n    callback(err, resp);\n  });\n};\n/**\n * @typedef {array} GetAclResponse\n * @property {object|object[]} 0 Single or array of Acl Objects.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback GetAclCallback\n * @param {?Error} err Request error, if any.\n * @param {object|object[]} acl Single or array of Acl Objects.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Get access controls on a {@link Bucket} or {@link File}. If\n * an entity is omitted, you will receive an array of all applicable access\n * controls.\n *\n * @see [BucketAccessControls: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get}\n * @see [ObjectAccessControls: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get}\n *\n * @param {object|function} [options] Configuration options. If you want to\n *     receive a list of all access controls, pass the callback function as the\n *     only argument.\n * @param {string} [options.entity] Whose permissions will be fetched.\n * @param {number} [options.generation] **File Objects Only** Select a specific\n *     revision of this file (as opposed to the latest version, the default).\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {GetAclCallback} [callback] Callback function.\n * @returns {Promise<GetAclResponse>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * myBucket.acl.get({\n *   entity: 'user-useremail@example.com'\n * }, function(err, aclObject, apiResponse) {});\n *\n * //-\n * // Get all access controls.\n * //-\n * myBucket.acl.get(function(err, aclObjects, apiResponse) {\n *   // aclObjects = [\n *   //   {\n *   //     entity: 'user-useremail@example.com',\n *   //     role: 'owner'\n *   //   }\n *   // ]\n * });\n *\n * //-\n * // For file ACL operations, you can also specify a `generation` property.\n * //-\n * myFile.acl.get({\n *   entity: 'user-useremail@example.com',\n *   generation: 1\n * }, function(err, aclObject, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.get().then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_file_acl\n * Example of printing a file's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_file_acl_for_user\n * Example of printing a file's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n */\n\n\nAcl.prototype.get = function (options, callback) {\n  var self = this;\n  var path = '';\n  var query = {};\n\n  if (is.fn(options)) {\n    callback = options;\n    options = null;\n  } else {\n    path = '/' + encodeURIComponent(options.entity);\n\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n  }\n\n  this.request({\n    uri: path,\n    qs: query\n  }, function (err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var results;\n\n    if (resp.items) {\n      results = arrify(resp.items).map(self.makeAclObject_);\n    } else {\n      results = self.makeAclObject_(resp);\n    }\n\n    callback(null, results, resp);\n  });\n};\n/**\n * @typedef {array} UpdateAclResponse\n * @property {object} 0 The updated Acl Objects.\n * @property {object} 1 The full API response.\n */\n\n/**\n * @callback UpdateAclCallback\n * @param {?Error} err Request error, if any.\n * @param {object} acl The updated Acl Objects.\n * @param {object} apiResponse The full API response.\n */\n\n/**\n * Update access controls on a {@link Bucket} or {@link File}.\n *\n * @see [BucketAccessControls: update API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update}\n * @see [ObjectAccessControls: update API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update}\n *\n * @param {object} options Configuration options.\n * @param {string} options.entity Whose permissions will be updated.\n * @param {string} options.role Permissions allowed for the defined entity.\n *     See {@link Storage.acl}.\n * @param {number} [options.generation] **File Objects Only** Select a specific\n *     revision of this file (as opposed to the latest version, the default).\n * @param {string} [options.userProject] The ID of the project which will be\n *     billed for the request.\n * @param {UpdateAclCallback} [callback] Callback function.\n * @returns {Promise<UpdateAclResponse>}\n *\n * @example\n * const storage = require('@google-cloud/storage')();\n * const myBucket = storage.bucket('my-bucket');\n * const myFile = myBucket.file('my-file');\n *\n * const options = {\n *   entity: 'user-useremail@example.com',\n *   role: gcs.acl.WRITER_ROLE\n * };\n *\n * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\n *\n * //-\n * // For file ACL operations, you can also specify a `generation` property.\n * //-\n * myFile.acl.update({\n *   entity: 'user-useremail@example.com',\n *   role: gcs.acl.WRITER_ROLE,\n *   generation: 1\n * }, function(err, aclObject, apiResponse) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myFile.acl.update(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\n\nAcl.prototype.update = function (options, callback) {\n  var self = this;\n  var query = {};\n\n  if (options.generation) {\n    query.generation = options.generation;\n  }\n\n  if (options.userProject) {\n    query.userProject = options.userProject;\n  }\n\n  this.request({\n    method: 'PUT',\n    uri: '/' + encodeURIComponent(options.entity),\n    qs: query,\n    json: {\n      role: options.role.toUpperCase()\n    }\n  }, function (err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    callback(null, self.makeAclObject_(resp), resp);\n  });\n};\n/**\n * Transform API responses to a consistent object format.\n *\n * @private\n */\n\n\nAcl.prototype.makeAclObject_ = function (accessControlObject) {\n  var obj = {\n    entity: accessControlObject.entity,\n    role: accessControlObject.role\n  };\n\n  if (accessControlObject.projectTeam) {\n    obj.projectTeam = accessControlObject.projectTeam;\n  }\n\n  return obj;\n};\n/**\n * Patch requests up to the bucket's request object.\n *\n * @private\n *\n * @param {string} method Action.\n * @param {string} path Request path.\n * @param {*} query Request query object.\n * @param {*} body Request body contents.\n * @param {function} callback Callback function.\n */\n\n\nAcl.prototype.request = function (reqOpts, callback) {\n  reqOpts.uri = this.pathPrefix + reqOpts.uri;\n  this.request_(reqOpts, callback);\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\n\ncommon.util.promisifyAll(Acl);\nmodule.exports = Acl;\n/**\n * Attach functionality to a {@link Storage.acl} instance. This will add an\n * object for each role group (owners, readers, and writers), with each object\n * containing methods to add or delete a type of entity.\n *\n * As an example, here are a few methods that are created.\n *\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\n *\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\n *\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\n *\n * @private\n */\n\nfunction AclRoleAccessorMethods() {\n  AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\n}\n\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\nAclRoleAccessorMethods.entities = [// Special entity groups that do not require further specification.\n'allAuthenticatedUsers', 'allUsers', // Entity groups that require specification, e.g. `user-email@example.com`.\n'domain-', 'group-', 'project-', 'user-'];\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\n\nAclRoleAccessorMethods.prototype._assignAccessMethods = function (role) {\n  var self = this;\n  var accessMethods = AclRoleAccessorMethods.accessMethods;\n  var entities = AclRoleAccessorMethods.entities;\n  var roleGroup = role.toLowerCase() + 's';\n  this[roleGroup] = entities.reduce(function (acc, entity) {\n    var isPrefix = entity.charAt(entity.length - 1) === '-';\n    accessMethods.forEach(function (accessMethod) {\n      var method = accessMethod + entity[0].toUpperCase() + entity.substr(1);\n\n      if (isPrefix) {\n        method = method.replace('-', '');\n      } // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\n      // more complex API of specifying an `entity` and `role`.\n\n\n      acc[method] = function (entityId, options, callback) {\n        var apiEntity;\n\n        if (is.fn(options)) {\n          callback = options;\n          options = {};\n        }\n\n        if (isPrefix) {\n          apiEntity = entity + entityId;\n        } else {\n          // If the entity is not a prefix, it is a special entity group that\n          // does not require further details. The accessor methods only accept\n          // a callback.\n          apiEntity = entity;\n          callback = entityId;\n        }\n\n        options = extend({\n          entity: apiEntity,\n          role: role\n        }, options);\n        var args = [options];\n\n        if (is.fn(callback)) {\n          args.push(callback);\n        }\n\n        return self[accessMethod].apply(self, args);\n      };\n    });\n    return acc;\n  }, {});\n};\n\nmodule.exports.AclRoleAccessorMethods = AclRoleAccessorMethods;","map":null,"metadata":{},"sourceType":"script"}