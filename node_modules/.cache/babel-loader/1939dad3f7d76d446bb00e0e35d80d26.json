{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nvar LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\n\nfunction isLegalKey(key) {\n  return LEGAL_KEY_REGEX.test(key);\n}\n\nfunction isLegalNonBinaryValue(value) {\n  return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\n\nfunction isBinaryKey(key) {\n  return key.endsWith('-bin');\n}\n\nfunction normalizeKey(key) {\n  return key.toLowerCase();\n}\n\nfunction validate(key, value) {\n  if (!isLegalKey(key)) {\n    throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n  }\n\n  if (value != null) {\n    if (isBinaryKey(key)) {\n      if (!(value instanceof Buffer)) {\n        throw new Error('keys that end with \\'-bin\\' must have Buffer values');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        throw new Error('keys that don\\'t end with \\'-bin\\' must have String values');\n      }\n\n      if (!isLegalNonBinaryValue(value)) {\n        throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n      }\n    }\n  }\n}\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */\n\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  function Metadata() {\n    _classCallCheck(this, Metadata);\n\n    this.internalRepr = new Map();\n  }\n  /**\n   * Sets the given value for the given key by replacing any other values\n   * associated with that key. Normalizes the key.\n   * @param key The key to whose value should be set.\n   * @param value The value to set. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n\n\n  _createClass(Metadata, [{\n    key: \"set\",\n    value: function set(key, value) {\n      key = normalizeKey(key);\n      validate(key, value);\n      this.internalRepr.set(key, [value]);\n    }\n    /**\n     * Adds the given value for the given key by appending to a list of previous\n     * values associated with that key. Normalizes the key.\n     * @param key The key for which a new value should be appended.\n     * @param value The value to add. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(key, value) {\n      key = normalizeKey(key);\n      validate(key, value);\n      var existingValue = this.internalRepr.get(key);\n\n      if (existingValue === undefined) {\n        this.internalRepr.set(key, [value]);\n      } else {\n        existingValue.push(value);\n      }\n    }\n    /**\n     * Removes the given key and any associated values. Normalizes the key.\n     * @param key The key whose values should be removed.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      key = normalizeKey(key);\n      validate(key);\n      this.internalRepr.delete(key);\n    }\n    /**\n     * Gets a list of all values associated with the key. Normalizes the key.\n     * @param key The key whose value should be retrieved.\n     * @return A list of values associated with the given key.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      key = normalizeKey(key);\n      validate(key);\n      return this.internalRepr.get(key) || [];\n    }\n    /**\n     * Gets a plain object mapping each key to the first value associated with it.\n     * This reflects the most common way that people will want to see metadata.\n     * @return A key/value mapping of the metadata.\n     */\n\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      var result = {};\n      this.internalRepr.forEach(function (values, key) {\n        if (values.length > 0) {\n          var v = values[0];\n          result[key] = v instanceof Buffer ? v.slice() : v;\n        }\n      });\n      return result;\n    }\n    /**\n     * Clones the metadata object.\n     * @return The newly cloned object.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var newMetadata = new Metadata();\n      var newInternalRepr = newMetadata.internalRepr;\n      this.internalRepr.forEach(function (value, key) {\n        var clonedValue = value.map(function (v) {\n          if (v instanceof Buffer) {\n            return Buffer.from(v);\n          } else {\n            return v;\n          }\n        });\n        newInternalRepr.set(key, clonedValue);\n      });\n      return newMetadata;\n    }\n    /**\n     * Merges all key-value pairs from a given Metadata object into this one.\n     * If both this object and the given object have values in the same key,\n     * values from the other Metadata object will be appended to this object's\n     * values.\n     * @param other A Metadata object.\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      var _this = this;\n\n      other.internalRepr.forEach(function (values, key) {\n        var mergedValue = (_this.internalRepr.get(key) || []).concat(values);\n\n        _this.internalRepr.set(key, mergedValue);\n      });\n    }\n    /**\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n     */\n\n  }, {\n    key: \"toHttp2Headers\",\n    value: function toHttp2Headers() {\n      // NOTE: Node <8.9 formats http2 headers incorrectly.\n      var result = {};\n      this.internalRepr.forEach(function (values, key) {\n        // We assume that the user's interaction with this object is limited to\n        // through its public API (i.e. keys and values are already validated).\n        result[key] = values.map(function (value) {\n          if (value instanceof Buffer) {\n            return value.toString('base64');\n          } else {\n            return value;\n          }\n        });\n      });\n      return result;\n    } // For compatibility with the other Metadata implementation\n\n  }, {\n    key: \"_getCoreRepresentation\",\n    value: function _getCoreRepresentation() {\n      return this.internalRepr;\n    }\n    /**\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n     * object.\n     * @param headers An IncomingHttpHeaders object.\n     */\n\n  }], [{\n    key: \"fromHttp2Headers\",\n    value: function fromHttp2Headers(headers) {\n      var result = new Metadata();\n      Object.keys(headers).forEach(function (key) {\n        // Reserved headers (beginning with `:`) are not valid keys.\n        if (key.charAt(0) === ':') {\n          return;\n        }\n\n        var values = headers[key];\n\n        if (isBinaryKey(key)) {\n          if (Array.isArray(values)) {\n            values.forEach(function (value) {\n              result.add(key, Buffer.from(value, 'base64'));\n            });\n          } else if (values !== undefined) {\n            values.split(',').forEach(function (v) {\n              result.add(key, Buffer.from(v.trim(), 'base64'));\n            });\n          }\n        } else {\n          if (Array.isArray(values)) {\n            values.forEach(function (value) {\n              result.add(key, value);\n            });\n          } else if (values !== undefined) {\n            values.split(',').forEach(function (v) {\n              return result.add(key, v.trim());\n            });\n          }\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexports.Metadata = Metadata;","map":null,"metadata":{},"sourceType":"script"}