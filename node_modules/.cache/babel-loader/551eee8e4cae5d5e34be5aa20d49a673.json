{"ast":null,"code":"/*! firebase-admin v6.5.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ALGORITHM_RS256 = 'RS256';\nvar ONE_HOUR_IN_SECONDS = 60 * 60; // List of blacklisted claims which cannot be provided when creating a custom token\n\nvar BLACKLISTED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce']; // Audience to use for Firebase Auth Custom tokens\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\n * sign data. Performs all operations locally, and does not make any RPC calls.\n */\n\nvar ServiceAccountSigner =\n/** @class */\nfunction () {\n  /**\n   * Creates a new CryptoSigner instance from the given service account certificate.\n   *\n   * @param {Certificate} certificate A service account certificate.\n   */\n  function ServiceAccountSigner(certificate) {\n    if (!certificate) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a certificate to initialize ServiceAccountSigner.');\n    }\n\n    if (!validator.isNonEmptyString(certificate.clientEmail) || !validator.isNonEmptyString(certificate.privateKey)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a certificate with validate clientEmail and privateKey to ' + 'initialize ServiceAccountSigner.');\n    }\n\n    this.certificate = certificate;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ServiceAccountSigner.prototype.sign = function (buffer) {\n    var crypto = require('crypto');\n\n    var sign = crypto.createSign('RSA-SHA256');\n    sign.update(buffer);\n    return Promise.resolve(sign.sign(this.certificate.privateKey));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ServiceAccountSigner.prototype.getAccountId = function () {\n    return Promise.resolve(this.certificate.clientEmail);\n  };\n\n  return ServiceAccountSigner;\n}();\n\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\n *\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\n */\n\nvar IAMSigner =\n/** @class */\nfunction () {\n  function IAMSigner(httpClient, serviceAccountId) {\n    if (!httpClient) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.');\n    }\n\n    if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.');\n    }\n\n    this.httpClient = httpClient;\n    this.serviceAccountId = serviceAccountId;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  IAMSigner.prototype.sign = function (buffer) {\n    var _this = this;\n\n    return this.getAccountId().then(function (serviceAccount) {\n      var request = {\n        method: 'POST',\n        url: \"https://iam.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\n        data: {\n          bytesToSign: buffer.toString('base64')\n        }\n      };\n      return _this.httpClient.send(request);\n    }).then(function (response) {\n      // Response from IAM is base64 encoded. Decode it into a buffer and return.\n      return Buffer.from(response.data.signature, 'base64');\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var error = err.response.data;\n        var errorCode = void 0;\n        var errorMsg = void 0;\n\n        if (validator.isNonNullObject(error) && error.error) {\n          errorCode = error.error.status || null;\n          var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' + 'for more details on how to use and troubleshoot this feature.';\n          errorMsg = error.error.message + \"; \" + description || null;\n        }\n\n        throw error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, error);\n      }\n\n      throw err;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  IAMSigner.prototype.getAccountId = function () {\n    var _this = this;\n\n    if (validator.isNonEmptyString(this.serviceAccountId)) {\n      return Promise.resolve(this.serviceAccountId);\n    }\n\n    var request = {\n      method: 'GET',\n      url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n      headers: {\n        'Metadata-Flavor': 'Google'\n      }\n    };\n    var client = new api_request_1.HttpClient();\n    return client.send(request).then(function (response) {\n      _this.serviceAccountId = response.text;\n      return _this.serviceAccountId;\n    }).catch(function (err) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, \"Failed to determine service account. Make sure to initialize \" + \"the SDK with a service account credential. Alternatively specify a service \" + (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err));\n    });\n  };\n\n  return IAMSigner;\n}();\n\nexports.IAMSigner = IAMSigner;\n/**\n * Create a new CryptoSigner instance for the given app. If the app has been initialized with a service\n * account credential, creates a ServiceAccountSigner. Otherwise creates an IAMSigner.\n *\n * @param {FirebaseApp} app A FirebaseApp instance.\n * @return {CryptoSigner} A CryptoSigner instance.\n */\n\nfunction cryptoSignerFromApp(app) {\n  var cert = app.options.credential.getCertificate();\n\n  if (cert != null && validator.isNonEmptyString(cert.privateKey) && validator.isNonEmptyString(cert.clientEmail)) {\n    return new ServiceAccountSigner(cert);\n  }\n\n  return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\n\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\n * Class for generating different types of Firebase Auth tokens (JWTs).\n */\n\nvar FirebaseTokenGenerator =\n/** @class */\nfunction () {\n  function FirebaseTokenGenerator(signer) {\n    if (!validator.isNonNullObject(signer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n    }\n\n    this.signer = signer;\n  }\n  /**\n   * Creates a new Firebase Auth Custom token.\n   *\n   * @param {string} uid The user ID to use for the generated Firebase Auth Custom token.\n   * @param {object} [developerClaims] Optional developer claims to include in the generated Firebase\n   *                 Auth Custom token.\n   * @return {Promise<string>} A Promise fulfilled with a Firebase Auth Custom token signed with a\n   *                           service account key and containing the provided payload.\n   */\n\n\n  FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (typeof uid !== 'string' || uid === '') {\n      errorMessage = 'First argument to createCustomToken() must be a non-empty string uid.';\n    } else if (uid.length > 128) {\n      errorMessage = 'First argument to createCustomToken() must a uid with less than or equal to 128 characters.';\n    } else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n      errorMessage = 'Second argument to createCustomToken() must be an object containing the developer claims.';\n    }\n\n    if (typeof errorMessage !== 'undefined') {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    var claims = {};\n\n    if (typeof developerClaims !== 'undefined') {\n      for (var key in developerClaims) {\n        /* istanbul ignore else */\n        if (developerClaims.hasOwnProperty(key)) {\n          if (BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\n          }\n\n          claims[key] = developerClaims[key];\n        }\n      }\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: ALGORITHM_RS256,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n      var body = {\n        aud: FIREBASE_AUDIENCE,\n        iat: iat,\n        exp: iat + ONE_HOUR_IN_SECONDS,\n        iss: account,\n        sub: account,\n        uid: uid\n      };\n\n      if (Object.keys(claims).length > 0) {\n        body.claims = claims;\n      }\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      var signPromise = _this.signer.sign(Buffer.from(token));\n\n      return Promise.all([token, signPromise]);\n    }).then(function (_a) {\n      var token = _a[0],\n          signature = _a[1];\n      return token + \".\" + _this.encodeSegment(signature);\n    });\n  };\n\n  FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/\\=+$/, '');\n  };\n  /**\n   * Returns whether or not the provided developer claims are valid.\n   *\n   * @param {object} [developerClaims] Optional developer claims to validate.\n   * @return {boolean} True if the provided claims are valid; otherwise, false.\n   */\n\n\n  FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\n    if (typeof developerClaims === 'undefined') {\n      return true;\n    }\n\n    return validator.isNonNullObject(developerClaims);\n  };\n\n  return FirebaseTokenGenerator;\n}();\n\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;","map":null,"metadata":{},"sourceType":"script"}