{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = require(\"path\");\n\nvar protobuf = require(\"protobufjs\");\n\nvar walk = require(\"walkdir\");\n\nvar COMMON_PROTO_FILES;\n\nvar GoogleProtoFilesRoot =\n/*#__PURE__*/\nfunction (_protobuf$Root) {\n  _inherits(GoogleProtoFilesRoot, _protobuf$Root);\n\n  function GoogleProtoFilesRoot(options) {\n    _classCallCheck(this, GoogleProtoFilesRoot);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleProtoFilesRoot).call(this, options));\n  } // Caches and returns an array of the local common/google core proto files\n  // exist on disk.\n\n\n  _createClass(GoogleProtoFilesRoot, [{\n    key: \"resolvePath\",\n    // Causes the loading of an included proto to check if it is a common\n    // proto. If it is a common proto, use the google-proto-files proto.\n    value: function resolvePath(_, includePath) {\n      includePath = path.normalize(includePath); // Fully qualified paths don't need to be resolved.\n\n      if (path.isAbsolute(includePath)) {\n        return includePath;\n      }\n\n      var fullIncludePath = path.join(__dirname, path.relative(__dirname, includePath));\n      var commonProtoFiles = GoogleProtoFilesRoot.getCommonProtoFiles();\n\n      if (commonProtoFiles.indexOf(fullIncludePath) > -1) {\n        return fullIncludePath;\n      }\n\n      return protobuf.util.path.resolve.apply(null, [].slice.call(arguments));\n    }\n  }], [{\n    key: \"getCommonProtoFiles\",\n    value: function getCommonProtoFiles() {\n      var commonProtoDirs = [// This list of directories is defined here:\n      // https://github.com/googleapis/googleapis/blob/master/gapic/packaging/common_protos.yaml\n      'api', path.join('logging', 'type'), 'longrunning', 'protobuf', // on.\n      'rpc', 'type'].map(function (dir) {\n        return path.join(__dirname, '../../', 'google', dir);\n      });\n\n      if (!COMMON_PROTO_FILES) {\n        COMMON_PROTO_FILES = commonProtoDirs.map(function (dir) {\n          return walk.sync(dir).filter(function (f) {\n            return path.extname(f) === '.proto';\n          }).map(path.normalize);\n        }).reduce(function (a, c) {\n          return a.concat(c);\n        }, []);\n      }\n\n      return COMMON_PROTO_FILES;\n    }\n  }]);\n\n  return GoogleProtoFilesRoot;\n}(protobuf.Root);\n\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;\n\nfunction loadSync(filename, options) {\n  var root = new GoogleProtoFilesRoot();\n  return root.loadSync(filename, options);\n}\n\nexports.loadSync = loadSync;\n\nfunction load(filename, options) {\n  var root = new GoogleProtoFilesRoot();\n  return root.load(filename, options);\n}\n\nexports.load = load;","map":null,"metadata":{},"sourceType":"script"}