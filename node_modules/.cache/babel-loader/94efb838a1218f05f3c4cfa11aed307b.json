{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _possibleConstructorReturn = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get2 = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _toConsumableArray = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cvoisin/Repos/actandcaredev/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bun = require(\"bun\");\n\nvar deepEqual = require('deep-equal');\n\nvar extend = require(\"extend\");\n\nvar is = require(\"is\");\n\nvar through2 = require(\"through2\");\n\nvar order_1 = require(\"./order\");\n\nvar logger_1 = require(\"./logger\");\n\nvar document_1 = require(\"./document\");\n\nvar document_change_1 = require(\"./document-change\");\n\nvar watch_1 = require(\"./watch\");\n\nvar write_batch_1 = require(\"./write-batch\");\n\nvar timestamp_1 = require(\"./timestamp\");\n\nvar path_1 = require(\"./path\");\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n\nvar serializer_1 = require(\"./serializer\");\n/*!\n * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n *\n * @private\n */\n\n\nvar directionOperators = {\n  asc: 'ASCENDING',\n  ASC: 'ASCENDING',\n  desc: 'DESCENDING',\n  DESC: 'DESCENDING'\n};\n/*!\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '>=', and '>'.\n *\n * @private\n */\n\nvar comparisonOperators = {\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '=': 'EQUAL',\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS'\n};\n/**\n * onSnapshot() callback that receives a QuerySnapshot.\n *\n * @callback querySnapshotCallback\n * @param {QuerySnapshot} snapshot A query snapshot.\n */\n\n/**\n * onSnapshot() callback that receives a DocumentSnapshot.\n *\n * @callback documentSnapshotCallback\n * @param {DocumentSnapshot} snapshot A document snapshot.\n */\n\n/**\n * onSnapshot() callback that receives an error.\n *\n * @callback errorCallback\n * @param {Error} err An error from a listen.\n */\n\n/**\n * A DocumentReference refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist. A DocumentReference can\n * also be used to create a\n * [CollectionReference]{@link CollectionReference} to a\n * subcollection.\n *\n * @class\n */\n\nvar DocumentReference =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @private\n   * @hideconstructor\n   *\n   * @param _firestore The Firestore Database client.\n   * @param _ref The Path of this reference.\n   */\n  function DocumentReference(_firestore, _path) {\n    _classCallCheck(this, DocumentReference);\n\n    this._firestore = _firestore;\n    this._path = _path;\n    this._validator = _firestore._validator;\n  }\n  /**\n   * The string representation of the DocumentReference's location.\n   * @private\n   * @type {string}\n   * @name DocumentReference#formattedName\n   */\n\n\n  _createClass(DocumentReference, [{\n    key: \"get\",\n\n    /**\n     * Reads the document referred to by this DocumentReference.\n     *\n     * @returns {Promise.<DocumentSnapshot>} A Promise resolved with a\n     * DocumentSnapshot for the retrieved document on success. For missing\n     * documents, DocumentSnapshot.exists will be false. If the get() fails for\n     * other reasons, the Promise will be rejected.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log('Document retrieved successfully.');\n     *   }\n     * });\n     */\n    value: function get() {\n      return this._firestore.getAll(this).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            result = _ref2[0];\n\n        return result;\n      });\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} A reference to the new\n     * subcollection.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let subcollection = documentRef.collection('subcollection');\n     * console.log(`Path to subcollection: ${subcollection.path}`);\n     */\n\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      this._validator.isResourcePath('collectionPath', collectionPath);\n\n      var path = this._path.append(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error(\"Argument \\\"collectionPath\\\" must point to a collection, but was \\\"\".concat(collectionPath, \"\\\". Your path does not contain an odd number of components.\"));\n      }\n\n      return createCollectionReference(this._firestore, path);\n    }\n    /**\n     * Fetches the subcollections that are direct children of this document.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found subcollection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var _this = this;\n\n      var request = {\n        parent: this._path.formattedName\n      };\n      return this._firestore.request('listCollectionIds', request, util_1.requestTag(),\n      /* allowRetries= */\n      true).then(function (collectionIds) {\n        var collections = []; // We can just sort this list using the default comparator since it\n        // will only contain collection ids.\n\n        collectionIds.sort();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = collectionIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var collectionId = _step.value;\n            collections.push(_this.collection(collectionId));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return collections;\n      });\n    }\n    /**\n     * Fetches the subcollections that are direct children of this document.\n     *\n     * @deprecated Use `.listCollections()`.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     */\n\n  }, {\n    key: \"getCollections\",\n    value: function getCollections() {\n      return this.listCollections();\n    }\n    /**\n     * Create a document with the provided object values. This will fail the write\n     * if a document exists at its location.\n     *\n     * @param {DocumentData} data An object that contains the fields and data to\n     * serialize as the document.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this create.\n     *\n     * @example\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * documentRef.create({foo: 'bar'}).then((res) => {\n     *   console.log(`Document created at ${res.updateTime}`);\n     * }).catch((err) => {\n     *   console.log(`Failed to create document: ${err}`);\n     * });\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(data) {\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.create(this, data).commit().then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            writeResult = _ref4[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Deletes the document referred to by this `DocumentReference`.\n     *\n     * A delete for a non-existing document is treated as a success (unless\n     * lastUptimeTime is provided).\n     *\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the delete if the\n     * document was last updated at a different time.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * delete time.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.delete().then(() => {\n     *   console.log('Document successfully deleted.');\n     * });\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(precondition) {\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.delete(this, precondition).commit().then(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            writeResult = _ref6[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Writes to the document referred to by this DocumentReference. If the\n     * document does not yet exist, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into an\n     * existing document.\n     *\n     * @param {DocumentData} data A map of the fields and values for the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge If true, set() merges the values specified\n     * in its data argument. Fields omitted from this set() call remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this set.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(res => {\n     *   console.log(`Document written at ${res.updateTime}`);\n     * });\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(data, options) {\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.set(this, data, options).commit().then(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 1),\n            writeResult = _ref8[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Updates fields in the document referred to by this DocumentReference.\n     * If the document doesn't yet exist, the update fails and the returned\n     * Promise will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {\n     * ...(*|string|FieldPath|Precondition)} preconditionOrValues An alternating\n     * list of field paths and values to update or a Precondition to restrict\n     * this update.\n     * @returns Promise.<WriteResult> A Promise that resolves once the\n     * data has been successfully written to the backend.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update({foo: 'bar'}).then(res => {\n     *   console.log(`Document updated at ${res.updateTime}`);\n     * });\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dataOrField) {\n      for (var _len = arguments.length, preconditionOrValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        preconditionOrValues[_key - 1] = arguments[_key];\n      }\n\n      this._validator.minNumberOfArguments('update', arguments, 1);\n\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.update.apply(writeBatch, [this, dataOrField].concat(preconditionOrValues)).commit().then(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 1),\n            writeResult = _ref10[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Attaches a listener for DocumentSnapshot events.\n     *\n     * @param {documentSnapshotCallback} onNext A callback to be called every\n     * time a new `DocumentSnapshot` is available.\n     * @param {errorCallback=} onError A callback to be called if the listen fails\n     * or is cancelled. No further callbacks will occur. If unset, errors will be\n     * logged to the console.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let unsubscribe = documentRef.onSnapshot(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(documentSnapshot.data());\n     *   }\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     */\n\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot(onNext, onError) {\n      var _this2 = this;\n\n      this._validator.isFunction('onNext', onNext);\n\n      this._validator.isOptionalFunction('onError', onError);\n\n      var watch = watch_1.Watch.forDocument(this);\n      return watch.onSnapshot(function (readTime, size, docs) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = docs()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _document = _step2.value;\n\n            if (_document.ref.path === _this2.path) {\n              onNext(_document);\n              return;\n            }\n          } // The document is missing.\n\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var document = new document_1.DocumentSnapshotBuilder();\n        document.ref = new DocumentReference(_this2._firestore, _this2._path);\n        document.readTime = readTime;\n        onNext(document.build());\n      }, onError || console.error);\n    }\n    /**\n     * Returns true if this `DocumentReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentReference` is equal to the provided\n     * value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof DocumentReference && this._firestore === other._firestore && this._path.isEqual(other._path);\n    }\n    /**\n     * Converts this DocumentReference to the Firestore Proto representation.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      return {\n        referenceValue: this.formattedName\n      };\n    }\n  }, {\n    key: \"formattedName\",\n    get: function get() {\n      return this._path.formattedName;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name DocumentReference#firestore\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     */\n\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name DocumentReference#path\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document at '${documentReference.path}'`);\n     * });\n     */\n\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._path.relativeName;\n    }\n    /**\n     * The last path element of the referenced document.\n     *\n     * @type {string}\n     * @name DocumentReference#id\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name '${documentReference.id}'`);\n     * });\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._path.id;\n    }\n    /**\n     * A reference to the collection to which this DocumentReference belongs.\n     *\n     * @name DocumentReference#parent\n     * @type {CollectionReference}\n     * @readonly\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let collectionRef = documentRef.parent;\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(results => {\n     *   console.log(`Found ${results.size} matches in parent collection`);\n     * }):\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return createCollectionReference(this._firestore, this._path.parent());\n    }\n  }]);\n\n  return DocumentReference;\n}();\n\nexports.DocumentReference = DocumentReference;\n/**\n * A Query order-by field.\n *\n * @private\n * @class\n */\n\nvar FieldOrder =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param field The name of a document field (member) on which to order query\n   * results.\n   * @param direction One of 'ASCENDING' (default) or 'DESCENDING' to\n   * set the ordering direction to ascending or descending, respectively.\n   */\n  function FieldOrder(field) {\n    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ASCENDING';\n\n    _classCallCheck(this, FieldOrder);\n\n    this.field = field;\n    this.direction = direction;\n  }\n  /**\n   * Generates the proto representation for this field order.\n   */\n\n\n  _createClass(FieldOrder, [{\n    key: \"toProto\",\n    value: function toProto() {\n      return {\n        field: {\n          fieldPath: this.field.formattedName\n        },\n        direction: this.direction\n      };\n    }\n  }]);\n\n  return FieldOrder;\n}();\n/**\n * A field constraint for a Query where clause.\n *\n * @private\n * @class\n */\n\n\nvar FieldFilter =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param serializer The Firestore serializer\n   * @param field The path of the property value to compare.\n   * @param op A comparison operation.\n   * @param value The value to which to compare the field for inclusion in a\n   * query.\n   */\n  function FieldFilter(serializer, field, op, value) {\n    _classCallCheck(this, FieldFilter);\n\n    this.serializer = serializer;\n    this.field = field;\n    this.op = op;\n    this.value = value;\n  }\n  /**\n   * Returns whether this FieldFilter uses an equals comparison.\n   *\n   * @private\n   */\n\n\n  _createClass(FieldFilter, [{\n    key: \"isInequalityFilter\",\n    value: function isInequalityFilter() {\n      switch (this.op) {\n        case 'GREATER_THAN':\n        case 'GREATER_THAN_OR_EQUAL':\n        case 'LESS_THAN':\n        case 'LESS_THAN_OR_EQUAL':\n          return true;\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Generates the proto representation for this field filter.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      if (typeof this.value === 'number' && isNaN(this.value)) {\n        return {\n          unaryFilter: {\n            field: {\n              fieldPath: this.field.formattedName\n            },\n            op: 'IS_NAN'\n          }\n        };\n      }\n\n      if (this.value === null) {\n        return {\n          unaryFilter: {\n            field: {\n              fieldPath: this.field.formattedName\n            },\n            op: 'IS_NULL'\n          }\n        };\n      }\n\n      return {\n        fieldFilter: {\n          field: {\n            fieldPath: this.field.formattedName\n          },\n          op: this.op,\n          value: this.serializer.encodeValue(this.value)\n        }\n      };\n    }\n  }]);\n\n  return FieldFilter;\n}();\n/**\n * A QuerySnapshot contains zero or more\n * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects\n * representing the results of a query. The documents can be accessed as an\n * array via the [documents]{@link QuerySnapshot#documents} property\n * or enumerated using the [forEach]{@link QuerySnapshot#forEach}\n * method. The number of documents can be determined via the\n * [empty]{@link QuerySnapshot#empty} and\n * [size]{@link QuerySnapshot#size} properties.\n *\n * @class QuerySnapshot\n */\n\n\nvar QuerySnapshot =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @private\n   * @hideconstructor\n   *\n   * @param _query The originating query.\n   * @param _readTime The time when this query snapshot was obtained.\n   * @param _size The number of documents in the result set.\n   * @param docs A callback returning a sorted array of documents matching\n   * this query\n   * @param changes A callback returning a sorted array of document change\n   * events for this snapshot.\n   */\n  function QuerySnapshot(_query, _readTime, _size, docs, changes) {\n    _classCallCheck(this, QuerySnapshot);\n\n    this._query = _query;\n    this._readTime = _readTime;\n    this._size = _size;\n    this._materializedDocs = null;\n    this._materializedChanges = null;\n    this._docs = null;\n    this._changes = null;\n    this._validator = _query.firestore._validator;\n    this._docs = docs;\n    this._changes = changes;\n  }\n  /**\n   * The query on which you called get() or onSnapshot() in order to get this\n   * QuerySnapshot.\n   *\n   * @type {Query}\n   * @name QuerySnapshot#query\n   * @readonly\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.limit(10).get().then(querySnapshot => {\n   *   console.log(`Returned first batch of results`);\n   *   let query = querySnapshot.query;\n   *   return query.offset(10).get();\n   * }).then(() => {\n   *   console.log(`Returned second batch of results`);\n   * });\n   */\n\n\n  _createClass(QuerySnapshot, [{\n    key: \"docChanges\",\n\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @return {Array.<DocumentChange>}\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.onSnapshot(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     */\n    value: function docChanges() {\n      if (this._materializedChanges) {\n        return this._materializedChanges;\n      }\n\n      this._materializedChanges = this._changes();\n      this._changes = null;\n      return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the QuerySnapshot.\n     *\n     * @param {function} callback A callback to be called with a\n     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param {*=} thisArg The `this` binding for the callback..\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    // tslint:disable-next-line:no-any\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      this._validator.isFunction('callback', callback);\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.docs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var doc = _step3.value;\n          callback.call(thisArg, doc);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n    /**\n     * Returns true if the document data in this `QuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `QuerySnapshot` is equal to the provided\n     * value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      // Since the read time is different on every query read, we explicitly\n      // ignore all metadata in this comparison.\n      if (this === other) {\n        return true;\n      }\n\n      if (!(other instanceof QuerySnapshot)) {\n        return false;\n      }\n\n      if (this._size !== other._size) {\n        return false;\n      }\n\n      if (!this._query.isEqual(other._query)) {\n        return false;\n      }\n\n      if (this._materializedDocs && !this._materializedChanges) {\n        // If we have only materialized the documents, we compare them first.\n        return isArrayEqual(this.docs, other.docs) && isArrayEqual(this.docChanges(), other.docChanges());\n      } // Otherwise, we compare the changes first as we expect there to be fewer.\n\n\n      return isArrayEqual(this.docChanges(), other.docChanges()) && isArrayEqual(this.docs, other.docs);\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this._query;\n    }\n    /**\n     * An array of all the documents in this QuerySnapshot.\n     *\n     * @type {Array.<QueryDocumentSnapshot>}\n     * @name QuerySnapshot#docs\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"docs\",\n    get: function get() {\n      if (this._materializedDocs) {\n        return this._materializedDocs;\n      }\n\n      this._materializedDocs = this._docs();\n      this._docs = null;\n      return this._materializedDocs;\n    }\n    /**\n     * True if there are no documents in the QuerySnapshot.\n     *\n     * @type {boolean}\n     * @name QuerySnapshot#empty\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this._size === 0;\n    }\n    /**\n     * The number of documents in the QuerySnapshot.\n     *\n     * @type {number}\n     * @name QuerySnapshot#size\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n    /**\n     * The time this query snapshot was obtained.\n     *\n     * @type {Timestamp}\n     * @name QuerySnapshot#readTime\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     */\n\n  }, {\n    key: \"readTime\",\n    get: function get() {\n      return this._readTime;\n    }\n  }]);\n\n  return QuerySnapshot;\n}();\n\nexports.QuerySnapshot = QuerySnapshot; // TODO: As of v0.17.0, we're changing docChanges from an array into a method.\n// Because this is a runtime breaking change and somewhat subtle (both Array and\n// Function have a .length, etc.), we'll replace commonly-used properties\n// (including Symbol.iterator) to throw a custom error message. By our v1.0\n// release, we should remove this code.\n\nfunction throwDocChangesMethodError() {\n  throw new Error('QuerySnapshot.docChanges has been changed from a property into a ' + 'method, so usages like \"querySnapshot.docChanges\" should become ' + '\"querySnapshot.docChanges()\"');\n}\n\nvar docChangesPropertiesToOverride = ['length', 'forEach', 'map'].concat(_toConsumableArray(typeof Symbol !== 'undefined' ? [Symbol.iterator] : []));\ndocChangesPropertiesToOverride.forEach(function (property) {\n  Object.defineProperty(QuerySnapshot.prototype.docChanges, property, {\n    get: function get() {\n      return throwDocChangesMethodError();\n    }\n  });\n});\n/**\n * A Query refers to a query which you can read or stream from. You can also\n * construct refined Query objects by adding filters and ordering.\n *\n * @class Query\n */\n\nvar Query =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @private\n   * @hideconstructor\n   *\n   * @param _firestore The Firestore Database client.\n   * @param _path Path of the collection to be queried.\n   * @param _fieldFilters Sequence of fields constraining the results of the\n   * query.\n   * @param _fieldOrders Sequence of fields to control the order of results.\n   * @param _queryOptions Additional query options.\n   */\n  function Query(_firestore, _path) {\n    var _fieldFilters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    var _fieldOrders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    var _queryOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    _classCallCheck(this, Query);\n\n    this._firestore = _firestore;\n    this._path = _path;\n    this._fieldFilters = _fieldFilters;\n    this._fieldOrders = _fieldOrders;\n    this._queryOptions = _queryOptions;\n    this._validator = _firestore._validator;\n    this._serializer = new serializer_1.Serializer(_firestore);\n  }\n  /**\n   * Detects the argument type for Firestore cursors.\n   *\n   * @private\n   * @param fieldValuesOrDocumentSnapshot A snapshot of the document or a set\n   * of field values.\n   * @returns 'true' if the input is a single DocumentSnapshot..\n   */\n\n\n  _createClass(Query, [{\n    key: \"where\",\n\n    /**\n     * Creates and returns a new [Query]{@link Query} with the additional filter\n     * that documents must contain the specified field and that its value should\n     * satisfy the relation constraint provided.\n     *\n     * Returns a new Query that constrains the value of a Document property.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the filter.\n     *\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\n     * @param {string} opStr A comparison operation in the form of a string\n     * (e.g., \"<\").\n     * @param {*} value The value to which to compare the field for inclusion in\n     * a query.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    value: function where(fieldPath, opStr, value) {\n      this._validator.isFieldPath('fieldPath', fieldPath);\n\n      this._validator.isQueryComparison('opStr', opStr, value);\n\n      this._validator.isQueryValue('value', value, {\n        allowDeletes: 'none',\n        allowTransforms: false\n      });\n\n      if (this._queryOptions.startAt || this._queryOptions.endAt) {\n        throw new Error('Cannot specify a where() filter after calling startAt(), ' + 'startAfter(), endBefore() or endAt().');\n      }\n\n      fieldPath = path_1.FieldPath.fromArgument(fieldPath);\n\n      if (path_1.FieldPath.documentId().isEqual(fieldPath)) {\n        value = this.convertReference(value);\n      }\n\n      var combinedFilters = this._fieldFilters.concat(new FieldFilter(this._serializer, fieldPath, comparisonOperators[opStr], value));\n\n      return new Query(this._firestore, this._path, combinedFilters, this._fieldOrders, this._queryOptions);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} instance that applies a\n     * field mask to the result and returns only the specified subset of fields.\n     * You can specify a list of field paths to return, or use an empty list to\n     * only return the references of matching documents.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {...(string|FieldPath)} fieldPaths The field paths to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * let documentRef = collectionRef.doc('doc');\n     *\n     * return documentRef.set({x:10, y:5}).then(() => {\n     *   return collectionRef.where('x', '>', 5).select('y').get();\n     * }).then((res) => {\n     *   console.log(`y is ${res.docs[0].get('y')}.`);\n     * });\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      var fields = [];\n\n      if (arguments.length === 0) {\n        fields.push({\n          fieldPath: path_1.FieldPath.documentId().formattedName\n        });\n      } else {\n        for (var i = 0; i < arguments.length; ++i) {\n          this._validator.isFieldPath(i, i < 0 || arguments.length <= i ? undefined : arguments[i]);\n\n          fields.push({\n            fieldPath: path_1.FieldPath.fromArgument(i < 0 || arguments.length <= i ? undefined : arguments[i]).formattedName\n          });\n        }\n      }\n\n      var options = extend(true, {}, this._queryOptions);\n      options.projection = {\n        fields: fields\n      };\n      return new Query(this._firestore, this._path, this._fieldFilters, this._fieldOrders, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that's additionally sorted\n     * by the specified field, optionally in descending order instead of\n     * ascending.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {string|FieldPath} fieldPath The field to sort by.\n     * @param {string=} directionStr Optional direction to sort by ('asc' or\n     * 'desc'). If not specified, order will be ascending.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.orderBy('foo', 'desc').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      this._validator.isFieldPath('fieldPath', fieldPath);\n\n      this._validator.isOptionalFieldOrder('directionStr', directionStr);\n\n      if (this._queryOptions.startAt || this._queryOptions.endAt) {\n        throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');\n      }\n\n      var newOrder = new FieldOrder(path_1.FieldPath.fromArgument(fieldPath), directionOperators[directionStr || 'asc']);\n\n      var combinedOrders = this._fieldOrders.concat(newOrder);\n\n      return new Query(this._firestore, this._path, this._fieldFilters, combinedOrders, this._queryOptions);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that's additionally limited\n     * to only return up to the specified number of documents.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the limit.\n     *\n     * @param {number} limit The maximum number of items to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      this._validator.isInteger('limit', _limit);\n\n      var options = extend(true, {}, this._queryOptions);\n      options.limit = _limit;\n      return new Query(this._firestore, this._path, this._fieldFilters, this._fieldOrders, options);\n    }\n    /**\n     * Specifies the offset of the returned results.\n     *\n     * This function returns a new (immutable) instance of the\n     * [Query]{@link Query} (rather than modify the existing instance)\n     * to impose the offset.\n     *\n     * @param {number} offset The offset to apply to the Query results\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(10).offset(20).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"offset\",\n    value: function offset(_offset) {\n      this._validator.isInteger('offset', _offset);\n\n      var options = extend(true, {}, this._queryOptions);\n      options.offset = _offset;\n      return new Query(this._firestore, this._path, this._fieldFilters, this._fieldOrders, options);\n    }\n    /**\n     * Returns true if this `Query` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `Query` is equal to the provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof Query && this._path.isEqual(other._path) && deepEqual(this._fieldFilters, other._fieldFilters, {\n        strict: true\n      }) && deepEqual(this._fieldOrders, other._fieldOrders, {\n        strict: true\n      }) && deepEqual(this._queryOptions, other._queryOptions, {\n        strict: true\n      });\n    }\n    /**\n     * Computes the backend ordering semantics for DocumentSnapshot cursors.\n     *\n     * @private\n     * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the\n     * set of field values to use as the boundary.\n     * @returns The implicit ordering semantics.\n     */\n\n  }, {\n    key: \"createImplicitOrderBy\",\n    value: function createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {\n      if (!Query._isDocumentSnapshot(cursorValuesOrDocumentSnapshot)) {\n        return this._fieldOrders;\n      }\n\n      var fieldOrders = this._fieldOrders.slice();\n\n      var hasDocumentId = false;\n\n      if (fieldOrders.length === 0) {\n        // If no explicit ordering is specified, use the first inequality to\n        // define an implicit order.\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this._fieldFilters[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var fieldFilter = _step4.value;\n\n            if (fieldFilter.isInequalityFilter()) {\n              fieldOrders.push(new FieldOrder(fieldFilter.field));\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      } else {\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = fieldOrders[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var fieldOrder = _step5.value;\n\n            if (path_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n              hasDocumentId = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      }\n\n      if (!hasDocumentId) {\n        // Add implicit sorting by name, using the last specified direction.\n        var lastDirection = fieldOrders.length === 0 ? directionOperators.ASC : fieldOrders[fieldOrders.length - 1].direction;\n        fieldOrders.push(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n      }\n\n      return fieldOrders;\n    }\n    /**\n     * Builds a Firestore 'Position' proto message.\n     *\n     * @private\n     * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this\n     * cursor.\n     * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The\n     * snapshot of the document or the set of field values to use as the boundary.\n     * @param before Whether the query boundary lies just before or after the\n     * provided data.\n     * @returns {Object} The proto message.\n     */\n\n  }, {\n    key: \"createCursor\",\n    value: function createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {\n      var fieldValues;\n\n      if (Query._isDocumentSnapshot(cursorValuesOrDocumentSnapshot)) {\n        fieldValues = Query._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);\n      } else {\n        fieldValues = cursorValuesOrDocumentSnapshot;\n      }\n\n      if (fieldValues.length > fieldOrders.length) {\n        throw new Error('Too many cursor values specified. The specified ' + 'values must match the orderBy() constraints of the query.');\n      }\n\n      var options = {\n        values: []\n      };\n\n      if (before) {\n        options.before = true;\n      }\n\n      for (var i = 0; i < fieldValues.length; ++i) {\n        var fieldValue = fieldValues[i];\n\n        if (path_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {\n          fieldValue = this.convertReference(fieldValue);\n        }\n\n        this._validator.isQueryValue(i, fieldValue, {\n          allowDeletes: 'none',\n          allowTransforms: false\n        });\n\n        options.values.push(this._serializer.encodeValue(fieldValue));\n      }\n\n      return options;\n    }\n    /**\n     * Validates that a value used with FieldValue.documentId() is either a\n     * string or a DocumentReference that is part of the query`s result set.\n     * Throws a validation error or returns a DocumentReference that can\n     * directly be used in the Query.\n     *\n     * @param reference The value to validate.\n     * @throws If the value cannot be used for this query.\n     * @return If valid, returns a DocumentReference that can be used with the\n     * query.\n     * @private\n     */\n\n  }, {\n    key: \"convertReference\",\n    value: function convertReference(reference) {\n      if (typeof reference === 'string') {\n        reference = new DocumentReference(this._firestore, this._path.append(reference));\n      } else if (reference instanceof DocumentReference) {\n        if (!this._path.isPrefixOf(reference._path)) {\n          throw new Error(\"\\\"\".concat(reference.path, \"\\\" is not part of the query result set and \") + 'cannot be used as a query boundary.');\n        }\n      } else {\n        throw new Error('The corresponding value for FieldPath.documentId() must be a ' + 'string or a DocumentReference.');\n      }\n\n      if (reference._path.parent().compareTo(this._path) !== 0) {\n        throw new Error('Only a direct child can be used as a query boundary. ' + \"Found: \\\"\".concat(reference.path, \"\\\".\"));\n      }\n\n      return reference;\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start at or the field values to\n     * start this query at, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"startAt\",\n    value: function startAt() {\n      for (var _len2 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        fieldValuesOrDocumentSnapshot[_key2] = arguments[_key2];\n      }\n\n      this._validator.minNumberOfArguments('startAt', arguments, 1);\n\n      var options = extend(true, {}, this._queryOptions);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      options.startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n      return new Query(this._firestore, this._path, this._fieldFilters, fieldOrders, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts after the\n     * provided set of field values relative to the order of the query. The order\n     * of the provided values must match the order of the order by clauses of the\n     * query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start after or the field values to\n     * start this query after, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"startAfter\",\n    value: function startAfter() {\n      for (var _len3 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        fieldValuesOrDocumentSnapshot[_key3] = arguments[_key3];\n      }\n\n      this._validator.minNumberOfArguments('startAfter', arguments, 1);\n\n      var options = extend(true, {}, this._queryOptions);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      options.startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n      return new Query(this._firestore, this._path, this._fieldFilters, fieldOrders, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends before the set of\n     * field values relative to the order of the query. The order of the provided\n     * values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end before or the field values to\n     * end this query before, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"endBefore\",\n    value: function endBefore() {\n      for (var _len4 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        fieldValuesOrDocumentSnapshot[_key4] = arguments[_key4];\n      }\n\n      this._validator.minNumberOfArguments('endBefore', arguments, 1);\n\n      var options = extend(true, {}, this._queryOptions);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      options.endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n      return new Query(this._firestore, this._path, this._fieldFilters, fieldOrders, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end at or the field values to end\n     * this query at, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"endAt\",\n    value: function endAt() {\n      for (var _len5 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        fieldValuesOrDocumentSnapshot[_key5] = arguments[_key5];\n      }\n\n      this._validator.minNumberOfArguments('endAt', arguments, 1);\n\n      var options = extend(true, {}, this._queryOptions);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      options.endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n      return new Query(this._firestore, this._path, this._fieldFilters, fieldOrders, options);\n    }\n    /**\n     * Executes the query and returns the results as a\n     * [QuerySnapshot]{@link QuerySnapshot}.\n     *\n     * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results\n     * of the Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._get();\n    }\n    /**\n     * Internal get() method that accepts an optional transaction id.\n     *\n     * @private\n     * @param {bytes=} transactionId A transaction ID.\n     */\n\n  }, {\n    key: \"_get\",\n    value: function _get(transactionId) {\n      var _this3 = this;\n\n      var self = this;\n      var docs = [];\n      return new Promise(function (resolve, reject) {\n        var readTime;\n\n        self._stream(transactionId).on('error', function (err) {\n          reject(err);\n        }).on('data', function (result) {\n          readTime = result.readTime;\n\n          if (result.document) {\n            var document = result.document;\n            docs.push(document);\n          }\n        }).on('end', function () {\n          resolve(new QuerySnapshot(_this3, readTime, docs.length, function () {\n            return docs;\n          }, function () {\n            var changes = [];\n\n            for (var i = 0; i < docs.length; ++i) {\n              changes.push(new document_change_1.DocumentChange('added', docs[i], -1, i));\n            }\n\n            return changes;\n          }));\n        });\n      });\n    }\n    /**\n     * Executes the query and streams the results as\n     * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.\n     *\n     * @returns {Stream.<QueryDocumentSnapshot>} A stream of\n     * QueryDocumentSnapshots.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.stream().on('data', (documentSnapshot) => {\n     *   console.log(`Found document with name '${documentSnapshot.id}'`);\n     *   ++count;\n     * }).on('end', () => {\n     *   console.log(`Total count is ${count}`);\n     * });\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var responseStream = this._stream();\n\n      var transform = through2.obj(function (chunk, encoding, callback) {\n        // Only send chunks with documents.\n        if (chunk.document) {\n          this.push(chunk.document);\n        }\n\n        callback();\n      });\n      return bun([responseStream, transform]);\n    }\n    /**\n     * Internal method for serializing a query to its RunQuery proto\n     * representation with an optional transaction id.\n     *\n     * @param transactionId A transaction ID.\n     * @private\n     * @returns Serialized JSON for the query.\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto(transactionId) {\n      var reqOpts = {\n        parent: this._path.parent().formattedName,\n        structuredQuery: {\n          from: [{\n            collectionId: this._path.id\n          }]\n        }\n      };\n      var structuredQuery = reqOpts.structuredQuery;\n\n      if (this._fieldFilters.length === 1) {\n        structuredQuery.where = this._fieldFilters[0].toProto();\n      } else if (this._fieldFilters.length > 1) {\n        var filters = [];\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = this._fieldFilters[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var fieldFilter = _step6.value;\n            filters.push(fieldFilter.toProto());\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n\n        structuredQuery.where = {\n          compositeFilter: {\n            op: 'AND',\n            filters: filters\n          }\n        };\n      }\n\n      if (this._fieldOrders.length) {\n        var orderBy = [];\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this._fieldOrders[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var fieldOrder = _step7.value;\n            orderBy.push(fieldOrder.toProto());\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        structuredQuery.orderBy = orderBy;\n      }\n\n      if (this._queryOptions.limit) {\n        structuredQuery.limit = {\n          value: this._queryOptions.limit\n        };\n      }\n\n      structuredQuery.offset = this._queryOptions.offset;\n      structuredQuery.startAt = this._queryOptions.startAt;\n      structuredQuery.endAt = this._queryOptions.endAt;\n      structuredQuery.select = this._queryOptions.projection;\n      reqOpts.transaction = transactionId;\n      return reqOpts;\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction id.\n     *\n     * @param transactionId A transaction ID.\n     * @private\n     * @returns A stream of document results.\n     */\n\n  }, {\n    key: \"_stream\",\n    value: function _stream(transactionId) {\n      var request = this.toProto(transactionId);\n      var tag = util_1.requestTag();\n      var self = this;\n      var stream = through2.obj(function (proto, enc, callback) {\n        var readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n\n        if (proto.document) {\n          var document = self.firestore.snapshot_(proto.document, proto.readTime);\n          this.push({\n            document: document,\n            readTime: readTime\n          });\n        } else {\n          this.push({\n            readTime: readTime\n          });\n        }\n\n        callback();\n      });\n\n      this._firestore.readStream('runQuery', request, tag, true).then(function (backendStream) {\n        backendStream.on('error', function (err) {\n          logger_1.logger('Query._stream', tag, 'Query failed with stream error:', err);\n          stream.destroy(err);\n        });\n        backendStream.resume();\n        backendStream.pipe(stream);\n      }).catch(function (err) {\n        stream.destroy(err);\n      });\n\n      return stream;\n    }\n    /**\n     * Attaches a listener for QuerySnapshot events.\n     *\n     * @param {querySnapshotCallback} onNext A callback to be called every time\n     * a new [QuerySnapshot]{@link QuerySnapshot} is available.\n     * @param {errorCallback=} onError A callback to be called if the listen\n     * fails or is cancelled. No further callbacks will occur.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   console.log(`Received query snapshot of size ${querySnapshot.size}`);\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     */\n\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot(onNext, onError) {\n      var _this4 = this;\n\n      this._validator.isFunction('onNext', onNext);\n\n      this._validator.isOptionalFunction('onError', onError);\n\n      var watch = watch_1.Watch.forQuery(this);\n      return watch.onSnapshot(function (readTime, size, docs, changes) {\n        onNext(new QuerySnapshot(_this4, readTime, size, docs, changes));\n      }, onError || console.error);\n    }\n    /**\n     * Returns a function that can be used to sort QueryDocumentSnapshots\n     * according to the sort criteria of this query.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"comparator\",\n    value: function comparator() {\n      var _this5 = this;\n\n      return function (doc1, doc2) {\n        // Add implicit sorting by name, using the last specified direction.\n        var lastDirection = _this5._fieldOrders.length === 0 ? directionOperators.ASC : _this5._fieldOrders[_this5._fieldOrders.length - 1].direction;\n\n        var orderBys = _this5._fieldOrders.concat(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = orderBys[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var orderBy = _step8.value;\n            var comp = void 0;\n\n            if (path_1.FieldPath.documentId().isEqual(orderBy.field)) {\n              comp = doc1.ref._path.compareTo(doc2.ref._path);\n            } else {\n              var v1 = doc1.protoField(orderBy.field);\n              var v2 = doc2.protoField(orderBy.field);\n\n              if (v1 === undefined || v2 === undefined) {\n                throw new Error('Trying to compare documents on fields that ' + 'don\\'t exist. Please include the fields you are ordering on ' + 'in your select() call.');\n              }\n\n              comp = order_1.compare(v1, v2);\n            }\n\n            if (comp !== 0) {\n              var direction = orderBy.direction === directionOperators.ASC ? 1 : -1;\n              return direction * comp;\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        return 0;\n      };\n    }\n  }, {\n    key: \"formattedName\",\n\n    /**\n     * The string representation of the Query's location.\n     * @private\n     */\n    get: function get() {\n      return this._path.formattedName;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name Query#firestore\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     */\n\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }], [{\n    key: \"_isDocumentSnapshot\",\n    value: function _isDocumentSnapshot(fieldValuesOrDocumentSnapshot) {\n      return fieldValuesOrDocumentSnapshot.length === 1 && fieldValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot;\n    }\n    /**\n     * Extracts field values from the DocumentSnapshot based on the provided\n     * field order.\n     *\n     * @private\n     * @param documentSnapshot The document to extract the fields from.\n     * @param fieldOrders The field order that defines what fields we should\n     * extract.\n     * @return {Array.<*>} The field values to use.\n     * @private\n     */\n\n  }, {\n    key: \"_extractFieldValues\",\n    value: function _extractFieldValues(documentSnapshot, fieldOrders) {\n      var fieldValues = [];\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = fieldOrders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var fieldOrder = _step9.value;\n\n          if (path_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n            fieldValues.push(documentSnapshot.ref);\n          } else {\n            var fieldValue = documentSnapshot.get(fieldOrder.field);\n\n            if (fieldValue === undefined) {\n              throw new Error(\"Field \\\"\".concat(fieldOrder.field, \"\\\" is missing in the provided DocumentSnapshot. \") + 'Please provide a document that contains values for all specified ' + 'orderBy() and where() constraints.');\n            } else {\n              fieldValues.push(fieldValue);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      return fieldValues;\n    }\n  }]);\n\n  return Query;\n}();\n\nexports.Query = Query;\n/**\n * A CollectionReference object can be used for adding documents, getting\n * document references, and querying for documents (using the methods\n * inherited from [Query]{@link Query}).\n *\n * @class\n * @extends Query\n */\n\nvar CollectionReference =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(CollectionReference, _Query);\n\n  /**\n   * @private\n   * @hideconstructor\n   *\n   * @param {Firestore} firestore The Firestore Database client.\n   * @param {ResourcePath} path The Path of this collection.\n   */\n  function CollectionReference(firestore, path) {\n    _classCallCheck(this, CollectionReference);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CollectionReference).call(this, firestore, path));\n  }\n  /**\n   * The last path element of the referenced collection.\n   *\n   * @type {string}\n   * @name CollectionReference#id\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col/doc/subcollection');\n   * console.log(`ID of the subcollection: ${collectionRef.id}`);\n   */\n\n\n  _createClass(CollectionReference, [{\n    key: \"listDocuments\",\n\n    /**\n     * Retrieves the list of documents in this collection.\n     *\n     * The document references returned may include references to \"missing\n     * documents\", i.e. document locations that have no document present but\n     * which contain subcollections with documents. Attempting to read such a\n     * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a\n     * `DocumentSnapshot` whose `.exists` property is false.\n     *\n     * @return {Promise<DocumentReference[]>} The list of documents in this\n     * collection.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * return collectionRef.listDocuments().then(documentRefs => {\n     *    return firestore.getAll(documentRefs);\n     * }).then(documentSnapshots => {\n     *    for (let documentSnapshot of documentSnapshots) {\n     *       if (documentSnapshot.exists) {\n     *         console.log(`Found document with data: ${documentSnapshot.id}`);\n     *       } else {\n     *         console.log(`Found missing document: ${documentSnapshot.id}`);\n     *       }\n     *    }\n     * });\n     */\n    value: function listDocuments() {\n      var _this6 = this;\n\n      var request = {\n        parent: this._path.parent().formattedName,\n        collectionId: this.id,\n        showMissing: true,\n        mask: {\n          fieldPaths: []\n        }\n      };\n      return this.firestore.request('listDocuments', request, util_1.requestTag()).then(function (documents) {\n        // Note that the backend already orders these documents by name,\n        // so we do not need to manually sort them.\n        return documents.map(function (doc) {\n          var path = path_1.ResourcePath.fromSlashSeparatedString(doc.name);\n          return _this6.doc(path.id);\n        });\n      });\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path. If no path is specified, an\n     * automatically-generated unique ID will be used for the returned\n     * DocumentReference.\n     *\n     * @param {string=} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The `DocumentReference`\n     * instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * let documentRefWithName = collectionRef.doc('doc');\n     * let documentRefWithAutoId = collectionRef.doc();\n     * console.log(`Reference with name: ${documentRefWithName.path}`);\n     * console.log(`Reference with auto-id: ${documentRefWithAutoId.path}`);\n     */\n\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      if (arguments.length === 0) {\n        documentPath = util_1.autoId();\n      } else {\n        this._validator.isResourcePath('documentPath', documentPath);\n      }\n\n      var path = this._path.append(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error(\"Argument \\\"documentPath\\\" must point to a document, but was \\\"\".concat(documentPath, \"\\\". Your path does not contain an even number of components.\"));\n      }\n\n      return new DocumentReference(this.firestore, path);\n    }\n    /**\n     * Add a new document to this collection with the specified data, assigning\n     * it a document ID automatically.\n     *\n     * @param {DocumentData} data An Object containing the data for the new\n     * document.\n     * @returns {Promise.<DocumentReference>} A Promise resolved with a\n     * [DocumentReference]{@link DocumentReference} pointing to the\n     * newly created document.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name: ${documentReference.id}`);\n     * });\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(data) {\n      this._validator.isDocument('data', data, {\n        allowEmpty: true,\n        allowDeletes: 'none',\n        allowTransforms: true\n      });\n\n      var documentRef = this.doc();\n      return documentRef.create(data).then(function () {\n        return documentRef;\n      });\n    }\n    /**\n     * Returns true if this `CollectionReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `CollectionReference` is equal to the\n     * provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof CollectionReference && _get2(_getPrototypeOf(CollectionReference.prototype), \"isEqual\", this).call(this, other);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._path.id;\n    }\n    /**\n     * A reference to the containing Document if this is a subcollection, else\n     * null.\n     *\n     * @type {DocumentReference}\n     * @name CollectionReference#parent\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * let documentRef = collectionRef.parent;\n     * console.log(`Parent name: ${documentRef.path}`);\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return new DocumentReference(this.firestore, this._path.parent());\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name CollectionReference#path\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`Path of the subcollection: ${collectionRef.path}`);\n     */\n\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._path.relativeName;\n    }\n  }]);\n\n  return CollectionReference;\n}(Query);\n\nexports.CollectionReference = CollectionReference;\n/*!\n * Creates a new CollectionReference. Invoked by DocumentReference to avoid\n * invalid declaration order.\n *\n * @param {Firestore} firestore The Firestore Database client.\n * @param {ResourcePath} path The path of this collection.\n * @returns {CollectionReference}\n */\n\nfunction createCollectionReference(firestore, path) {\n  return new CollectionReference(firestore, path);\n}\n/*!\n * Validates the input string as a field order direction.\n *\n * @param {string=} str Order direction to validate.\n * @throws {Error} when the direction is invalid\n */\n\n\nfunction validateFieldOrder(str) {\n  if (!is.string(str) || !is.defined(directionOperators[str])) {\n    throw new Error('Order must be one of \"asc\" or \"desc\".');\n  }\n\n  return true;\n}\n\nexports.validateFieldOrder = validateFieldOrder;\n/*!\n * Validates the input string as a field comparison operator.\n *\n * @param {string} str Field comparison operator to validate.\n * @param {*} val Value that is used in the filter.\n * @throws {Error} when the comparison operation is invalid\n */\n\nfunction validateComparisonOperator(str, val) {\n  if (is.string(str) && comparisonOperators[str]) {\n    var op = comparisonOperators[str];\n\n    if (typeof val === 'number' && isNaN(val) && op !== 'EQUAL') {\n      throw new Error('Invalid query. You can only perform equals comparisons on NaN.');\n    }\n\n    if (val === null && op !== 'EQUAL') {\n      throw new Error('Invalid query. You can only perform equals comparisons on Null.');\n    }\n\n    return true;\n  }\n\n  throw new Error('Operator must be one of \"<\", \"<=\", \"==\", \">\", or \">=\".');\n}\n\nexports.validateComparisonOperator = validateComparisonOperator;\n/*!\n * Validates that 'value' is a DocumentReference.\n *\n * @param {*} value The argument to validate.\n * @returns 'true' is value is an instance of DocumentReference.\n */\n\nfunction validateDocumentReference(value) {\n  if (value instanceof DocumentReference) {\n    return true;\n  }\n\n  throw validate_1.customObjectError(value);\n}\n\nexports.validateDocumentReference = validateDocumentReference;\n/**\n * Verifies euqality for an array of objects using the `isEqual` interface.\n *\n * @private\n * @param {Array.<Object>} left Array of objects supporting `isEqual`.\n * @param {Array.<Object>} right Array of objects supporting `isEqual`.\n * @return {boolean} True if arrays are equal.\n */\n\nfunction isArrayEqual(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n\n  for (var i = 0; i < left.length; ++i) {\n    if (!left[i].isEqual(right[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}