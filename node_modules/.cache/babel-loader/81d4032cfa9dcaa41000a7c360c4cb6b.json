{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _BBox = require('../geom/BBox');\n\nvar _BBox2 = _interopRequireDefault(_BBox);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Block = function () {\n  function Block() {\n    var lines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _classCallCheck3.default)(this, Block);\n    this.lines = lines;\n    this.style = style;\n  }\n\n  (0, _createClass3.default)(Block, [{\n    key: 'bbox',\n    get: function get() {\n      var bbox = new _BBox2.default();\n\n      for (var _iterator = this.lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var line = _ref;\n        bbox.addRect(line.rect);\n      }\n\n      return bbox;\n    }\n  }, {\n    key: 'height',\n    get: function get() {\n      var height = 0;\n\n      for (var _iterator2 = this.lines, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var line = _ref2;\n        height += line.height;\n      }\n\n      return height;\n    }\n  }, {\n    key: 'stringLength',\n    get: function get() {\n      var length = 0;\n\n      for (var _iterator3 = this.lines, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var line = _ref3;\n        length += line.string.length;\n      }\n\n      return length;\n    }\n  }]);\n  return Block;\n}();\n\nexports.default = Block;","map":null,"metadata":{},"sourceType":"script"}