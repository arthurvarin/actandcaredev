{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _Run = require('../models/Run');\n\nvar _Run2 = _interopRequireDefault(_Run);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar flattenRuns = function flattenRuns() {\n  var runs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var regularRuns = runs.filter(function (run) {\n    return run.start !== run.end;\n  });\n  var emptyRuns = runs.filter(function (run) {\n    return run.start === run.end;\n  });\n  var regularFlattenRuns = flattenRegularRuns(regularRuns);\n  var emptyFlattenRuns = flattenEmptyRuns(emptyRuns);\n\n  var sortRuns = function sortRuns(a, b) {\n    return a.start - b.start || a.end - b.end;\n  };\n\n  return [].concat(regularFlattenRuns, emptyFlattenRuns).sort(sortRuns);\n};\n\nvar flattenEmptyRuns = function flattenEmptyRuns(runs) {\n  var points = runs.reduce(function (acc, run) {\n    if (!acc.includes(run.start)) {\n      return [].concat(acc, [run.start]);\n    }\n\n    return acc;\n  }, []);\n  return points.map(function (point) {\n    var pointRuns = runs.filter(function (run) {\n      return run.start === point;\n    });\n    var attrs = pointRuns.reduce(function (acc, run) {\n      return (0, _assign2.default)({}, acc, run.attributes);\n    }, {});\n    return new _Run2.default(point, point, attrs);\n  });\n};\n\nvar flattenRegularRuns = function flattenRegularRuns(runs) {\n  var res = [];\n  var points = [];\n\n  for (var i = 0; i < runs.length; i++) {\n    var run = runs[i];\n    points.push(['start', run.start, run.attributes, i]);\n    points.push(['end', run.end, run.attributes, i]);\n  }\n\n  points.sort(function (a, b) {\n    return a[1] - b[1] || a[3] - b[3];\n  });\n  var start = -1;\n  var attrs = {};\n  var stack = [];\n\n  for (var _iterator = points, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n    var _ref2;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref2 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref2 = _i.value;\n    }\n\n    var _ref = _ref2;\n    var type = _ref[0];\n    var offset = _ref[1];\n    var attributes = _ref[2];\n\n    if (start !== -1 && start < offset) {\n      res.push(new _Run2.default(start, offset, attrs));\n    }\n\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = (0, _assign2.default)({}, attrs, attributes);\n    } else {\n      attrs = {};\n\n      for (var _i2 = 0; _i2 < stack.length; _i2++) {\n        if (stack[_i2] === attributes) {\n          stack.splice(_i2--, 1);\n        } else {\n          (0, _assign2.default)(attrs, stack[_i2]);\n        }\n      }\n    }\n\n    start = offset;\n  }\n\n  return res;\n};\n\nexports.default = flattenRuns;","map":null,"metadata":{},"sourceType":"script"}