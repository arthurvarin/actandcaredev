{"ast":null,"code":"'use strict';\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nvar fs = require('graceful-fs');\n\nvar MurmurHash3 = require('imurmurhash');\n\nvar onExit = require('signal-exit');\n\nvar path = require('path');\n\nvar activeFiles = {};\nvar invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return function () {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\n\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (!options) options = {};\n  var Promise = options.Promise || global.Promise;\n  var truename;\n  var fd;\n  var tmpfile;\n  var removeOnExit = cleanupOnExit(function () {\n    return tmpfile;\n  });\n  var absoluteName = path.resolve(filename);\n  new Promise(function serializeSameFile(resolve) {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  }).then(function getRealPath() {\n    return new Promise(function (resolve) {\n      fs.realpath(filename, function (_, realname) {\n        truename = realname || filename;\n        tmpfile = getTmpname(truename);\n        resolve();\n      });\n    });\n  }).then(function stat() {\n    return new Promise(function stat(resolve) {\n      if (options.mode && options.chown) resolve();else {\n        // Either mode or chown is not explicitly set\n        // Default behavior is to copy it from original file\n        fs.stat(truename, function (err, stats) {\n          if (err || !stats) resolve();else {\n            options = Object.assign({}, options);\n\n            if (!options.mode) {\n              options.mode = stats.mode;\n            }\n\n            if (!options.chown && process.getuid) {\n              options.chown = {\n                uid: stats.uid,\n                gid: stats.gid\n              };\n            }\n\n            resolve();\n          }\n        });\n      }\n    });\n  }).then(function thenWriteFile() {\n    return new Promise(function (resolve, reject) {\n      fs.open(tmpfile, 'w', options.mode, function (err, _fd) {\n        fd = _fd;\n        if (err) reject(err);else resolve();\n      });\n    });\n  }).then(function write() {\n    return new Promise(function (resolve, reject) {\n      if (Buffer.isBuffer(data)) {\n        fs.write(fd, data, 0, data.length, 0, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      } else if (data != null) {\n        fs.write(fd, String(data), 0, String(options.encoding || 'utf8'), function (err) {\n          if (err) reject(err);else resolve();\n        });\n      } else resolve();\n    });\n  }).then(function syncAndClose() {\n    if (options.fsync !== false) {\n      return new Promise(function (resolve, reject) {\n        fs.fsync(fd, function (err) {\n          if (err) reject(err);else fs.close(fd, resolve);\n        });\n      });\n    }\n  }).then(function chown() {\n    if (options.chown) {\n      return new Promise(function (resolve, reject) {\n        fs.chown(tmpfile, options.chown.uid, options.chown.gid, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      });\n    }\n  }).then(function chmod() {\n    if (options.mode) {\n      return new Promise(function (resolve, reject) {\n        fs.chmod(tmpfile, options.mode, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      });\n    }\n  }).then(function rename() {\n    return new Promise(function (resolve, reject) {\n      fs.rename(tmpfile, truename, function (err) {\n        if (err) reject(err);else resolve();\n      });\n    });\n  }).then(function success() {\n    removeOnExit();\n    callback();\n  }).catch(function fail(err) {\n    removeOnExit();\n    fs.unlink(tmpfile, function () {\n      callback(err);\n    });\n  }).then(function checkQueue() {\n    activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0](); // start next job if one is pending\n    } else delete activeFiles[absoluteName];\n  });\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (!options) options = {};\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  var tmpfile = getTmpname(filename);\n\n  try {\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      try {\n        var stats = fs.statSync(filename);\n        options = Object.assign({}, options);\n\n        if (!options.mode) {\n          options.mode = stats.mode;\n        }\n\n        if (!options.chown && process.getuid) {\n          options.chown = {\n            uid: stats.uid,\n            gid: stats.gid\n          };\n        }\n      } catch (ex) {// ignore stat errors\n      }\n    }\n\n    var removeOnExit = onExit(cleanupOnExit(tmpfile));\n    var fd = fs.openSync(tmpfile, 'w', options.mode);\n\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n    if (options.mode) fs.chmodSync(tmpfile, options.mode);\n    fs.renameSync(tmpfile, filename);\n    removeOnExit();\n  } catch (err) {\n    removeOnExit();\n\n    try {\n      fs.unlinkSync(tmpfile);\n    } catch (e) {}\n\n    throw err;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}